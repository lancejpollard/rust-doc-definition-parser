{
  "title": "Struct std::num::Wrapping",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub const MIN: Wrapping<usize>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<usize>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<usize>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<usize>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<usize>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<usize>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<usize>) -> Wrapping<usize>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<usize>) -> Wrapping<usize>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<usize>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<usize>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<usize>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<u8>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<u8>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<u8>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<u8>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<u8>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<u8>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<u8>) -> Wrapping<u8>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<u8>) -> Wrapping<u8>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<u8>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<u8>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<u8>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<u16>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<u16>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<u16>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<u16>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<u16>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<u16>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<u16>) -> Wrapping<u16>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<u16>) -> Wrapping<u16>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<u16>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<u16>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<u16>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<u32>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<u32>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<u32>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<u32>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<u32>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<u32>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<u32>) -> Wrapping<u32>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<u32>) -> Wrapping<u32>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<u32>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<u32>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<u32>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<u64>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<u64>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<u64>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<u64>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<u64>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<u64>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<u64>) -> Wrapping<u64>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<u64>) -> Wrapping<u64>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<u64>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<u64>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<u64>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<u128>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<u128>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<u128>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<u128>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<u128>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<u128>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<u128>) -> Wrapping<u128>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<u128>) -> Wrapping<u128>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<u128>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<u128>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<u128>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<isize>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<isize>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<isize>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<isize>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<isize>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<isize>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<isize>) -> Wrapping<isize>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<isize>) -> Wrapping<isize>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<isize>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<isize>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<isize>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<i8>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<i8>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<i8>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<i8>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<i8>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<i8>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<i8>) -> Wrapping<i8>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<i8>) -> Wrapping<i8>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<i8>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<i8>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<i8>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<i16>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<i16>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<i16>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<i16>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<i16>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<i16>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<i16>) -> Wrapping<i16>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<i16>) -> Wrapping<i16>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<i16>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<i16>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<i16>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<i32>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<i32>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<i32>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<i32>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<i32>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<i32>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<i32>) -> Wrapping<i32>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<i32>) -> Wrapping<i32>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<i32>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<i32>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<i32>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<i64>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<i64>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<i64>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<i64>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<i64>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<i64>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<i64>) -> Wrapping<i64>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<i64>) -> Wrapping<i64>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<i64>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<i64>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<i64>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const MIN: Wrapping<i128>",
          "text": "Returns the smallest value that can be represented by this integer type."
        },
        {
          "code": "pub const MAX: Wrapping<i128>",
          "text": "Returns the largest value that can be represented by this integer type."
        },
        {
          "code": "pub const BITS: u32",
          "text": "Returns the size of this integer type in bits."
        },
        {
          "code": "pub const fn count_ones(self) -> u32",
          "text": "Returns the number of ones in the binary representation of self."
        },
        {
          "code": "pub const fn count_zeros(self) -> u32",
          "text": "Returns the number of zeros in the binary representation of self."
        },
        {
          "code": "pub const fn trailing_zeros(self) -> u32",
          "text": "Returns the number of trailing zeros in the binary representation of self."
        },
        {
          "code": "pub const fn rotate_left(self, n: u32) -> Wrapping<i128>",
          "text": "Shifts the bits to the left by a specified amount, n, wrapping the truncated bits to the end of the resulting integer."
        },
        {
          "code": "pub const fn rotate_right(self, n: u32) -> Wrapping<i128>",
          "text": "Shifts the bits to the right by a specified amount, n, wrapping the truncated bits to the beginning of the resulting integer."
        },
        {
          "code": "pub const fn swap_bytes(self) -> Wrapping<i128>",
          "text": "Reverses the byte order of the integer."
        },
        {
          "code": "pub const fn reverse_bits(self) -> Wrapping<i128>",
          "text": "Reverses the bit pattern of the integer."
        },
        {
          "code": "pub const fn from_be(x: Wrapping<i128>) -> Wrapping<i128>",
          "text": "Converts an integer from big endian to the target’s endianness."
        },
        {
          "code": "pub const fn from_le(x: Wrapping<i128>) -> Wrapping<i128>",
          "text": "Converts an integer from little endian to the target’s endianness."
        },
        {
          "code": "pub const fn to_be(self) -> Wrapping<i128>",
          "text": "Converts self to big endian from the target’s endianness."
        },
        {
          "code": "pub const fn to_le(self) -> Wrapping<i128>",
          "text": "Converts self to little endian from the target’s endianness."
        },
        {
          "code": "pub fn pow(self, exp: u32) -> Wrapping<i128>",
          "text": "Raises self to the power of exp, using exponentiation by squaring."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn abs(self) -> Wrapping<isize>",
          "text": "Computes the absolute value of self, wrapping around at the boundary of the type."
        },
        {
          "code": "pub fn signum(self) -> Wrapping<isize>",
          "text": "Returns a number representing sign of self."
        },
        {
          "code": "pub const fn is_positive(self) -> bool",
          "text": "Returns true if self is positive and false if the number is zero or negative."
        },
        {
          "code": "pub const fn is_negative(self) -> bool",
          "text": "Returns true if self is negative and false if the number is zero or positive."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn abs(self) -> Wrapping<i8>",
          "text": "Computes the absolute value of self, wrapping around at the boundary of the type."
        },
        {
          "code": "pub fn signum(self) -> Wrapping<i8>",
          "text": "Returns a number representing sign of self."
        },
        {
          "code": "pub const fn is_positive(self) -> bool",
          "text": "Returns true if self is positive and false if the number is zero or negative."
        },
        {
          "code": "pub const fn is_negative(self) -> bool",
          "text": "Returns true if self is negative and false if the number is zero or positive."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn abs(self) -> Wrapping<i16>",
          "text": "Computes the absolute value of self, wrapping around at the boundary of the type."
        },
        {
          "code": "pub fn signum(self) -> Wrapping<i16>",
          "text": "Returns a number representing sign of self."
        },
        {
          "code": "pub const fn is_positive(self) -> bool",
          "text": "Returns true if self is positive and false if the number is zero or negative."
        },
        {
          "code": "pub const fn is_negative(self) -> bool",
          "text": "Returns true if self is negative and false if the number is zero or positive."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn abs(self) -> Wrapping<i32>",
          "text": "Computes the absolute value of self, wrapping around at the boundary of the type."
        },
        {
          "code": "pub fn signum(self) -> Wrapping<i32>",
          "text": "Returns a number representing sign of self."
        },
        {
          "code": "pub const fn is_positive(self) -> bool",
          "text": "Returns true if self is positive and false if the number is zero or negative."
        },
        {
          "code": "pub const fn is_negative(self) -> bool",
          "text": "Returns true if self is negative and false if the number is zero or positive."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn abs(self) -> Wrapping<i64>",
          "text": "Computes the absolute value of self, wrapping around at the boundary of the type."
        },
        {
          "code": "pub fn signum(self) -> Wrapping<i64>",
          "text": "Returns a number representing sign of self."
        },
        {
          "code": "pub const fn is_positive(self) -> bool",
          "text": "Returns true if self is positive and false if the number is zero or negative."
        },
        {
          "code": "pub const fn is_negative(self) -> bool",
          "text": "Returns true if self is negative and false if the number is zero or positive."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn abs(self) -> Wrapping<i128>",
          "text": "Computes the absolute value of self, wrapping around at the boundary of the type."
        },
        {
          "code": "pub fn signum(self) -> Wrapping<i128>",
          "text": "Returns a number representing sign of self."
        },
        {
          "code": "pub const fn is_positive(self) -> bool",
          "text": "Returns true if self is positive and false if the number is zero or negative."
        },
        {
          "code": "pub const fn is_negative(self) -> bool",
          "text": "Returns true if self is negative and false if the number is zero or positive."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn is_power_of_two(self) -> bool",
          "text": "Returns true if and only if self == 2^k for some k."
        },
        {
          "code": "pub fn next_power_of_two(self) -> Wrapping<usize>",
          "text": "Returns the smallest power of two greater than or equal to self."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn is_power_of_two(self) -> bool",
          "text": "Returns true if and only if self == 2^k for some k."
        },
        {
          "code": "pub fn next_power_of_two(self) -> Wrapping<u8>",
          "text": "Returns the smallest power of two greater than or equal to self."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn is_power_of_two(self) -> bool",
          "text": "Returns true if and only if self == 2^k for some k."
        },
        {
          "code": "pub fn next_power_of_two(self) -> Wrapping<u16>",
          "text": "Returns the smallest power of two greater than or equal to self."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn is_power_of_two(self) -> bool",
          "text": "Returns true if and only if self == 2^k for some k."
        },
        {
          "code": "pub fn next_power_of_two(self) -> Wrapping<u32>",
          "text": "Returns the smallest power of two greater than or equal to self."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn is_power_of_two(self) -> bool",
          "text": "Returns true if and only if self == 2^k for some k."
        },
        {
          "code": "pub fn next_power_of_two(self) -> Wrapping<u64>",
          "text": "Returns the smallest power of two greater than or equal to self."
        },
        {
          "code": "pub const fn leading_zeros(self) -> u32",
          "text": "Returns the number of leading zeros in the binary representation of self."
        },
        {
          "code": "pub fn is_power_of_two(self) -> bool",
          "text": "Returns true if and only if self == 2^k for some k."
        },
        {
          "code": "pub fn next_power_of_two(self) -> Wrapping<u128>",
          "text": "Returns the smallest power of two greater than or equal to self."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Add<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Add<Wrapping<i128>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Add<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Add<Wrapping<i128>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Add<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Add<Wrapping<i16>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Add<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Add<Wrapping<i16>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Add<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Add<Wrapping<i32>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Add<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Add<Wrapping<i32>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Add<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Add<Wrapping<i64>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Add<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Add<Wrapping<i64>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Add<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Add<Wrapping<i8>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Add<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Add<Wrapping<i8>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Add<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Add<Wrapping<isize>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Add<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Add<Wrapping<isize>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Add<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Add<Wrapping<u128>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Add<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Add<Wrapping<u128>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Add<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Add<Wrapping<u16>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Add<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Add<Wrapping<u16>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Add<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Add<Wrapping<u32>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Add<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Add<Wrapping<u32>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Add<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Add<Wrapping<u64>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Add<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Add<Wrapping<u64>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Add<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Add<Wrapping<u8>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Add<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Add<Wrapping<u8>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> Add<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Add<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Add<Wrapping<usize>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Add<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Add<Wrapping<usize>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Add<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<i128>) -> <Wrapping<i128> as Add<Wrapping<i128>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Add<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<i16>) -> <Wrapping<i16> as Add<Wrapping<i16>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Add<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<i32>) -> <Wrapping<i32> as Add<Wrapping<i32>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Add<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<i64>) -> <Wrapping<i64> as Add<Wrapping<i64>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Add<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<i8>) -> <Wrapping<i8> as Add<Wrapping<i8>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Add<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<isize>) -> <Wrapping<isize> as Add<Wrapping<isize>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Add<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<u128>) -> <Wrapping<u128> as Add<Wrapping<u128>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Add<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<u16>) -> <Wrapping<u16> as Add<Wrapping<u16>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Add<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<u32>) -> <Wrapping<u32> as Add<Wrapping<u32>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Add<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<u64>) -> <Wrapping<u64> as Add<Wrapping<u64>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Add<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<u8>) -> <Wrapping<u8> as Add<Wrapping<u8>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Add<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add( self, other: Wrapping<usize>) -> <Wrapping<usize> as Add<Wrapping<usize>>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl<T> Binary for Wrapping<T> where T: Binary,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitAnd<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i128>) -> <Wrapping<i128> as BitAnd<Wrapping<i128>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitAnd<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i128>) -> <Wrapping<i128> as BitAnd<Wrapping<i128>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitAnd<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i16>) -> <Wrapping<i16> as BitAnd<Wrapping<i16>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitAnd<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i16>) -> <Wrapping<i16> as BitAnd<Wrapping<i16>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitAnd<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i32>) -> <Wrapping<i32> as BitAnd<Wrapping<i32>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitAnd<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i32>) -> <Wrapping<i32> as BitAnd<Wrapping<i32>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitAnd<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i64>) -> <Wrapping<i64> as BitAnd<Wrapping<i64>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitAnd<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i64>) -> <Wrapping<i64> as BitAnd<Wrapping<i64>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitAnd<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i8>) -> <Wrapping<i8> as BitAnd<Wrapping<i8>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitAnd<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<i8>) -> <Wrapping<i8> as BitAnd<Wrapping<i8>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitAnd<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<isize>) -> <Wrapping<isize> as BitAnd<Wrapping<isize>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitAnd<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<isize>) -> <Wrapping<isize> as BitAnd<Wrapping<isize>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitAnd<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u128>) -> <Wrapping<u128> as BitAnd<Wrapping<u128>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitAnd<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u128>) -> <Wrapping<u128> as BitAnd<Wrapping<u128>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitAnd<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u16>) -> <Wrapping<u16> as BitAnd<Wrapping<u16>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitAnd<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u16>) -> <Wrapping<u16> as BitAnd<Wrapping<u16>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitAnd<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u32>) -> <Wrapping<u32> as BitAnd<Wrapping<u32>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitAnd<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u32>) -> <Wrapping<u32> as BitAnd<Wrapping<u32>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitAnd<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u64>) -> <Wrapping<u64> as BitAnd<Wrapping<u64>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitAnd<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u64>) -> <Wrapping<u64> as BitAnd<Wrapping<u64>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitAnd<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u8>) -> <Wrapping<u8> as BitAnd<Wrapping<u8>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitAnd<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<u8>) -> <Wrapping<u8> as BitAnd<Wrapping<u8>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitAnd<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitAnd<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<usize>) -> <Wrapping<usize> as BitAnd<Wrapping<usize>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAnd<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitAnd<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: &Wrapping<usize>) -> <Wrapping<usize> as BitAnd<Wrapping<usize>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitAnd<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<i128>) -> <Wrapping<i128> as BitAnd<Wrapping<i128>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitAnd<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<i16>) -> <Wrapping<i16> as BitAnd<Wrapping<i16>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitAnd<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<i32>) -> <Wrapping<i32> as BitAnd<Wrapping<i32>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitAnd<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<i64>) -> <Wrapping<i64> as BitAnd<Wrapping<i64>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitAnd<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<i8>) -> <Wrapping<i8> as BitAnd<Wrapping<i8>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitAnd<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<isize>) -> <Wrapping<isize> as BitAnd<Wrapping<isize>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitAnd<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<u128>) -> <Wrapping<u128> as BitAnd<Wrapping<u128>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitAnd<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<u16>) -> <Wrapping<u16> as BitAnd<Wrapping<u16>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitAnd<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<u32>) -> <Wrapping<u32> as BitAnd<Wrapping<u32>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitAnd<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<u64>) -> <Wrapping<u64> as BitAnd<Wrapping<u64>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitAnd<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<u8>) -> <Wrapping<u8> as BitAnd<Wrapping<u8>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl BitAnd<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitAnd<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitAnd<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the & operator."
            },
            {
              "code": "pub fn bitand( self, other: Wrapping<usize>) -> <Wrapping<usize> as BitAnd<Wrapping<usize>>>::Output",
              "text": "Performs the & operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitAndAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl BitAndAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn bitand_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the &= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitOr<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i128>) -> <Wrapping<i128> as BitOr<Wrapping<i128>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitOr<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i128>) -> <Wrapping<i128> as BitOr<Wrapping<i128>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitOr<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i16>) -> <Wrapping<i16> as BitOr<Wrapping<i16>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitOr<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i16>) -> <Wrapping<i16> as BitOr<Wrapping<i16>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitOr<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i32>) -> <Wrapping<i32> as BitOr<Wrapping<i32>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitOr<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i32>) -> <Wrapping<i32> as BitOr<Wrapping<i32>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitOr<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i64>) -> <Wrapping<i64> as BitOr<Wrapping<i64>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitOr<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i64>) -> <Wrapping<i64> as BitOr<Wrapping<i64>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitOr<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i8>) -> <Wrapping<i8> as BitOr<Wrapping<i8>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitOr<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<i8>) -> <Wrapping<i8> as BitOr<Wrapping<i8>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitOr<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<isize>) -> <Wrapping<isize> as BitOr<Wrapping<isize>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitOr<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<isize>) -> <Wrapping<isize> as BitOr<Wrapping<isize>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitOr<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u128>) -> <Wrapping<u128> as BitOr<Wrapping<u128>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitOr<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u128>) -> <Wrapping<u128> as BitOr<Wrapping<u128>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitOr<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u16>) -> <Wrapping<u16> as BitOr<Wrapping<u16>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitOr<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u16>) -> <Wrapping<u16> as BitOr<Wrapping<u16>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitOr<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u32>) -> <Wrapping<u32> as BitOr<Wrapping<u32>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitOr<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u32>) -> <Wrapping<u32> as BitOr<Wrapping<u32>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitOr<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u64>) -> <Wrapping<u64> as BitOr<Wrapping<u64>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitOr<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u64>) -> <Wrapping<u64> as BitOr<Wrapping<u64>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitOr<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u8>) -> <Wrapping<u8> as BitOr<Wrapping<u8>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitOr<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<u8>) -> <Wrapping<u8> as BitOr<Wrapping<u8>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOr<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitOr<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<usize>) -> <Wrapping<usize> as BitOr<Wrapping<usize>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitOr<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitOr<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: &Wrapping<usize>) -> <Wrapping<usize> as BitOr<Wrapping<usize>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitOr<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<i128>) -> <Wrapping<i128> as BitOr<Wrapping<i128>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitOr<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<i16>) -> <Wrapping<i16> as BitOr<Wrapping<i16>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitOr<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<i32>) -> <Wrapping<i32> as BitOr<Wrapping<i32>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitOr<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<i64>) -> <Wrapping<i64> as BitOr<Wrapping<i64>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitOr<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<i8>) -> <Wrapping<i8> as BitOr<Wrapping<i8>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitOr<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<isize>) -> <Wrapping<isize> as BitOr<Wrapping<isize>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitOr<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<u128>) -> <Wrapping<u128> as BitOr<Wrapping<u128>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitOr<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<u16>) -> <Wrapping<u16> as BitOr<Wrapping<u16>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitOr<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<u32>) -> <Wrapping<u32> as BitOr<Wrapping<u32>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitOr<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<u64>) -> <Wrapping<u64> as BitOr<Wrapping<u64>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitOr<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<u8>) -> <Wrapping<u8> as BitOr<Wrapping<u8>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitOr<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitOr<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor( self, other: Wrapping<usize>) -> <Wrapping<usize> as BitOr<Wrapping<usize>>>::Output",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl BitOr<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the | operator."
            },
            {
              "code": "pub fn bitor(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the | operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitOrAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl BitOrAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn bitor_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the |= operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitXor<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i128>) -> <Wrapping<i128> as BitXor<Wrapping<i128>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitXor<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i128>) -> <Wrapping<i128> as BitXor<Wrapping<i128>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitXor<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i16>) -> <Wrapping<i16> as BitXor<Wrapping<i16>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitXor<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i16>) -> <Wrapping<i16> as BitXor<Wrapping<i16>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitXor<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i32>) -> <Wrapping<i32> as BitXor<Wrapping<i32>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitXor<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i32>) -> <Wrapping<i32> as BitXor<Wrapping<i32>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitXor<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i64>) -> <Wrapping<i64> as BitXor<Wrapping<i64>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitXor<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i64>) -> <Wrapping<i64> as BitXor<Wrapping<i64>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitXor<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i8>) -> <Wrapping<i8> as BitXor<Wrapping<i8>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitXor<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<i8>) -> <Wrapping<i8> as BitXor<Wrapping<i8>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitXor<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<isize>) -> <Wrapping<isize> as BitXor<Wrapping<isize>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitXor<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<isize>) -> <Wrapping<isize> as BitXor<Wrapping<isize>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitXor<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u128>) -> <Wrapping<u128> as BitXor<Wrapping<u128>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitXor<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u128>) -> <Wrapping<u128> as BitXor<Wrapping<u128>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitXor<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u16>) -> <Wrapping<u16> as BitXor<Wrapping<u16>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitXor<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u16>) -> <Wrapping<u16> as BitXor<Wrapping<u16>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitXor<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u32>) -> <Wrapping<u32> as BitXor<Wrapping<u32>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitXor<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u32>) -> <Wrapping<u32> as BitXor<Wrapping<u32>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitXor<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u64>) -> <Wrapping<u64> as BitXor<Wrapping<u64>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitXor<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u64>) -> <Wrapping<u64> as BitXor<Wrapping<u64>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitXor<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u8>) -> <Wrapping<u8> as BitXor<Wrapping<u8>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitXor<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<u8>) -> <Wrapping<u8> as BitXor<Wrapping<u8>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> BitXor<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitXor<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<usize>) -> <Wrapping<usize> as BitXor<Wrapping<usize>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXor<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitXor<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: &Wrapping<usize>) -> <Wrapping<usize> as BitXor<Wrapping<usize>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as BitXor<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<i128>) -> <Wrapping<i128> as BitXor<Wrapping<i128>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as BitXor<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<i16>) -> <Wrapping<i16> as BitXor<Wrapping<i16>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as BitXor<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<i32>) -> <Wrapping<i32> as BitXor<Wrapping<i32>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as BitXor<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<i64>) -> <Wrapping<i64> as BitXor<Wrapping<i64>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as BitXor<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<i8>) -> <Wrapping<i8> as BitXor<Wrapping<i8>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as BitXor<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<isize>) -> <Wrapping<isize> as BitXor<Wrapping<isize>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as BitXor<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<u128>) -> <Wrapping<u128> as BitXor<Wrapping<u128>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as BitXor<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<u16>) -> <Wrapping<u16> as BitXor<Wrapping<u16>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as BitXor<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<u32>) -> <Wrapping<u32> as BitXor<Wrapping<u32>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as BitXor<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<u64>) -> <Wrapping<u64> as BitXor<Wrapping<u64>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as BitXor<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<u8>) -> <Wrapping<u8> as BitXor<Wrapping<u8>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl BitXor<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'a> BitXor<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as BitXor<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the ^ operator."
            },
            {
              "code": "pub fn bitxor( self, other: Wrapping<usize>) -> <Wrapping<usize> as BitXor<Wrapping<usize>>>::Output",
              "text": "Performs the ^ operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<'_> BitXorAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl BitXorAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn bitxor_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the ^= operation."
            }
          ]
        },
        {
          "title": "impl<T> Clone for Wrapping<T> where T: Clone,",
          "methods": [
            {
              "code": "pub fn clone(&self) -> Wrapping<T>",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<T> Debug for Wrapping<T> where T: Debug,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Default for Wrapping<T> where T: Default,",
          "methods": [
            {
              "code": "pub fn default() -> Wrapping<T>",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl<T> Display for Wrapping<T> where T: Display,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Div<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Div<Wrapping<i128>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Div<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Div<Wrapping<i128>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Div<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Div<Wrapping<i16>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Div<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Div<Wrapping<i16>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Div<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Div<Wrapping<i32>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Div<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Div<Wrapping<i32>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Div<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Div<Wrapping<i64>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Div<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Div<Wrapping<i64>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Div<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Div<Wrapping<i8>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Div<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Div<Wrapping<i8>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Div<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Div<Wrapping<isize>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Div<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Div<Wrapping<isize>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Div<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Div<Wrapping<u128>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Div<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Div<Wrapping<u128>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Div<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Div<Wrapping<u16>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Div<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Div<Wrapping<u16>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Div<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Div<Wrapping<u32>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Div<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Div<Wrapping<u32>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Div<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Div<Wrapping<u64>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Div<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Div<Wrapping<u64>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Div<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Div<Wrapping<u8>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Div<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Div<Wrapping<u8>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Div<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Div<Wrapping<usize>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Div<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Div<Wrapping<usize>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Div<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<i128>) -> <Wrapping<i128> as Div<Wrapping<i128>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Div<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<i16>) -> <Wrapping<i16> as Div<Wrapping<i16>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Div<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<i32>) -> <Wrapping<i32> as Div<Wrapping<i32>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Div<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<i64>) -> <Wrapping<i64> as Div<Wrapping<i64>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Div<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<i8>) -> <Wrapping<i8> as Div<Wrapping<i8>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Div<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<isize>) -> <Wrapping<isize> as Div<Wrapping<isize>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Div<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<u128>) -> <Wrapping<u128> as Div<Wrapping<u128>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Div<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<u16>) -> <Wrapping<u16> as Div<Wrapping<u16>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Div<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<u32>) -> <Wrapping<u32> as Div<Wrapping<u32>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Div<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<u64>) -> <Wrapping<u64> as Div<Wrapping<u64>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Div<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<u8>) -> <Wrapping<u8> as Div<Wrapping<u8>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Div<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div( self, other: Wrapping<usize>) -> <Wrapping<usize> as Div<Wrapping<usize>>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl<T> Hash for Wrapping<T> where T: Hash,",
          "methods": [
            {
              "code": "pub fn hash<__H>(&self, state: &mut __H) where __H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<T> LowerHex for Wrapping<T> where T: LowerHex,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Mul<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Mul<Wrapping<i128>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Mul<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Mul<Wrapping<i128>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Mul<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Mul<Wrapping<i16>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Mul<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Mul<Wrapping<i16>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Mul<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Mul<Wrapping<i32>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Mul<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Mul<Wrapping<i32>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Mul<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Mul<Wrapping<i64>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Mul<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Mul<Wrapping<i64>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Mul<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Mul<Wrapping<i8>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Mul<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Mul<Wrapping<i8>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Mul<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Mul<Wrapping<isize>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Mul<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Mul<Wrapping<isize>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Mul<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Mul<Wrapping<u128>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Mul<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Mul<Wrapping<u128>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Mul<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Mul<Wrapping<u16>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Mul<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Mul<Wrapping<u16>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Mul<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Mul<Wrapping<u32>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Mul<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Mul<Wrapping<u32>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Mul<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Mul<Wrapping<u64>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Mul<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Mul<Wrapping<u64>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Mul<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Mul<Wrapping<u8>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Mul<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Mul<Wrapping<u8>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Mul<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Mul<Wrapping<usize>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Mul<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Mul<Wrapping<usize>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Mul<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<i128>) -> <Wrapping<i128> as Mul<Wrapping<i128>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Mul<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<i16>) -> <Wrapping<i16> as Mul<Wrapping<i16>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Mul<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<i32>) -> <Wrapping<i32> as Mul<Wrapping<i32>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Mul<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<i64>) -> <Wrapping<i64> as Mul<Wrapping<i64>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Mul<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<i8>) -> <Wrapping<i8> as Mul<Wrapping<i8>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Mul<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<isize>) -> <Wrapping<isize> as Mul<Wrapping<isize>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Mul<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<u128>) -> <Wrapping<u128> as Mul<Wrapping<u128>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Mul<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<u16>) -> <Wrapping<u16> as Mul<Wrapping<u16>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Mul<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<u32>) -> <Wrapping<u32> as Mul<Wrapping<u32>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Mul<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<u64>) -> <Wrapping<u64> as Mul<Wrapping<u64>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Mul<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<u8>) -> <Wrapping<u8> as Mul<Wrapping<u8>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Mul<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul( self, other: Wrapping<usize>) -> <Wrapping<usize> as Mul<Wrapping<usize>>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<usize> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<u128> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<isize> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<i64>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<i128> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<u32>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<i32>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<isize>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<u64> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<u8>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<i64> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<usize>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<u128>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<i16>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<u32> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<i16> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<u16> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<i8> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<u8> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<i8>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<u64>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <Wrapping<i32> as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<u16>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl Neg for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> Wrapping<i128>",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<u64> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<u32> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<i32> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<i16> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<isize> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<u128> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<usize> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<u32>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<u8> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<i8> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<i64> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<i64>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<i128> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<u8>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<isize>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<'_> Not for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Not>::Output",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> <Wrapping<u16> as Not>::Output",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<i128>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<usize>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<u16>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<u128>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<i32>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<i16>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<i8>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl Not for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the ! operator."
            },
            {
              "code": "pub fn not(self) -> Wrapping<u64>",
              "text": "Performs the unary ! operation."
            }
          ]
        },
        {
          "title": "impl<T> Octal for Wrapping<T> where T: Octal,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Ord for Wrapping<T> where T: Ord,",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &Wrapping<T>) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<T> PartialEq<Wrapping<T>> for Wrapping<T> where T: PartialEq<T>,",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &Wrapping<T>) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, other: &Wrapping<T>) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<T> PartialOrd<Wrapping<T>> for Wrapping<T> where T: PartialOrd<T>,",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &Wrapping<T>) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i128> where I: Iterator<Item = &'a Wrapping<i128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i16> where I: Iterator<Item = &'a Wrapping<i16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i32> where I: Iterator<Item = &'a Wrapping<i32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i64> where I: Iterator<Item = &'a Wrapping<i64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i8> where I: Iterator<Item = &'a Wrapping<i8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<isize> where I: Iterator<Item = &'a Wrapping<isize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u128> where I: Iterator<Item = &'a Wrapping<u128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u16> where I: Iterator<Item = &'a Wrapping<u16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u32> where I: Iterator<Item = &'a Wrapping<u32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u64> where I: Iterator<Item = &'a Wrapping<u64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u8> where I: Iterator<Item = &'a Wrapping<u8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<usize> where I: Iterator<Item = &'a Wrapping<usize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i128> where I: Iterator<Item = Wrapping<i128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i16> where I: Iterator<Item = Wrapping<i16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i32> where I: Iterator<Item = Wrapping<i32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i64> where I: Iterator<Item = Wrapping<i64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<i8> where I: Iterator<Item = Wrapping<i8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<isize> where I: Iterator<Item = Wrapping<isize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u128> where I: Iterator<Item = Wrapping<u128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u16> where I: Iterator<Item = Wrapping<u16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u32> where I: Iterator<Item = Wrapping<u32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u64> where I: Iterator<Item = Wrapping<u64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<u8> where I: Iterator<Item = Wrapping<u8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> Wrapping<usize> where I: Iterator<Item = Wrapping<usize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Rem<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Rem<Wrapping<i128>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Rem<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Rem<Wrapping<i128>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Rem<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Rem<Wrapping<i16>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Rem<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Rem<Wrapping<i16>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Rem<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Rem<Wrapping<i32>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Rem<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Rem<Wrapping<i32>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Rem<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Rem<Wrapping<i64>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Rem<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Rem<Wrapping<i64>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Rem<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Rem<Wrapping<i8>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Rem<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Rem<Wrapping<i8>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Rem<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Rem<Wrapping<isize>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Rem<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Rem<Wrapping<isize>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Rem<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Rem<Wrapping<u128>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Rem<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Rem<Wrapping<u128>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Rem<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Rem<Wrapping<u16>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Rem<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Rem<Wrapping<u16>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Rem<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Rem<Wrapping<u32>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Rem<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Rem<Wrapping<u32>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Rem<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Rem<Wrapping<u64>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Rem<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Rem<Wrapping<u64>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Rem<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Rem<Wrapping<u8>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Rem<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Rem<Wrapping<u8>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Rem<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Rem<Wrapping<usize>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Rem<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Rem<Wrapping<usize>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Rem<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<i128>) -> <Wrapping<i128> as Rem<Wrapping<i128>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Rem<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<i16>) -> <Wrapping<i16> as Rem<Wrapping<i16>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Rem<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<i32>) -> <Wrapping<i32> as Rem<Wrapping<i32>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Rem<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<i64>) -> <Wrapping<i64> as Rem<Wrapping<i64>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Rem<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<i8>) -> <Wrapping<i8> as Rem<Wrapping<i8>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Rem<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<isize>) -> <Wrapping<isize> as Rem<Wrapping<isize>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Rem<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<u128>) -> <Wrapping<u128> as Rem<Wrapping<u128>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Rem<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<u16>) -> <Wrapping<u16> as Rem<Wrapping<u16>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Rem<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<u32>) -> <Wrapping<u32> as Rem<Wrapping<u32>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Rem<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<u64>) -> <Wrapping<u64> as Rem<Wrapping<u64>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Rem<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<u8>) -> <Wrapping<u8> as Rem<Wrapping<u8>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Rem<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem( self, other: Wrapping<usize>) -> <Wrapping<usize> as Rem<Wrapping<usize>>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u64> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i128> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i32> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i64> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i8> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i32> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<isize> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i8> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u128> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u32> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u16> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u64> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u8> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i16> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<usize> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u8> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i16> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i64> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<i128> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u32> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<usize> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<isize> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shl<&'_ usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u16> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shl<&'_ usize> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: &usize) -> <Wrapping<u128> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<i128> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<i64>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<isize>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<i32> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<u8>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<i16> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<i16>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<u32> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<u128> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<u16>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<i8>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<u64>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<usize>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<usize> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<u32>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<u128>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<u16> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<isize> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<i128>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl Shl<usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> Wrapping<i32>",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<i64> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<u64> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<u8> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shl<usize> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Shl<usize>>::Output",
              "text": "The resulting type after applying the << operator."
            },
            {
              "code": "pub fn shl(self, other: usize) -> <Wrapping<i8> as Shl<usize>>::Output",
              "text": "Performs the << operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShlAssign<&'_ usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: &usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl ShlAssign<usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn shl_assign(&mut self, other: usize)",
              "text": "Performs the <<= operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u32> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i8> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u64> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i16> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i128> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<isize> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u16> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i32> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i64> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u128> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i64> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i8> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u16> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i16> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u8> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i32> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<usize> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u128> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<isize> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> Shr<&'_ usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u64> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u32> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<i128> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<usize> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Shr<&'_ usize> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: &usize) -> <Wrapping<u8> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<u32>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<i8>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<u32> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<u16>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<u8>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<u64>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<isize>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<u8> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<usize>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<i128>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<i16>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<i128> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<u128>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<i16> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<i8> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<usize> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<i32>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<isize> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<u16> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<i32> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<u128> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<u64> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'a> Shr<usize> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Shr<usize>>::Output",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> <Wrapping<i64> as Shr<usize>>::Output",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl Shr<usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the >> operator."
            },
            {
              "code": "pub fn shr(self, other: usize) -> Wrapping<i64>",
              "text": "Performs the >> operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_> ShrAssign<&'_ usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: &usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl ShrAssign<usize> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn shr_assign(&mut self, other: usize)",
              "text": "Performs the >>= operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<i128>> for &'_ Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Sub<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Sub<Wrapping<i128>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Sub<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i128>) -> <Wrapping<i128> as Sub<Wrapping<i128>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Sub<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Sub<Wrapping<i16>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<i16>> for &'_ Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Sub<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i16>) -> <Wrapping<i16> as Sub<Wrapping<i16>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<i32>> for &'_ Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Sub<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Sub<Wrapping<i32>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Sub<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i32>) -> <Wrapping<i32> as Sub<Wrapping<i32>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<i64>> for &'_ Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Sub<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Sub<Wrapping<i64>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Sub<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i64>) -> <Wrapping<i64> as Sub<Wrapping<i64>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Sub<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Sub<Wrapping<i8>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<i8>> for &'_ Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Sub<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<i8>) -> <Wrapping<i8> as Sub<Wrapping<i8>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Sub<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Sub<Wrapping<isize>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<isize>> for &'_ Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Sub<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<isize>) -> <Wrapping<isize> as Sub<Wrapping<isize>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<u128>> for &'_ Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Sub<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Sub<Wrapping<u128>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Sub<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u128>) -> <Wrapping<u128> as Sub<Wrapping<u128>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Sub<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Sub<Wrapping<u16>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<u16>> for &'_ Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Sub<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u16>) -> <Wrapping<u16> as Sub<Wrapping<u16>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<u32>> for &'_ Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Sub<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Sub<Wrapping<u32>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Sub<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u32>) -> <Wrapping<u32> as Sub<Wrapping<u32>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<u64>> for &'_ Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Sub<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Sub<Wrapping<u64>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Sub<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u64>) -> <Wrapping<u64> as Sub<Wrapping<u64>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<u8>> for &'_ Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Sub<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Sub<Wrapping<u8>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Sub<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<u8>) -> <Wrapping<u8> as Sub<Wrapping<u8>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Sub<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Sub<Wrapping<usize>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ Wrapping<usize>> for &'_ Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Sub<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: &Wrapping<usize>) -> <Wrapping<usize> as Sub<Wrapping<usize>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<i128>> for &'a Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i128> as Sub<Wrapping<i128>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<i128>) -> <Wrapping<i128> as Sub<Wrapping<i128>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "type Output = Wrapping<i128>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<i128>) -> Wrapping<i128>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<i16>> for &'a Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i16> as Sub<Wrapping<i16>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<i16>) -> <Wrapping<i16> as Sub<Wrapping<i16>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "type Output = Wrapping<i16>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<i16>) -> Wrapping<i16>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<i32>> for &'a Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i32> as Sub<Wrapping<i32>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<i32>) -> <Wrapping<i32> as Sub<Wrapping<i32>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "type Output = Wrapping<i32>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<i32>) -> Wrapping<i32>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = Wrapping<i64>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<i64>) -> Wrapping<i64>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<i64>> for &'a Wrapping<i64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i64> as Sub<Wrapping<i64>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<i64>) -> <Wrapping<i64> as Sub<Wrapping<i64>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<i8>> for &'a Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<i8> as Sub<Wrapping<i8>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<i8>) -> <Wrapping<i8> as Sub<Wrapping<i8>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "type Output = Wrapping<i8>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<i8>) -> Wrapping<i8>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<isize>> for &'a Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<isize> as Sub<Wrapping<isize>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<isize>) -> <Wrapping<isize> as Sub<Wrapping<isize>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "type Output = Wrapping<isize>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<isize>) -> Wrapping<isize>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = Wrapping<u128>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<u128>) -> Wrapping<u128>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<u128>> for &'a Wrapping<u128>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u128> as Sub<Wrapping<u128>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<u128>) -> <Wrapping<u128> as Sub<Wrapping<u128>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<u16>> for &'a Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u16> as Sub<Wrapping<u16>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<u16>) -> <Wrapping<u16> as Sub<Wrapping<u16>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "type Output = Wrapping<u16>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<u16>) -> Wrapping<u16>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<u32>> for &'a Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u32> as Sub<Wrapping<u32>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<u32>) -> <Wrapping<u32> as Sub<Wrapping<u32>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "type Output = Wrapping<u32>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<u32>) -> Wrapping<u32>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<u64>> for &'a Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u64> as Sub<Wrapping<u64>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<u64>) -> <Wrapping<u64> as Sub<Wrapping<u64>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "type Output = Wrapping<u64>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<u64>) -> Wrapping<u64>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<u8>> for &'a Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = <Wrapping<u8> as Sub<Wrapping<u8>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<u8>) -> <Wrapping<u8> as Sub<Wrapping<u8>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "type Output = Wrapping<u8>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<u8>) -> Wrapping<u8>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = Wrapping<usize>",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: Wrapping<usize>) -> Wrapping<usize>",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<Wrapping<usize>> for &'a Wrapping<usize>",
          "methods": [
            {
              "code": "type Output = <Wrapping<usize> as Sub<Wrapping<usize>>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub( self, other: Wrapping<usize>) -> <Wrapping<usize> as Sub<Wrapping<usize>>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<i128>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<i16>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<i32>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<i64>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<i8>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<isize>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<u128>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<u16>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<u32>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<u64>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<u8>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &Wrapping<usize>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<i128>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<i16>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<i32>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<i64>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<i8>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<isize>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<u128>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<u16>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<u32>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<u64>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<u8>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: Wrapping<usize>)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i128> where I: Iterator<Item = &'a Wrapping<i128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i16> where I: Iterator<Item = &'a Wrapping<i16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i32> where I: Iterator<Item = &'a Wrapping<i32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i64> where I: Iterator<Item = &'a Wrapping<i64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i8> where I: Iterator<Item = &'a Wrapping<i8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<isize> where I: Iterator<Item = &'a Wrapping<isize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u128> where I: Iterator<Item = &'a Wrapping<u128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u16> where I: Iterator<Item = &'a Wrapping<u16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u32> where I: Iterator<Item = &'a Wrapping<u32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u64> where I: Iterator<Item = &'a Wrapping<u64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u8> where I: Iterator<Item = &'a Wrapping<u8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<usize> where I: Iterator<Item = &'a Wrapping<usize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<i128>> for Wrapping<i128>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i128> where I: Iterator<Item = Wrapping<i128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<i16>> for Wrapping<i16>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i16> where I: Iterator<Item = Wrapping<i16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<i32>> for Wrapping<i32>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i32> where I: Iterator<Item = Wrapping<i32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<i64>> for Wrapping<i64>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i64> where I: Iterator<Item = Wrapping<i64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<i8>> for Wrapping<i8>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<i8> where I: Iterator<Item = Wrapping<i8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<isize>> for Wrapping<isize>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<isize> where I: Iterator<Item = Wrapping<isize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<u128>> for Wrapping<u128>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u128> where I: Iterator<Item = Wrapping<u128>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<u16>> for Wrapping<u16>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u16> where I: Iterator<Item = Wrapping<u16>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<u32>> for Wrapping<u32>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u32> where I: Iterator<Item = Wrapping<u32>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<u64>> for Wrapping<u64>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u64> where I: Iterator<Item = Wrapping<u64>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<u8>> for Wrapping<u8>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<u8> where I: Iterator<Item = Wrapping<u8>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Wrapping<usize>> for Wrapping<usize>",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Wrapping<usize> where I: Iterator<Item = Wrapping<usize>>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl<T> UpperHex for Wrapping<T> where T: UpperHex,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        }
      ]
    }
  ]
}