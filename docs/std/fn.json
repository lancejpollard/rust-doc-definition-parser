{
  "title": "Primitive Type fn",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Debug for extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Debug for extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Debug for unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Debug for unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Debug for fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Debug for fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Debug for unsafe fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Debug for unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Debug for unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Debug for fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Debug for extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Debug for extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Debug for extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Debug for unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Debug for fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Debug for unsafe fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Debug for fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Debug for fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Debug for fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Debug for fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Debug for extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Debug for unsafe extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Debug for fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Debug for unsafe extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Debug for extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Debug for unsafe fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Debug for unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Debug for extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Debug for fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Debug for unsafe fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Debug for extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Debug for unsafe fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Debug for unsafe extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Debug for extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Debug for fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Debug for unsafe extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Debug for unsafe extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Debug for unsafe fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Debug for unsafe fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Debug for extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Debug for unsafe extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Debug for fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Debug for fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Debug for unsafe fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Debug for extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Debug for extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Debug for extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Debug for unsafe extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Debug for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Debug for unsafe fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Debug for unsafe extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Debug for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Debug for unsafe extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Debug for extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Hash for unsafe extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Hash for unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Hash for extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Hash for unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Hash for fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Hash for unsafe fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Hash for extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Hash for unsafe fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Hash for extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Hash for unsafe extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Hash for fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Hash for extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Hash for unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Hash for fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Hash for extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Hash for unsafe extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Hash for extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret> Hash for extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Hash for fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Hash for extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Hash for extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Hash for fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret> Hash for unsafe fn() -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Hash for unsafe extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Hash for extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Hash for unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Hash for extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Hash for unsafe fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Hash for extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret> Hash for fn() -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Hash for fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Hash for extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Hash for fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Hash for unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Hash for unsafe fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Hash for fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Hash for unsafe fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Hash for unsafe extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Hash for fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret> Hash for unsafe extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Hash for unsafe fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Hash for fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Hash for unsafe extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Hash for fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Hash for unsafe fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Hash for unsafe extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Hash for extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Hash for unsafe extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Hash for unsafe fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Hash for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Hash for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Hash for extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Hash for fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Hash for unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn hash<HH>(&self, state: &mut HH) where HH: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Ord for extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, D, E) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Ord for unsafe fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B, C, D, E, F, G) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Ord for fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Ord for fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Ord for fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Ord for unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Ord for unsafe extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A, B) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Ord for unsafe extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Ord for unsafe extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A, B, C, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Ord for fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Ord for unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Ord for extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Ord for extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Ord for extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Ord for extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, D, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Ord for unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Ord for fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Ord for unsafe extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A, B, C, D) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Ord for fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D, E, F) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Ord for unsafe fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Ord for unsafe fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret> Ord for extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn() -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Ord for extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret> Ord for fn() -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn() -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Ord for unsafe extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A, B, C) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Ord for extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Ord for fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D, E) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Ord for extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Ord for extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, D, E, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Ord for extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Ord for fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D, E, F, G, H) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Ord for unsafe fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B, C) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Ord for fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Ord for unsafe fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B, C, D, E, F, G, H) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Ord for unsafe extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Ord for fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A, B, C, D, E, F, G) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Ord for extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Ord for unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Ord for unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Ord for unsafe fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B, C, D) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Ord for fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Ord for unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Ord for unsafe fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B, C, D, E) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Ord for extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, D, E, F) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret> Ord for unsafe fn() -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn() -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Ord for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Ord for unsafe fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe fn(A, B, C, D, E, F) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Ord for unsafe extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn(A, B, ...) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Ord for unsafe extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Ord for extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, D) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Ord for fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &fn(A) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret> Ord for unsafe extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &unsafe extern \"C\" fn() -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Ord for extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &extern \"C\" fn(A, B, C, D, E, F, G) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Ord for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialEq<extern \"C\" fn() -> Ret> for extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn() -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialEq<extern \"C\" fn(A, ...) -> Ret> for extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialEq<extern \"C\" fn(A, B, ...) -> Ret> for extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialEq<extern \"C\" fn(A, B, C, ...) -> Ret> for extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialEq<extern \"C\" fn(A, B, C, D, ...) -> Ret> for extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialEq<extern \"C\" fn(A, B, C, D, E, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialEq<extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialEq<extern \"C\" fn(A, B, C, D, E, F, G) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E, F, G) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialEq<extern \"C\" fn(A, B, C, D, E, F) -> Ret> for extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E, F) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialEq<extern \"C\" fn(A, B, C, D, E) -> Ret> for extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D, E) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialEq<extern \"C\" fn(A, B, C, D) -> Ret> for extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C, D) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialEq<extern \"C\" fn(A, B, C) -> Ret> for extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B, C) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialEq<extern \"C\" fn(A, B) -> Ret> for extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A, B) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialEq<extern \"C\" fn(A) -> Ret> for extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &extern \"C\" fn(A) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialEq<fn() -> Ret> for fn() -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn() -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialEq<fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialEq<fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialEq<fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialEq<fn(A, B, C, D, E, F, G, H, I) -> Ret> for fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F, G, H, I) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialEq<fn(A, B, C, D, E, F, G, H) -> Ret> for fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F, G, H) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialEq<fn(A, B, C, D, E, F, G) -> Ret> for fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F, G) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialEq<fn(A, B, C, D, E, F) -> Ret> for fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E, F) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialEq<fn(A, B, C, D, E) -> Ret> for fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D, E) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialEq<fn(A, B, C, D) -> Ret> for fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C, D) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialEq<fn(A, B, C) -> Ret> for fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B, C) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialEq<fn(A, B) -> Ret> for fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A, B) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialEq<fn(A) -> Ret> for fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &fn(A) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialEq<unsafe extern \"C\" fn() -> Ret> for unsafe extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn() -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialEq<unsafe extern \"C\" fn(A, ...) -> Ret> for unsafe extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialEq<unsafe extern \"C\" fn(A, B, ...) -> Ret> for unsafe extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialEq<unsafe extern \"C\" fn(A, B, C, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, C, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialEq<unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialEq<unsafe extern \"C\" fn(A, B, C, D, E) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, C, D, E) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialEq<unsafe extern \"C\" fn(A, B, C, D) -> Ret> for unsafe extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, C, D) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialEq<unsafe extern \"C\" fn(A, B, C) -> Ret> for unsafe extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B, C) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialEq<unsafe extern \"C\" fn(A, B) -> Ret> for unsafe extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A, B) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialEq<unsafe extern \"C\" fn(A) -> Ret> for unsafe extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe extern \"C\" fn(A) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialEq<unsafe fn() -> Ret> for unsafe fn() -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn() -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialEq<unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialEq<unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn eq( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialEq<unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialEq<unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialEq<unsafe fn(A, B, C, D, E, F, G, H) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D, E, F, G, H) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialEq<unsafe fn(A, B, C, D, E, F, G) -> Ret> for unsafe fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D, E, F, G) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialEq<unsafe fn(A, B, C, D, E, F) -> Ret> for unsafe fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D, E, F) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialEq<unsafe fn(A, B, C, D, E) -> Ret> for unsafe fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D, E) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialEq<unsafe fn(A, B, C, D) -> Ret> for unsafe fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C, D) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialEq<unsafe fn(A, B, C) -> Ret> for unsafe fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B, C) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialEq<unsafe fn(A, B) -> Ret> for unsafe fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A, B) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialEq<unsafe fn(A) -> Ret> for unsafe fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &unsafe fn(A) -> Ret) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialOrd<extern \"C\" fn() -> Ret> for extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &extern \"C\" fn() -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialOrd<extern \"C\" fn(A, ...) -> Ret> for extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialOrd<extern \"C\" fn(A, B, ...) -> Ret> for extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialOrd<extern \"C\" fn(A, B, C, ...) -> Ret> for extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialOrd<extern \"C\" fn(A, B, C, D, ...) -> Ret> for extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialOrd<extern \"C\" fn(A, B, C, D, E, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialOrd<extern \"C\" fn(A, B, C, D, E, F, G) -> Ret> for extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F, G) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialOrd<extern \"C\" fn(A, B, C, D, E, F) -> Ret> for extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E, F) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialOrd<extern \"C\" fn(A, B, C, D, E) -> Ret> for extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D, E) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialOrd<extern \"C\" fn(A, B, C, D) -> Ret> for extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C, D) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialOrd<extern \"C\" fn(A, B, C) -> Ret> for extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B, C) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialOrd<extern \"C\" fn(A, B) -> Ret> for extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &extern \"C\" fn(A, B) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialOrd<extern \"C\" fn(A) -> Ret> for extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &extern \"C\" fn(A) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialOrd<fn() -> Ret> for fn() -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &fn() -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialOrd<fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialOrd<fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialOrd<fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialOrd<fn(A, B, C, D, E, F, G, H, I) -> Ret> for fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialOrd<fn(A, B, C, D, E, F, G, H) -> Ret> for fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F, G, H) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialOrd<fn(A, B, C, D, E, F, G) -> Ret> for fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F, G) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialOrd<fn(A, B, C, D, E, F) -> Ret> for fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &fn(A, B, C, D, E, F) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialOrd<fn(A, B, C, D, E) -> Ret> for fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &fn(A, B, C, D, E) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialOrd<fn(A, B, C, D) -> Ret> for fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &fn(A, B, C, D) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialOrd<fn(A, B, C) -> Ret> for fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &fn(A, B, C) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialOrd<fn(A, B) -> Ret> for fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &fn(A, B) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialOrd<fn(A) -> Ret> for fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &fn(A) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialOrd<unsafe extern \"C\" fn() -> Ret> for unsafe extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn() -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialOrd<unsafe extern \"C\" fn(A, ...) -> Ret> for unsafe extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialOrd<unsafe extern \"C\" fn(A, B, ...) -> Ret> for unsafe extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialOrd<unsafe extern \"C\" fn(A, B, C, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialOrd<unsafe extern \"C\" fn(A, B, C, D, E) -> Ret> for unsafe extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D, E) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialOrd<unsafe extern \"C\" fn(A, B, C, D) -> Ret> for unsafe extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C, D) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialOrd<unsafe extern \"C\" fn(A, B, C) -> Ret> for unsafe extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B, C) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialOrd<unsafe extern \"C\" fn(A, B) -> Ret> for unsafe extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A, B) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialOrd<unsafe extern \"C\" fn(A) -> Ret> for unsafe extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe extern \"C\" fn(A) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret> PartialOrd<unsafe fn() -> Ret> for unsafe fn() -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &unsafe fn() -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> PartialOrd<unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> PartialOrd<unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> PartialOrd<unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> PartialOrd<unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> PartialOrd<unsafe fn(A, B, C, D, E, F, G, H) -> Ret> for unsafe fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G, H) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> PartialOrd<unsafe fn(A, B, C, D, E, F, G) -> Ret> for unsafe fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F, G) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> PartialOrd<unsafe fn(A, B, C, D, E, F) -> Ret> for unsafe fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E, F) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> PartialOrd<unsafe fn(A, B, C, D, E) -> Ret> for unsafe fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D, E) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> PartialOrd<unsafe fn(A, B, C, D) -> Ret> for unsafe fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp( &self, other: &unsafe fn(A, B, C, D) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> PartialOrd<unsafe fn(A, B, C) -> Ret> for unsafe fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &unsafe fn(A, B, C) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> PartialOrd<unsafe fn(A, B) -> Ret> for unsafe fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &unsafe fn(A, B) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A> PartialOrd<unsafe fn(A) -> Ret> for unsafe fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &unsafe fn(A) -> Ret) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Pointer for fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Pointer for unsafe fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Pointer for extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Pointer for fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Pointer for extern \"C\" fn(A, B, C, D, E, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Pointer for extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Pointer for unsafe extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Pointer for unsafe extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Pointer for unsafe extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Pointer for unsafe fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Pointer for unsafe fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Pointer for fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Pointer for unsafe fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Pointer for unsafe fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Pointer for extern \"C\" fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret> Pointer for fn() -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Pointer for extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Pointer for extern \"C\" fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Pointer for unsafe extern \"C\" fn(A, B, C, D, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Pointer for unsafe fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Pointer for unsafe extern \"C\" fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Pointer for fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Pointer for extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Pointer for extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Pointer for fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Pointer for extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Pointer for fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Pointer for unsafe extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Pointer for unsafe fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Pointer for unsafe fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Pointer for unsafe fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Pointer for unsafe extern \"C\" fn(A, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Pointer for unsafe fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Pointer for extern \"C\" fn(A, B, C, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, G, H, I, J) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E> Pointer for unsafe extern \"C\" fn(A, B, C, D, E) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Pointer for fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Pointer for extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Pointer for extern \"C\" fn(A, B, C, D, E, F, G) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Pointer for extern \"C\" fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Pointer for unsafe fn(A, B) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H, I, J, K, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Pointer for unsafe extern \"C\" fn(A, B, C, D, E, F, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F> Pointer for fn(A, B, C, D, E, F) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Pointer for fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B> Pointer for unsafe extern \"C\" fn(A, B, ...) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K, L> Pointer for unsafe fn(A, B, C, D, E, F, G, H, I, J, K, L) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I> Pointer for fn(A, B, C, D, E, F, G, H, I) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C> Pointer for unsafe extern \"C\" fn(A, B, C) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H, I, J, K> Pointer for fn(A, B, C, D, E, F, G, H, I, J, K) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Pointer for unsafe fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A> Pointer for fn(A) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D> Pointer for extern \"C\" fn(A, B, C, D) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<Ret, A, B, C, D, E, F, G, H> Pointer for extern \"C\" fn(A, B, C, D, E, F, G, H) -> Ret",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        }
      ]
    }
  ]
}