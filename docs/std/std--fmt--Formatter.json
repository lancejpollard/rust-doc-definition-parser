{
  "title": "Struct std::fmt::Formatter",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn pad_integral( &mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result<(), Error>",
          "text": "Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method."
        },
        {
          "code": "pub fn pad(&mut self, s: &str) -> Result<(), Error>",
          "text": "This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:"
        },
        {
          "code": "pub fn write_str(&mut self, data: &str) -> Result<(), Error>",
          "text": "Writes some data to the underlying buffer contained within this formatter."
        },
        {
          "code": "pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<(), Error>",
          "text": "Writes some formatted information into this instance."
        },
        {
          "code": "pub fn fill(&self) -> char",
          "text": "Character used as ‘fill’ whenever there is alignment."
        },
        {
          "code": "pub fn align(&self) -> Option<Alignment>",
          "text": "Flag indicating what form of alignment was requested."
        },
        {
          "code": "pub fn width(&self) -> Option<usize>",
          "text": "Optionally specified integer width that the output should be."
        },
        {
          "code": "pub fn precision(&self) -> Option<usize>",
          "text": "Optionally specified precision for numeric types. Alternatively, the maximum width for string types."
        },
        {
          "code": "pub fn sign_plus(&self) -> bool",
          "text": "Determines if the + flag was specified."
        },
        {
          "code": "pub fn sign_minus(&self) -> bool",
          "text": "Determines if the - flag was specified."
        },
        {
          "code": "pub fn alternate(&self) -> bool",
          "text": "Determines if the # flag was specified."
        },
        {
          "code": "pub fn sign_aware_zero_pad(&self) -> bool",
          "text": "Determines if the 0 flag was specified."
        },
        {
          "code": "pub fn debug_struct(&'b mut self, name: &str) -> DebugStruct<'b, 'a>",
          "text": "Creates a DebugStruct builder designed to assist with creation of fmt::Debug implementations for structs."
        },
        {
          "code": "pub fn debug_tuple(&'b mut self, name: &str) -> DebugTuple<'b, 'a>",
          "text": "Creates a DebugTuple builder designed to assist with creation of fmt::Debug implementations for tuple structs."
        },
        {
          "code": "pub fn debug_list(&'b mut self) -> DebugList<'b, 'a>",
          "text": "Creates a DebugList builder designed to assist with creation of fmt::Debug implementations for list-like structures."
        },
        {
          "code": "pub fn debug_set(&'b mut self) -> DebugSet<'b, 'a>",
          "text": "Creates a DebugSet builder designed to assist with creation of fmt::Debug implementations for set-like structures."
        },
        {
          "code": "pub fn debug_map(&'b mut self) -> DebugMap<'b, 'a>",
          "text": "Creates a DebugMap builder designed to assist with creation of fmt::Debug implementations for map-like structures."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<'_> Write for Formatter<'_>",
          "methods": [
            {
              "code": "pub fn write_str(&mut self, s: &str) -> Result<(), Error>",
              "text": "Writes a string slice into this writer, returning whether the write succeeded."
            },
            {
              "code": "pub fn write_char(&mut self, c: char) -> Result<(), Error>",
              "text": "Writes a char into this writer, returning whether the write succeeded."
            },
            {
              "code": "pub fn write_fmt(&mut self, args: Arguments<'_>) -> Result<(), Error>",
              "text": "Glue for usage of the write! macro with implementors of this trait."
            }
          ]
        }
      ]
    }
  ]
}