{
  "title": "Struct std::string::FromUtf8Error",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn as_bytes(&self) -> &[u8]ⓘNotable traits for &[u8]impl Read for &[u8]impl Write for &mut [u8]",
          "text": "Returns a slice of u8s bytes that were attempted to convert to a String."
        },
        {
          "code": "pub fn into_bytes(self) -> Vec<u8, Global>ⓘNotable traits for Vec<u8, A>impl<A: Allocator> Write for Vec<u8, A>",
          "text": "Returns the bytes that were attempted to convert to a String."
        },
        {
          "code": "pub fn utf8_error(&self) -> Utf8Error",
          "text": "Fetch a Utf8Error to get more details about the conversion failure."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for FromUtf8Error",
          "methods": [
            {
              "code": "pub fn clone(&self) -> FromUtf8Error",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for FromUtf8Error",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Display for FromUtf8Error",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Error for FromUtf8Error",
          "methods": [
            {
              "code": "fn source(&self) -> Option<&(dyn Error + 'static)>",
              "text": "The lower-level source of this error, if any."
            },
            {
              "code": "fn backtrace(&self) -> Option<&Backtrace>",
              "text": "Returns a stack backtrace, if available, of where this error occurred."
            }
          ]
        },
        {
          "title": "impl PartialEq<FromUtf8Error> for FromUtf8Error",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &FromUtf8Error) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, other: &FromUtf8Error) -> bool",
              "text": "This method tests for !=."
            }
          ]
        }
      ]
    }
  ]
}