{
  "title": "Struct std::time::Duration",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub const SECOND: Duration",
          "text": "The duration of one second."
        },
        {
          "code": "pub const MILLISECOND: Duration",
          "text": "The duration of one millisecond."
        },
        {
          "code": "pub const MICROSECOND: Duration",
          "text": "The duration of one microsecond."
        },
        {
          "code": "pub const NANOSECOND: Duration",
          "text": "The duration of one nanosecond."
        },
        {
          "code": "pub const ZERO: Duration",
          "text": "A duration of zero time."
        },
        {
          "code": "pub const MAX: Duration",
          "text": "The maximum duration."
        },
        {
          "code": "pub const fn new(secs: u64, nanos: u32) -> Duration",
          "text": "Creates a new Duration from the specified number of whole seconds and additional nanoseconds."
        },
        {
          "code": "pub const fn from_secs(secs: u64) -> Duration",
          "text": "Creates a new Duration from the specified number of whole seconds."
        },
        {
          "code": "pub const fn from_millis(millis: u64) -> Duration",
          "text": "Creates a new Duration from the specified number of milliseconds."
        },
        {
          "code": "pub const fn from_micros(micros: u64) -> Duration",
          "text": "Creates a new Duration from the specified number of microseconds."
        },
        {
          "code": "pub const fn from_nanos(nanos: u64) -> Duration",
          "text": "Creates a new Duration from the specified number of nanoseconds."
        },
        {
          "code": "pub const fn is_zero(&self) -> bool",
          "text": "Returns true if this Duration spans no time."
        },
        {
          "code": "pub const fn as_secs(&self) -> u64",
          "text": "Returns the number of whole seconds contained by this Duration."
        },
        {
          "code": "pub const fn subsec_millis(&self) -> u32",
          "text": "Returns the fractional part of this Duration, in whole milliseconds."
        },
        {
          "code": "pub const fn subsec_micros(&self) -> u32",
          "text": "Returns the fractional part of this Duration, in whole microseconds."
        },
        {
          "code": "pub const fn subsec_nanos(&self) -> u32",
          "text": "Returns the fractional part of this Duration, in nanoseconds."
        },
        {
          "code": "pub const fn as_millis(&self) -> u128",
          "text": "Returns the total number of whole milliseconds contained by this Duration."
        },
        {
          "code": "pub const fn as_micros(&self) -> u128",
          "text": "Returns the total number of whole microseconds contained by this Duration."
        },
        {
          "code": "pub const fn as_nanos(&self) -> u128",
          "text": "Returns the total number of nanoseconds contained by this Duration."
        },
        {
          "code": "pub const fn checked_add(self, rhs: Duration) -> Option<Duration>",
          "text": "Checked Duration addition. Computes self + other, returning None if overflow occurred."
        },
        {
          "code": "pub const fn saturating_add(self, rhs: Duration) -> Duration",
          "text": "Saturating Duration addition. Computes self + other, returning Duration::MAX if overflow occurred."
        },
        {
          "code": "pub const fn checked_sub(self, rhs: Duration) -> Option<Duration>",
          "text": "Checked Duration subtraction. Computes self - other, returning None if the result would be negative or if overflow occurred."
        },
        {
          "code": "pub const fn saturating_sub(self, rhs: Duration) -> Duration",
          "text": "Saturating Duration subtraction. Computes self - other, returning Duration::ZERO if the result would be negative or if overflow occurred."
        },
        {
          "code": "pub const fn checked_mul(self, rhs: u32) -> Option<Duration>",
          "text": "Checked Duration multiplication. Computes self * other, returning None if overflow occurred."
        },
        {
          "code": "pub const fn saturating_mul(self, rhs: u32) -> Duration",
          "text": "Saturating Duration multiplication. Computes self * other, returning Duration::MAX if overflow occurred."
        },
        {
          "code": "pub const fn checked_div(self, rhs: u32) -> Option<Duration>",
          "text": "Checked Duration division. Computes self / other, returning None if other == 0."
        },
        {
          "code": "pub fn as_secs_f64(&self) -> f64",
          "text": "Returns the number of seconds contained by this Duration as f64."
        },
        {
          "code": "pub fn as_secs_f32(&self) -> f32",
          "text": "Returns the number of seconds contained by this Duration as f32."
        },
        {
          "code": "pub fn from_secs_f64(secs: f64) -> Duration",
          "text": "Creates a new Duration from the specified number of seconds represented as f64."
        },
        {
          "code": "pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, FromSecsError>",
          "text": "The checked version of from_secs_f64."
        },
        {
          "code": "pub fn from_secs_f32(secs: f32) -> Duration",
          "text": "Creates a new Duration from the specified number of seconds represented as f32."
        },
        {
          "code": "pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, FromSecsError>",
          "text": "The checked version of from_secs_f32."
        },
        {
          "code": "pub fn mul_f64(self, rhs: f64) -> Duration",
          "text": "Multiplies Duration by f64."
        },
        {
          "code": "pub fn mul_f32(self, rhs: f32) -> Duration",
          "text": "Multiplies Duration by f32."
        },
        {
          "code": "pub fn div_f64(self, rhs: f64) -> Duration",
          "text": "Divide Duration by f64."
        },
        {
          "code": "pub fn div_f32(self, rhs: f32) -> Duration",
          "text": "Divide Duration by f32."
        },
        {
          "code": "pub fn div_duration_f64(self, rhs: Duration) -> f64",
          "text": "Divide Duration by Duration and return f64."
        },
        {
          "code": "pub fn div_duration_f32(self, rhs: Duration) -> f32",
          "text": "Divide Duration by Duration and return f32."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Add<Duration> for Duration",
          "methods": [
            {
              "code": "type Output = Duration",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, rhs: Duration) -> Duration",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<Duration> for Instant",
          "methods": [
            {
              "code": "fn add(self, other: Duration) -> Instant",
              "text": "This function may panic if the resulting point in time cannot be represented by the underlying data structure. See Instant::checked_add for a version without panic."
            },
            {
              "code": "type Output = Instant",
              "text": "The resulting type after applying the + operator."
            }
          ]
        },
        {
          "title": "impl Add<Duration> for SystemTime",
          "methods": [
            {
              "code": "fn add(self, dur: Duration) -> SystemTime",
              "text": "This function may panic if the resulting point in time cannot be represented by the underlying data structure. See SystemTime::checked_add for a version without panic."
            },
            {
              "code": "type Output = SystemTime",
              "text": "The resulting type after applying the + operator."
            }
          ]
        },
        {
          "title": "impl AddAssign<Duration> for Duration",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, rhs: Duration)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Duration> for Instant",
          "methods": [
            {
              "code": "fn add_assign(&mut self, other: Duration)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<Duration> for SystemTime",
          "methods": [
            {
              "code": "fn add_assign(&mut self, other: Duration)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl Clone for Duration",
          "methods": [
            {
              "code": "pub fn clone(&self) -> Duration",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for Duration",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for Duration",
          "methods": [
            {
              "code": "pub fn default() -> Duration",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl Div<u32> for Duration",
          "methods": [
            {
              "code": "type Output = Duration",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, rhs: u32) -> Duration",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<u32> for Duration",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, rhs: u32)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl Hash for Duration",
          "methods": [
            {
              "code": "pub fn hash<__H>(&self, state: &mut __H) where __H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl Mul<Duration> for u32",
          "methods": [
            {
              "code": "type Output = Duration",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, rhs: Duration) -> Duration",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<u32> for Duration",
          "methods": [
            {
              "code": "type Output = Duration",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, rhs: u32) -> Duration",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<u32> for Duration",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, rhs: u32)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl Ord for Duration",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &Duration) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl PartialEq<Duration> for Duration",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &Duration) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, other: &Duration) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialOrd<Duration> for Duration",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &Duration) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl Sub<Duration> for Duration",
          "methods": [
            {
              "code": "type Output = Duration",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, rhs: Duration) -> Duration",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Duration> for Instant",
          "methods": [
            {
              "code": "type Output = Instant",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "fn sub(self, other: Duration) -> Instant",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<Duration> for SystemTime",
          "methods": [
            {
              "code": "type Output = SystemTime",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "fn sub(self, dur: Duration) -> SystemTime",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Duration> for Duration",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, rhs: Duration)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Duration> for Instant",
          "methods": [
            {
              "code": "fn sub_assign(&mut self, other: Duration)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<Duration> for SystemTime",
          "methods": [
            {
              "code": "fn sub_assign(&mut self, other: Duration)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a Duration> for Duration",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Duration where I: Iterator<Item = &'a Duration>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<Duration> for Duration",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> Duration where I: Iterator<Item = Duration>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        }
      ]
    }
  ]
}