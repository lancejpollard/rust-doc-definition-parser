{
  "title": "Struct std::collections::HashSet",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn new() -> HashSet<T, RandomState>",
          "text": "Creates an empty HashSet."
        },
        {
          "code": "pub fn with_capacity(capacity: usize) -> HashSet<T, RandomState>",
          "text": "Creates an empty HashSet with the specified capacity."
        },
        {
          "code": "pub fn capacity(&self) -> usize",
          "text": "Returns the number of elements the set can hold without reallocating."
        },
        {
          "code": "pub fn iter(&self) -> Iter<'_, T>ⓘNotable traits for Iter<'a, K>impl<'a, K> Iterator for Iter<'a, K> type Item = &'a K;",
          "text": "An iterator visiting all elements in arbitrary order. The iterator element type is &'a T."
        },
        {
          "code": "pub fn len(&self) -> usize",
          "text": "Returns the number of elements in the set."
        },
        {
          "code": "pub fn is_empty(&self) -> bool",
          "text": "Returns true if the set contains no elements."
        },
        {
          "code": "pub fn drain(&mut self) -> Drain<'_, T>ⓘNotable traits for Drain<'a, K>impl<'a, K> Iterator for Drain<'a, K> type Item = K;",
          "text": "Clears the set, returning all elements in an iterator."
        },
        {
          "code": "pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, T, F>ⓘNotable traits for DrainFilter<'_, K, F>impl<K, F> Iterator for DrainFilter<'_, K, F> where F: FnMut(&K) -> bool, type Item = K; where F: FnMut(&T) -> bool,",
          "text": "Creates an iterator which uses a closure to determine if a value should be removed."
        },
        {
          "code": "pub fn retain<F>(&mut self, f: F) where F: FnMut(&T) -> bool,",
          "text": "Retains only the elements specified by the predicate."
        },
        {
          "code": "pub fn clear(&mut self)",
          "text": "Clears the set, removing all values."
        },
        {
          "code": "pub fn with_hasher(hasher: S) -> HashSet<T, S>",
          "text": "Creates a new empty hash set which will use the given hasher to hash keys."
        },
        {
          "code": "pub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashSet<T, S>",
          "text": "Creates an empty HashSet with the specified capacity, using hasher to hash the keys."
        },
        {
          "code": "pub fn hasher(&self) -> &S",
          "text": "Returns a reference to the set’s BuildHasher."
        },
        {
          "code": "pub fn reserve(&mut self, additional: usize)",
          "text": "Reserves capacity for at least additional more elements to be inserted in the HashSet. The collection may reserve more space to avoid frequent reallocations."
        },
        {
          "code": "pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError>",
          "text": "Tries to reserve capacity for at least additional more elements to be inserted in the given HashSet<K, V>. The collection may reserve more space to avoid frequent reallocations."
        },
        {
          "code": "pub fn shrink_to_fit(&mut self)",
          "text": "Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy."
        },
        {
          "code": "pub fn shrink_to(&mut self, min_capacity: usize)",
          "text": "Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy."
        },
        {
          "code": "pub fn difference<'a>( &'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S>ⓘNotable traits for Difference<'a, T, S>impl<'a, T, S> Iterator for Difference<'a, T, S> where T: Eq + Hash, S: BuildHasher, type Item = &'a T;",
          "text": "Visits the values representing the difference, i.e., the values that are in self but not in other."
        },
        {
          "code": "pub fn symmetric_difference<'a>( &'a self, other: &'a HashSet<T, S>) -> SymmetricDifference<'a, T, S>ⓘNotable traits for SymmetricDifference<'a, T, S>impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S> where T: Eq + Hash, S: BuildHasher, type Item = &'a T;",
          "text": "Visits the values representing the symmetric difference, i.e., the values that are in self or in other but not in both."
        },
        {
          "code": "pub fn intersection<'a>( &'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S>ⓘNotable traits for Intersection<'a, T, S>impl<'a, T, S> Iterator for Intersection<'a, T, S> where T: Eq + Hash, S: BuildHasher, type Item = &'a T;",
          "text": "Visits the values representing the intersection, i.e., the values that are both in self and other."
        },
        {
          "code": "pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S>ⓘNotable traits for Union<'a, T, S>impl<'a, T, S> Iterator for Union<'a, T, S> where T: Eq + Hash, S: BuildHasher, type Item = &'a T;",
          "text": "Visits the values representing the union, i.e., all the values in self or other, without duplicates."
        },
        {
          "code": "pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq,",
          "text": "Returns true if the set contains a value."
        },
        {
          "code": "pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash + Eq,",
          "text": "Returns a reference to the value in the set, if any, that is equal to the given value."
        },
        {
          "code": "pub fn get_or_insert(&mut self, value: T) -> &T",
          "text": "Inserts the given value into the set if it is not present, then returns a reference to the value in the set."
        },
        {
          "code": "pub fn get_or_insert_owned<Q: ?Sized>(&mut self, value: &Q) -> &T where T: Borrow<Q>, Q: Hash + Eq + ToOwned<Owned = T>,",
          "text": "Inserts an owned copy of the given value into the set if it is not present, then returns a reference to the value in the set."
        },
        {
          "code": "pub fn get_or_insert_with<Q: ?Sized, F>(&mut self, value: &Q, f: F) -> &T where T: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T,",
          "text": "Inserts a value computed from f into the set if the given value is not present, then returns a reference to the value in the set."
        },
        {
          "code": "pub fn is_disjoint(&self, other: &HashSet<T, S>) -> bool",
          "text": "Returns true if self has no elements in common with other. This is equivalent to checking for an empty intersection."
        },
        {
          "code": "pub fn is_subset(&self, other: &HashSet<T, S>) -> bool",
          "text": "Returns true if the set is a subset of another, i.e., other contains at least all the values in self."
        },
        {
          "code": "pub fn is_superset(&self, other: &HashSet<T, S>) -> bool",
          "text": "Returns true if the set is a superset of another, i.e., self contains at least all the values in other."
        },
        {
          "code": "pub fn insert(&mut self, value: T) -> bool",
          "text": "Adds a value to the set."
        },
        {
          "code": "pub fn replace(&mut self, value: T) -> Option<T>",
          "text": "Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value."
        },
        {
          "code": "pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq,",
          "text": "Removes a value from the set. Returns whether the value was present in the set."
        },
        {
          "code": "pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T> where T: Borrow<Q>, Q: Hash + Eq,",
          "text": "Removes and returns the value in the set, if any, that is equal to the given one."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<T, S> BitAnd<&'_ HashSet<T, S>> for &HashSet<T, S> where T: Eq + Hash + Clone, S: BuildHasher + Default,",
          "methods": [
            {
              "code": "fn bitand(self, rhs: &HashSet<T, S>) -> HashSet<T, S>",
              "text": "Returns the intersection of self and rhs as a new HashSet<T, S>."
            },
            {
              "code": "type Output = HashSet<T, S>",
              "text": "The resulting type after applying the & operator."
            }
          ]
        },
        {
          "title": "impl<T, S> BitOr<&'_ HashSet<T, S>> for &HashSet<T, S> where T: Eq + Hash + Clone, S: BuildHasher + Default,",
          "methods": [
            {
              "code": "fn bitor(self, rhs: &HashSet<T, S>) -> HashSet<T, S>",
              "text": "Returns the union of self and rhs as a new HashSet<T, S>."
            },
            {
              "code": "type Output = HashSet<T, S>",
              "text": "The resulting type after applying the | operator."
            }
          ]
        },
        {
          "title": "impl<T, S> BitXor<&'_ HashSet<T, S>> for &HashSet<T, S> where T: Eq + Hash + Clone, S: BuildHasher + Default,",
          "methods": [
            {
              "code": "fn bitxor(self, rhs: &HashSet<T, S>) -> HashSet<T, S>",
              "text": "Returns the symmetric difference of self and rhs as a new HashSet<T, S>."
            },
            {
              "code": "type Output = HashSet<T, S>",
              "text": "The resulting type after applying the ^ operator."
            }
          ]
        },
        {
          "title": "impl<T, S> Clone for HashSet<T, S> where T: Clone, S: Clone,",
          "methods": [
            {
              "code": "fn clone(&self) -> Self",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, other: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<T, S> Debug for HashSet<T, S> where T: Debug,",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T, S> Default for HashSet<T, S> where S: Default,",
          "methods": [
            {
              "code": "fn default() -> HashSet<T, S>",
              "text": "Creates an empty HashSet<T, S> with the Default value for the hasher."
            }
          ]
        },
        {
          "title": "impl<'a, T, S> Extend<&'a T> for HashSet<T, S> where T: 'a + Eq + Hash + Copy, S: BuildHasher,",
          "methods": [
            {
              "code": "fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I)",
              "text": "Extends a collection with the contents of an iterator."
            },
            {
              "code": "fn extend_one(&mut self, item: &'a T)",
              "text": "Extends a collection with exactly one element."
            },
            {
              "code": "fn extend_reserve(&mut self, additional: usize)",
              "text": "Reserves capacity in a collection for the given number of additional elements."
            }
          ]
        },
        {
          "title": "impl<T, S> Extend<T> for HashSet<T, S> where T: Eq + Hash, S: BuildHasher,",
          "methods": [
            {
              "code": "fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I)",
              "text": "Extends a collection with the contents of an iterator."
            },
            {
              "code": "fn extend_one(&mut self, item: T)",
              "text": "Extends a collection with exactly one element."
            },
            {
              "code": "fn extend_reserve(&mut self, additional: usize)",
              "text": "Reserves capacity in a collection for the given number of additional elements."
            }
          ]
        },
        {
          "title": "impl<T, const N: usize> From<[T; N]> for HashSet<T, RandomState> where T: Eq + Hash,",
          "methods": [
            {
              "code": "fn from(arr: [T; N]) -> Self"
            }
          ]
        },
        {
          "title": "impl<T, S> FromIterator<T> for HashSet<T, S> where T: Eq + Hash, S: BuildHasher + Default,",
          "methods": [
            {
              "code": "fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S>",
              "text": "Creates a value from an iterator."
            }
          ]
        },
        {
          "title": "impl<'a, T, S> IntoIterator for &'a HashSet<T, S>",
          "methods": [
            {
              "code": "type Item = &'a T",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "type IntoIter = Iter<'a, T>",
              "text": "Which kind of iterator are we turning this into?"
            },
            {
              "code": "fn into_iter(self) -> Iter<'a, T>ⓘNotable traits for Iter<'a, K>impl<'a, K> Iterator for Iter<'a, K> type Item = &'a K;",
              "text": "Creates an iterator from a value."
            }
          ]
        },
        {
          "title": "impl<T, S> IntoIterator for HashSet<T, S>",
          "methods": [
            {
              "code": "fn into_iter(self) -> IntoIter<T>ⓘNotable traits for IntoIter<K>impl<K> Iterator for IntoIter<K> type Item = K;",
              "text": "Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this."
            },
            {
              "code": "type Item = T",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "type IntoIter = IntoIter<T>",
              "text": "Which kind of iterator are we turning this into?"
            }
          ]
        },
        {
          "title": "impl<T, S> PartialEq<HashSet<T, S>> for HashSet<T, S> where T: Eq + Hash, S: BuildHasher,",
          "methods": [
            {
              "code": "fn eq(&self, other: &HashSet<T, S>) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<T, S> Sub<&'_ HashSet<T, S>> for &HashSet<T, S> where T: Eq + Hash + Clone, S: BuildHasher + Default,",
          "methods": [
            {
              "code": "fn sub(self, rhs: &HashSet<T, S>) -> HashSet<T, S>",
              "text": "Returns the difference of self and rhs as a new HashSet<T, S>."
            },
            {
              "code": "type Output = HashSet<T, S>",
              "text": "The resulting type after applying the - operator."
            }
          ]
        }
      ]
    }
  ]
}