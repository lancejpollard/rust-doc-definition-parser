{
  "title": "Struct std::ffi::CStr",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr",
          "text": "Wraps a raw C string with a safe C string wrapper."
        },
        {
          "code": "pub fn from_bytes_with_nul(bytes: &[u8]) -> Result<&CStr, FromBytesWithNulError>",
          "text": "Creates a C string wrapper from a byte slice."
        },
        {
          "code": "pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr",
          "text": "Unsafely creates a C string wrapper from a byte slice."
        },
        {
          "code": "pub const fn as_ptr(&self) -> *const c_char",
          "text": "Returns the inner pointer to this C string."
        },
        {
          "code": "pub fn to_bytes(&self) -> &[u8]ⓘNotable traits for &[u8]impl Read for &[u8]impl Write for &mut [u8]",
          "text": "Converts this C string to a byte slice."
        },
        {
          "code": "pub fn to_bytes_with_nul(&self) -> &[u8]ⓘNotable traits for &[u8]impl Read for &[u8]impl Write for &mut [u8]",
          "text": "Converts this C string to a byte slice containing the trailing 0 byte."
        },
        {
          "code": "pub fn to_str(&self) -> Result<&str, Utf8Error>",
          "text": "Yields a &str slice if the CStr contains valid UTF-8."
        },
        {
          "code": "pub fn to_string_lossy(&self) -> Cow<'_, str>",
          "text": "Converts a CStr into a Cow<str>."
        },
        {
          "code": "pub fn into_c_string(self: Box<CStr>) -> CString",
          "text": "Converts a Box<CStr> into a CString without copying or allocating."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl AsRef<CStr> for CStr",
          "methods": [
            {
              "code": "fn as_ref(&self) -> &CStr",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl AsRef<CStr> for CString",
          "methods": [
            {
              "code": "fn as_ref(&self) -> &CStr",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl Borrow<CStr> for CString",
          "methods": [
            {
              "code": "fn borrow(&self) -> &CStr",
              "text": "Immutably borrows from an owned value."
            }
          ]
        },
        {
          "title": "impl Debug for CStr",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for &CStr",
          "methods": [
            {
              "code": "fn default() -> Self",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl From<&'_ CStr> for Box<CStr>",
          "methods": [
            {
              "code": "fn from(s: &CStr) -> Box<CStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<&'_ CStr> for Arc<CStr>",
          "methods": [
            {
              "code": "fn from(s: &CStr) -> Arc<CStr>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<&'_ CStr> for Rc<CStr>",
          "methods": [
            {
              "code": "fn from(s: &CStr) -> Rc<CStr>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<&'_ CStr> for CString",
          "methods": [
            {
              "code": "fn from(s: &CStr) -> CString",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<'a> From<&'a CStr> for Cow<'a, CStr>",
          "methods": [
            {
              "code": "fn from(s: &'a CStr) -> Cow<'a, CStr>",
              "text": "Converts a CStr into a borrowed Cow without copying or allocating."
            }
          ]
        },
        {
          "title": "impl Hash for CStr",
          "methods": [
            {
              "code": "fn hash<__H: Hasher>(&self, state: &mut __H)",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl Index<RangeFrom<usize>> for CStr",
          "methods": [
            {
              "code": "type Output = CStr",
              "text": "The returned type after indexing."
            },
            {
              "code": "fn index(&self, index: RangeFrom<usize>) -> &CStr",
              "text": "Performs the indexing (container[index]) operation."
            }
          ]
        },
        {
          "title": "impl Ord for CStr",
          "methods": [
            {
              "code": "fn cmp(&self, other: &CStr) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl PartialEq<CStr> for CStr",
          "methods": [
            {
              "code": "fn eq(&self, other: &CStr) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialOrd<CStr> for CStr",
          "methods": [
            {
              "code": "fn partial_cmp(&self, other: &CStr) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl ToOwned for CStr",
          "methods": [
            {
              "code": "type Owned = CString",
              "text": "The resulting type after obtaining ownership."
            },
            {
              "code": "fn to_owned(&self) -> CString",
              "text": "Creates owned data from borrowed data, usually by cloning."
            },
            {
              "code": "fn clone_into(&self, target: &mut CString)",
              "text": "Uses borrowed data to replace owned data, usually by cloning."
            }
          ]
        }
      ]
    }
  ]
}