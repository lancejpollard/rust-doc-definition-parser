{
  "title": "Primitive Type f64",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn floor(self) -> f64",
          "text": "Returns the largest integer less than or equal to a number."
        },
        {
          "code": "pub fn ceil(self) -> f64",
          "text": "Returns the smallest integer greater than or equal to a number."
        },
        {
          "code": "pub fn round(self) -> f64",
          "text": "Returns the nearest integer to a number. Round half-way cases away from 0.0."
        },
        {
          "code": "pub fn trunc(self) -> f64",
          "text": "Returns the integer part of a number."
        },
        {
          "code": "pub fn fract(self) -> f64",
          "text": "Returns the fractional part of a number."
        },
        {
          "code": "pub fn abs(self) -> f64",
          "text": "Computes the absolute value of self. Returns NAN if the number is NAN."
        },
        {
          "code": "pub fn signum(self) -> f64",
          "text": "Returns a number that represents the sign of self."
        },
        {
          "code": "pub fn copysign(self, sign: f64) -> f64",
          "text": "Returns a number composed of the magnitude of self and the sign of sign."
        },
        {
          "code": "pub fn mul_add(self, a: f64, b: f64) -> f64",
          "text": "Fused multiply-add. Computes (self * a) + b with only one rounding error, yielding a more accurate result than an unfused multiply-add."
        },
        {
          "code": "pub fn div_euclid(self, rhs: f64) -> f64",
          "text": "Calculates Euclidean division, the matching method for rem_euclid."
        },
        {
          "code": "pub fn rem_euclid(self, rhs: f64) -> f64",
          "text": "Calculates the least nonnegative remainder of self (mod rhs)."
        },
        {
          "code": "pub fn powi(self, n: i32) -> f64",
          "text": "Raises a number to an integer power."
        },
        {
          "code": "pub fn powf(self, n: f64) -> f64",
          "text": "Raises a number to a floating point power."
        },
        {
          "code": "pub fn sqrt(self) -> f64",
          "text": "Returns the square root of a number."
        },
        {
          "code": "pub fn exp(self) -> f64",
          "text": "Returns e^(self), (the exponential function)."
        },
        {
          "code": "pub fn exp2(self) -> f64",
          "text": "Returns 2^(self)."
        },
        {
          "code": "pub fn ln(self) -> f64",
          "text": "Returns the natural logarithm of the number."
        },
        {
          "code": "pub fn log(self, base: f64) -> f64",
          "text": "Returns the logarithm of the number with respect to an arbitrary base."
        },
        {
          "code": "pub fn log2(self) -> f64",
          "text": "Returns the base 2 logarithm of the number."
        },
        {
          "code": "pub fn log10(self) -> f64",
          "text": "Returns the base 10 logarithm of the number."
        },
        {
          "code": "pub fn cbrt(self) -> f64",
          "text": "Returns the cube root of a number."
        },
        {
          "code": "pub fn hypot(self, other: f64) -> f64",
          "text": "Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y."
        },
        {
          "code": "pub fn sin(self) -> f64",
          "text": "Computes the sine of a number (in radians)."
        },
        {
          "code": "pub fn cos(self) -> f64",
          "text": "Computes the cosine of a number (in radians)."
        },
        {
          "code": "pub fn tan(self) -> f64",
          "text": "Computes the tangent of a number (in radians)."
        },
        {
          "code": "pub fn asin(self) -> f64",
          "text": "Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1]."
        },
        {
          "code": "pub fn acos(self) -> f64",
          "text": "Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1]."
        },
        {
          "code": "pub fn atan(self) -> f64",
          "text": "Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];"
        },
        {
          "code": "pub fn atan2(self, other: f64) -> f64",
          "text": "Computes the four quadrant arctangent of self (y) and other (x) in radians."
        },
        {
          "code": "pub fn sin_cos(self) -> (f64, f64)",
          "text": "Simultaneously computes the sine and cosine of the number, x. Returns (sin(x), cos(x))."
        },
        {
          "code": "pub fn exp_m1(self) -> f64",
          "text": "Returns e^(self) - 1 in a way that is accurate even if the number is close to zero."
        },
        {
          "code": "pub fn ln_1p(self) -> f64",
          "text": "Returns ln(1+n) (natural logarithm) more accurately than if the operations were performed separately."
        },
        {
          "code": "pub fn sinh(self) -> f64",
          "text": "Hyperbolic sine function."
        },
        {
          "code": "pub fn cosh(self) -> f64",
          "text": "Hyperbolic cosine function."
        },
        {
          "code": "pub fn tanh(self) -> f64",
          "text": "Hyperbolic tangent function."
        },
        {
          "code": "pub fn asinh(self) -> f64",
          "text": "Inverse hyperbolic sine function."
        },
        {
          "code": "pub fn acosh(self) -> f64",
          "text": "Inverse hyperbolic cosine function."
        },
        {
          "code": "pub fn atanh(self) -> f64",
          "text": "Inverse hyperbolic tangent function."
        },
        {
          "code": "pub const RADIX: u32",
          "text": "The radix or base of the internal representation of f64."
        },
        {
          "code": "pub const MANTISSA_DIGITS: u32",
          "text": "Number of significant digits in base 2."
        },
        {
          "code": "pub const DIGITS: u32",
          "text": "Approximate number of significant digits in base 10."
        },
        {
          "code": "pub const EPSILON: f64",
          "text": "Machine epsilon value for f64."
        },
        {
          "code": "pub const MIN: f64",
          "text": "Smallest finite f64 value."
        },
        {
          "code": "pub const MIN_POSITIVE: f64",
          "text": "Smallest positive normal f64 value."
        },
        {
          "code": "pub const MAX: f64",
          "text": "Largest finite f64 value."
        },
        {
          "code": "pub const MIN_EXP: i32",
          "text": "One greater than the minimum possible normal power of 2 exponent."
        },
        {
          "code": "pub const MAX_EXP: i32",
          "text": "Maximum possible power of 2 exponent."
        },
        {
          "code": "pub const MIN_10_EXP: i32",
          "text": "Minimum possible normal power of 10 exponent."
        },
        {
          "code": "pub const MAX_10_EXP: i32",
          "text": "Maximum possible power of 10 exponent."
        },
        {
          "code": "pub const NAN: f64",
          "text": "Not a Number (NaN)."
        },
        {
          "code": "pub const INFINITY: f64",
          "text": "Infinity (∞)."
        },
        {
          "code": "pub const NEG_INFINITY: f64",
          "text": "Negative infinity (−∞)."
        },
        {
          "code": "pub fn is_nan(self) -> bool",
          "text": "Returns true if this value is NaN."
        },
        {
          "code": "pub fn is_infinite(self) -> bool",
          "text": "Returns true if this value is positive infinity or negative infinity, and false otherwise."
        },
        {
          "code": "pub fn is_finite(self) -> bool",
          "text": "Returns true if this number is neither infinite nor NaN."
        },
        {
          "code": "pub fn is_subnormal(self) -> bool",
          "text": "Returns true if the number is subnormal."
        },
        {
          "code": "pub fn is_normal(self) -> bool",
          "text": "Returns true if the number is neither zero, infinite, subnormal, or NaN."
        },
        {
          "code": "pub fn classify(self) -> FpCategory",
          "text": "Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead."
        },
        {
          "code": "pub fn is_sign_positive(self) -> bool",
          "text": "Returns true if self has a positive sign, including +0.0, NaNs with positive sign bit and positive infinity."
        },
        {
          "code": "pub fn is_sign_negative(self) -> bool",
          "text": "Returns true if self has a negative sign, including -0.0, NaNs with negative sign bit and negative infinity."
        },
        {
          "code": "pub fn recip(self) -> f64",
          "text": "Takes the reciprocal (inverse) of a number, 1/x."
        },
        {
          "code": "pub fn to_degrees(self) -> f64",
          "text": "Converts radians to degrees."
        },
        {
          "code": "pub fn to_radians(self) -> f64",
          "text": "Converts degrees to radians."
        },
        {
          "code": "pub fn max(self, other: f64) -> f64",
          "text": "Returns the maximum of the two numbers."
        },
        {
          "code": "pub fn min(self, other: f64) -> f64",
          "text": "Returns the minimum of the two numbers."
        },
        {
          "code": "pub fn maximum(self, other: f64) -> f64",
          "text": "Returns the maximum of the two numbers, propagating NaNs."
        },
        {
          "code": "pub fn minimum(self, other: f64) -> f64",
          "text": "Returns the minimum of the two numbers, propagating NaNs."
        },
        {
          "code": "pub unsafe fn to_int_unchecked<Int>(self) -> Int where f64: FloatToInt<Int>,",
          "text": "Rounds toward zero and converts to any primitive integer type, assuming that the value is finite and fits in that type."
        },
        {
          "code": "pub fn to_bits(self) -> u64",
          "text": "Raw transmutation to u64."
        },
        {
          "code": "pub fn from_bits(v: u64) -> f64",
          "text": "Raw transmutation from u64."
        },
        {
          "code": "pub fn to_be_bytes(self) -> [u8; 8]",
          "text": "Return the memory representation of this floating point number as a byte array in big-endian (network) byte order."
        },
        {
          "code": "pub fn to_le_bytes(self) -> [u8; 8]",
          "text": "Return the memory representation of this floating point number as a byte array in little-endian byte order."
        },
        {
          "code": "pub fn to_ne_bytes(self) -> [u8; 8]",
          "text": "Return the memory representation of this floating point number as a byte array in native byte order."
        },
        {
          "code": "pub fn from_be_bytes(bytes: [u8; 8]) -> f64",
          "text": "Create a floating point value from its representation as a byte array in big endian."
        },
        {
          "code": "pub fn from_le_bytes(bytes: [u8; 8]) -> f64",
          "text": "Create a floating point value from its representation as a byte array in little endian."
        },
        {
          "code": "pub fn from_ne_bytes(bytes: [u8; 8]) -> f64",
          "text": "Create a floating point value from its representation as a byte array in native endian."
        },
        {
          "code": "pub fn total_cmp(&self, other: &f64) -> Ordering",
          "text": "Returns an ordering between self and other values. Unlike the standard partial comparison between floating point numbers, this comparison always produces an ordering in accordance to the totalOrder predicate as defined in IEEE 754 (2008 revision) floating point standard. The values are ordered in following order:"
        },
        {
          "code": "pub fn clamp(self, min: f64, max: f64) -> f64",
          "text": "Restrict a value to a certain interval unless it is NaN."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<'_> Add<&'_ f64> for f64",
          "methods": [
            {
              "code": "type Output = <f64 as Add<f64>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: &f64) -> <f64 as Add<f64>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Add<&'_ f64> for &'_ f64",
          "methods": [
            {
              "code": "type Output = <f64 as Add<f64>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: &f64) -> <f64 as Add<f64>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'a> Add<f64> for &'a f64",
          "methods": [
            {
              "code": "type Output = <f64 as Add<f64>>::Output",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: f64) -> <f64 as Add<f64>>::Output",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl Add<f64> for f64",
          "methods": [
            {
              "code": "type Output = f64",
              "text": "The resulting type after applying the + operator."
            },
            {
              "code": "pub fn add(self, other: f64) -> f64",
              "text": "Performs the + operation."
            }
          ]
        },
        {
          "title": "impl<'_> AddAssign<&'_ f64> for f64",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: &f64)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl AddAssign<f64> for f64",
          "methods": [
            {
              "code": "pub fn add_assign(&mut self, other: f64)",
              "text": "Performs the += operation."
            }
          ]
        },
        {
          "title": "impl Clone for f64",
          "methods": [
            {
              "code": "pub fn clone(&self) -> f64",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for f64",
          "methods": [
            {
              "code": "pub fn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for f64",
          "methods": [
            {
              "code": "pub fn default() -> f64",
              "text": "Returns the default value of 0.0"
            }
          ]
        },
        {
          "title": "impl Display for f64",
          "methods": [
            {
              "code": "pub fn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<'_> Div<&'_ f64> for f64",
          "methods": [
            {
              "code": "type Output = <f64 as Div<f64>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: &f64) -> <f64 as Div<f64>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Div<&'_ f64> for &'_ f64",
          "methods": [
            {
              "code": "type Output = <f64 as Div<f64>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: &f64) -> <f64 as Div<f64>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl Div<f64> for f64",
          "methods": [
            {
              "code": "type Output = f64",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: f64) -> f64",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'a> Div<f64> for &'a f64",
          "methods": [
            {
              "code": "type Output = <f64 as Div<f64>>::Output",
              "text": "The resulting type after applying the / operator."
            },
            {
              "code": "pub fn div(self, other: f64) -> <f64 as Div<f64>>::Output",
              "text": "Performs the / operation."
            }
          ]
        },
        {
          "title": "impl<'_> DivAssign<&'_ f64> for f64",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: &f64)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl DivAssign<f64> for f64",
          "methods": [
            {
              "code": "pub fn div_assign(&mut self, other: f64)",
              "text": "Performs the /= operation."
            }
          ]
        },
        {
          "title": "impl From<f32> for f64",
          "methods": [
            {
              "code": "pub fn from(small: f32) -> f64",
              "text": "Converts f32 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl From<i16> for f64",
          "methods": [
            {
              "code": "pub fn from(small: i16) -> f64",
              "text": "Converts i16 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl From<i32> for f64",
          "methods": [
            {
              "code": "pub fn from(small: i32) -> f64",
              "text": "Converts i32 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl From<i8> for f64",
          "methods": [
            {
              "code": "pub fn from(small: i8) -> f64",
              "text": "Converts i8 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl From<u16> for f64",
          "methods": [
            {
              "code": "pub fn from(small: u16) -> f64",
              "text": "Converts u16 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl From<u32> for f64",
          "methods": [
            {
              "code": "pub fn from(small: u32) -> f64",
              "text": "Converts u32 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl From<u8> for f64",
          "methods": [
            {
              "code": "pub fn from(small: u8) -> f64",
              "text": "Converts u8 to f64 losslessly."
            }
          ]
        },
        {
          "title": "impl FromStr for f64",
          "methods": [
            {
              "code": "pub fn from_str(src: &str) -> Result<f64, ParseFloatError>",
              "text": "Converts a string in base 10 to a float. Accepts an optional decimal exponent."
            },
            {
              "code": "type Err = ParseFloatError",
              "text": "The associated error which can be returned from parsing."
            }
          ]
        },
        {
          "title": "impl LowerExp for f64",
          "methods": [
            {
              "code": "pub fn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<'_> Mul<&'_ f64> for f64",
          "methods": [
            {
              "code": "type Output = <f64 as Mul<f64>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: &f64) -> <f64 as Mul<f64>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Mul<&'_ f64> for &'_ f64",
          "methods": [
            {
              "code": "type Output = <f64 as Mul<f64>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: &f64) -> <f64 as Mul<f64>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'a> Mul<f64> for &'a f64",
          "methods": [
            {
              "code": "type Output = <f64 as Mul<f64>>::Output",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: f64) -> <f64 as Mul<f64>>::Output",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl Mul<f64> for f64",
          "methods": [
            {
              "code": "type Output = f64",
              "text": "The resulting type after applying the * operator."
            },
            {
              "code": "pub fn mul(self, other: f64) -> f64",
              "text": "Performs the * operation."
            }
          ]
        },
        {
          "title": "impl<'_> MulAssign<&'_ f64> for f64",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: &f64)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl MulAssign<f64> for f64",
          "methods": [
            {
              "code": "pub fn mul_assign(&mut self, other: f64)",
              "text": "Performs the *= operation."
            }
          ]
        },
        {
          "title": "impl Neg for f64",
          "methods": [
            {
              "code": "type Output = f64",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> f64",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl<'_> Neg for &'_ f64",
          "methods": [
            {
              "code": "type Output = <f64 as Neg>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn neg(self) -> <f64 as Neg>::Output",
              "text": "Performs the unary - operation."
            }
          ]
        },
        {
          "title": "impl PartialEq<f64> for f64",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &f64) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, other: &f64) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialOrd<f64> for f64",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &f64) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "pub fn lt(&self, other: &f64) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "pub fn le(&self, other: &f64) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "pub fn ge(&self, other: &f64) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            },
            {
              "code": "pub fn gt(&self, other: &f64) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            }
          ]
        },
        {
          "title": "impl<'a> Product<&'a f64> for f64",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> f64 where I: Iterator<Item = &'a f64>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl Product<f64> for f64",
          "methods": [
            {
              "code": "pub fn product<I>(iter: I) -> f64 where I: Iterator<Item = f64>,",
              "text": "Method which takes an iterator and generates Self from the elements by multiplying the items."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Rem<&'_ f64> for &'_ f64",
          "methods": [
            {
              "code": "type Output = <f64 as Rem<f64>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: &f64) -> <f64 as Rem<f64>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> Rem<&'_ f64> for f64",
          "methods": [
            {
              "code": "type Output = <f64 as Rem<f64>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: &f64) -> <f64 as Rem<f64>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'a> Rem<f64> for &'a f64",
          "methods": [
            {
              "code": "type Output = <f64 as Rem<f64>>::Output",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: f64) -> <f64 as Rem<f64>>::Output",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl Rem<f64> for f64",
          "methods": [
            {
              "code": "type Output = f64",
              "text": "The resulting type after applying the % operator."
            },
            {
              "code": "pub fn rem(self, other: f64) -> f64",
              "text": "Performs the % operation."
            }
          ]
        },
        {
          "title": "impl<'_> RemAssign<&'_ f64> for f64",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: &f64)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl RemAssign<f64> for f64",
          "methods": [
            {
              "code": "pub fn rem_assign(&mut self, other: f64)",
              "text": "Performs the %= operation."
            }
          ]
        },
        {
          "title": "impl SimdElement for f64",
          "methods": [
            {
              "code": "type Mask = i64",
              "text": "The mask element type corresponding to this element type."
            }
          ]
        },
        {
          "title": "impl<'_> Sub<&'_ f64> for f64",
          "methods": [
            {
              "code": "type Output = <f64 as Sub<f64>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: &f64) -> <f64 as Sub<f64>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_, '_> Sub<&'_ f64> for &'_ f64",
          "methods": [
            {
              "code": "type Output = <f64 as Sub<f64>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: &f64) -> <f64 as Sub<f64>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl Sub<f64> for f64",
          "methods": [
            {
              "code": "type Output = f64",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: f64) -> f64",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sub<f64> for &'a f64",
          "methods": [
            {
              "code": "type Output = <f64 as Sub<f64>>::Output",
              "text": "The resulting type after applying the - operator."
            },
            {
              "code": "pub fn sub(self, other: f64) -> <f64 as Sub<f64>>::Output",
              "text": "Performs the - operation."
            }
          ]
        },
        {
          "title": "impl<'_> SubAssign<&'_ f64> for f64",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: &f64)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl SubAssign<f64> for f64",
          "methods": [
            {
              "code": "pub fn sub_assign(&mut self, other: f64)",
              "text": "Performs the -= operation."
            }
          ]
        },
        {
          "title": "impl<'a> Sum<&'a f64> for f64",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> f64 where I: Iterator<Item = &'a f64>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl Sum<f64> for f64",
          "methods": [
            {
              "code": "pub fn sum<I>(iter: I) -> f64 where I: Iterator<Item = f64>,",
              "text": "Method which takes an iterator and generates Self from the elements by “summing up” the items."
            }
          ]
        },
        {
          "title": "impl UpperExp for f64",
          "methods": [
            {
              "code": "pub fn fmt(&self, fmt: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        }
      ]
    }
  ]
}