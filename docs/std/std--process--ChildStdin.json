{
  "title": "Struct std::process::ChildStdin",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl AsFd for ChildStdin",
          "methods": [
            {
              "code": "fn as_fd(&self) -> BorrowedFd<'_>",
              "text": "Borrows the file descriptor."
            }
          ]
        },
        {
          "title": "impl AsHandle for ChildStdin",
          "methods": [
            {
              "code": "fn as_handle(&self) -> BorrowedHandle<'_>",
              "text": "Borrows the handle."
            }
          ]
        },
        {
          "title": "impl AsRawFd for ChildStdin",
          "methods": [
            {
              "code": "fn as_raw_fd(&self) -> RawFd",
              "text": "Extracts the raw file descriptor."
            }
          ]
        },
        {
          "title": "impl AsRawHandle for ChildStdin",
          "methods": [
            {
              "code": "fn as_raw_handle(&self) -> RawHandle",
              "text": "Extracts the raw handle, without taking any ownership."
            }
          ]
        },
        {
          "title": "impl Debug for ChildStdin",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl From<ChildStdin> for OwnedFd",
          "methods": [
            {
              "code": "fn from(child_stdin: ChildStdin) -> OwnedFd",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<ChildStdin> for OwnedHandle",
          "methods": [
            {
              "code": "fn from(child_stdin: ChildStdin) -> OwnedHandle",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<ChildStdin> for Stdio",
          "methods": [
            {
              "code": "fn from(child: ChildStdin) -> Stdio",
              "text": "Converts a ChildStdin into a Stdio"
            }
          ]
        },
        {
          "title": "impl IntoRawFd for ChildStdin",
          "methods": [
            {
              "code": "fn into_raw_fd(self) -> RawFd",
              "text": "Consumes this object, returning the raw underlying file descriptor."
            }
          ]
        },
        {
          "title": "impl IntoRawHandle for ChildStdin",
          "methods": [
            {
              "code": "fn into_raw_handle(self) -> RawHandle",
              "text": "Consumes this object, returning the raw underlying handle."
            }
          ]
        },
        {
          "title": "impl Write for ChildStdin",
          "methods": [
            {
              "code": "fn write(&mut self, buf: &[u8]) -> Result<usize>",
              "text": "Write a buffer into this writer, returning how many bytes were written."
            },
            {
              "code": "fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>",
              "text": "Like write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this Writer has an efficient write_vectored implementation."
            },
            {
              "code": "fn flush(&mut self) -> Result<()>",
              "text": "Flush this output stream, ensuring that all intermediately buffered contents reach their destination."
            },
            {
              "code": "fn write_all(&mut self, buf: &[u8]) -> Result<()>",
              "text": "Attempts to write an entire buffer into this writer."
            },
            {
              "code": "fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>",
              "text": "Attempts to write multiple buffers into this writer."
            },
            {
              "code": "fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>",
              "text": "Writes a formatted string into this writer, returning any error encountered."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adapter for this instance of Write."
            }
          ]
        },
        {
          "title": "impl Write for &ChildStdin",
          "methods": [
            {
              "code": "fn write(&mut self, buf: &[u8]) -> Result<usize>",
              "text": "Write a buffer into this writer, returning how many bytes were written."
            },
            {
              "code": "fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>",
              "text": "Like write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this Writer has an efficient write_vectored implementation."
            },
            {
              "code": "fn flush(&mut self) -> Result<()>",
              "text": "Flush this output stream, ensuring that all intermediately buffered contents reach their destination."
            },
            {
              "code": "fn write_all(&mut self, buf: &[u8]) -> Result<()>",
              "text": "Attempts to write an entire buffer into this writer."
            },
            {
              "code": "fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>",
              "text": "Attempts to write multiple buffers into this writer."
            },
            {
              "code": "fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>",
              "text": "Writes a formatted string into this writer, returning any error encountered."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adapter for this instance of Write."
            }
          ]
        }
      ]
    }
  ]
}