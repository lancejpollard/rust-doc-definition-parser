{
  "title": "Struct std::collections::btree_set::BTreeSet",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn new() -> BTreeSet<T>",
          "text": "Makes a new, empty BTreeSet."
        },
        {
          "code": "pub fn range<K, R>(&self, range: R) -> Range<'_, T>ⓘNotable traits for Range<'a, T>impl<'a, T> Iterator for Range<'a, T> type Item = &'a T; where K: Ord + ?Sized, T: Borrow<K> + Ord, R: RangeBounds<K>,",
          "text": "Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax min..max, thus range(min..max) will yield elements from min (inclusive) to max (exclusive). The range may also be entered as (Bound<T>, Bound<T>), so for example range((Excluded(4), Included(10))) will yield a left-exclusive, right-inclusive range from 4 to 10."
        },
        {
          "code": "pub fn difference(&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T>ⓘNotable traits for Difference<'a, T>impl<'a, T> Iterator for Difference<'a, T> where T: Ord, type Item = &'a T; where T: Ord,",
          "text": "Visits the elements representing the difference, i.e., the elements that are in self but not in other, in ascending order."
        },
        {
          "code": "pub fn symmetric_difference( &'a self, other: &'a BTreeSet<T>) -> SymmetricDifference<'a, T>ⓘNotable traits for SymmetricDifference<'a, T>impl<'a, T> Iterator for SymmetricDifference<'a, T> where T: Ord, type Item = &'a T; where T: Ord,",
          "text": "Visits the elements representing the symmetric difference, i.e., the elements that are in self or in other but not in both, in ascending order."
        },
        {
          "code": "pub fn intersection(&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T>ⓘNotable traits for Intersection<'a, T>impl<'a, T> Iterator for Intersection<'a, T> where T: Ord, type Item = &'a T; where T: Ord,",
          "text": "Visits the elements representing the intersection, i.e., the elements that are both in self and other, in ascending order."
        },
        {
          "code": "pub fn union(&'a self, other: &'a BTreeSet<T>) -> Union<'a, T>ⓘNotable traits for Union<'a, T>impl<'a, T> Iterator for Union<'a, T> where T: Ord, type Item = &'a T; where T: Ord,",
          "text": "Visits the elements representing the union, i.e., all the elements in self or other, without duplicates, in ascending order."
        },
        {
          "code": "pub fn clear(&mut self)",
          "text": "Clears the set, removing all elements."
        },
        {
          "code": "pub fn contains<Q>(&self, value: &Q) -> bool where T: Borrow<Q> + Ord, Q: Ord + ?Sized,",
          "text": "Returns true if the set contains an element equal to the value."
        },
        {
          "code": "pub fn get<Q>(&self, value: &Q) -> Option<&T> where T: Borrow<Q> + Ord, Q: Ord + ?Sized,",
          "text": "Returns a reference to the element in the set, if any, that is equal to the value."
        },
        {
          "code": "pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool where T: Ord,",
          "text": "Returns true if self has no elements in common with other. This is equivalent to checking for an empty intersection."
        },
        {
          "code": "pub fn is_subset(&self, other: &BTreeSet<T>) -> bool where T: Ord,",
          "text": "Returns true if the set is a subset of another, i.e., other contains at least all the elements in self."
        },
        {
          "code": "pub fn is_superset(&self, other: &BTreeSet<T>) -> bool where T: Ord,",
          "text": "Returns true if the set is a superset of another, i.e., self contains at least all the elements in other."
        },
        {
          "code": "pub fn first(&self) -> Option<&T> where T: Ord,",
          "text": "Returns a reference to the first element in the set, if any. This element is always the minimum of all elements in the set."
        },
        {
          "code": "pub fn last(&self) -> Option<&T> where T: Ord,",
          "text": "Returns a reference to the last element in the set, if any. This element is always the maximum of all elements in the set."
        },
        {
          "code": "pub fn pop_first(&mut self) -> Option<T> where T: Ord,",
          "text": "Removes the first element from the set and returns it, if any. The first element is always the minimum element in the set."
        },
        {
          "code": "pub fn pop_last(&mut self) -> Option<T> where T: Ord,",
          "text": "Removes the last element from the set and returns it, if any. The last element is always the maximum element in the set."
        },
        {
          "code": "pub fn insert(&mut self, value: T) -> bool where T: Ord,",
          "text": "Adds a value to the set."
        },
        {
          "code": "pub fn replace(&mut self, value: T) -> Option<T> where T: Ord,",
          "text": "Adds a value to the set, replacing the existing element, if any, that is equal to the value. Returns the replaced element."
        },
        {
          "code": "pub fn remove<Q>(&mut self, value: &Q) -> bool where T: Borrow<Q> + Ord, Q: Ord + ?Sized,",
          "text": "If the set contains an element equal to the value, removes it from the set and drops it. Returns whether such an element was present."
        },
        {
          "code": "pub fn take<Q>(&mut self, value: &Q) -> Option<T> where T: Borrow<Q> + Ord, Q: Ord + ?Sized,",
          "text": "Removes and returns the element in the set, if any, that is equal to the value."
        },
        {
          "code": "pub fn retain<F>(&mut self, f: F) where T: Ord, F: FnMut(&T) -> bool,",
          "text": "Retains only the elements specified by the predicate."
        },
        {
          "code": "pub fn append(&mut self, other: &mut BTreeSet<T>) where T: Ord,",
          "text": "Moves all elements from other into Self, leaving other empty."
        },
        {
          "code": "pub fn split_off<Q>(&mut self, value: &Q) -> BTreeSet<T> where Q: Ord + ?Sized, T: Borrow<Q> + Ord,",
          "text": "Splits the collection into two at the value. Returns a new collection with all elements greater than or equal to the value."
        },
        {
          "code": "pub fn drain_filter<'a, F>(&'a mut self, pred: F) -> DrainFilter<'a, T, F>ⓘNotable traits for DrainFilter<'_, T, F>impl<'a, '_, T, F> Iterator for DrainFilter<'_, T, F> where F: 'a + FnMut(&T) -> bool, type Item = T; where T: Ord, F: 'a + FnMut(&T) -> bool,",
          "text": "Creates an iterator that visits all elements in ascending order and uses a closure to determine if an element should be removed."
        },
        {
          "code": "pub fn iter(&self) -> Iter<'_, T>ⓘNotable traits for Iter<'a, T>impl<'a, T> Iterator for Iter<'a, T> type Item = &'a T;",
          "text": "Gets an iterator that visits the elements in the BTreeSet in ascending order."
        },
        {
          "code": "pub fn len(&self) -> usize",
          "text": "Returns the number of elements in the set."
        },
        {
          "code": "pub fn is_empty(&self) -> bool",
          "text": "Returns true if the set contains no elements."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<'_, '_, T> BitAnd<&'_ BTreeSet<T>> for &'_ BTreeSet<T> where T: Ord + Clone,",
          "methods": [
            {
              "code": "pub fn bitand(self, rhs: &BTreeSet<T>) -> BTreeSet<T>",
              "text": "Returns the intersection of self and rhs as a new BTreeSet<T>."
            },
            {
              "code": "type Output = BTreeSet<T>",
              "text": "The resulting type after applying the & operator."
            }
          ]
        },
        {
          "title": "impl<'_, '_, T> BitOr<&'_ BTreeSet<T>> for &'_ BTreeSet<T> where T: Ord + Clone,",
          "methods": [
            {
              "code": "pub fn bitor(self, rhs: &BTreeSet<T>) -> BTreeSet<T>",
              "text": "Returns the union of self and rhs as a new BTreeSet<T>."
            },
            {
              "code": "type Output = BTreeSet<T>",
              "text": "The resulting type after applying the | operator."
            }
          ]
        },
        {
          "title": "impl<'_, '_, T> BitXor<&'_ BTreeSet<T>> for &'_ BTreeSet<T> where T: Ord + Clone,",
          "methods": [
            {
              "code": "pub fn bitxor(self, rhs: &BTreeSet<T>) -> BTreeSet<T>",
              "text": "Returns the symmetric difference of self and rhs as a new BTreeSet<T>."
            },
            {
              "code": "type Output = BTreeSet<T>",
              "text": "The resulting type after applying the ^ operator."
            }
          ]
        },
        {
          "title": "impl<T> Clone for BTreeSet<T> where T: Clone,",
          "methods": [
            {
              "code": "pub fn clone(&self) -> BTreeSet<T>",
              "text": "Returns a copy of the value."
            },
            {
              "code": "pub fn clone_from(&mut self, other: &BTreeSet<T>)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<T> Debug for BTreeSet<T> where T: Debug,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Default for BTreeSet<T>",
          "methods": [
            {
              "code": "pub fn default() -> BTreeSet<T>",
              "text": "Creates an empty BTreeSet."
            }
          ]
        },
        {
          "title": "impl<'a, T> Extend<&'a T> for BTreeSet<T> where T: 'a + Ord + Copy,",
          "methods": [
            {
              "code": "pub fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item = &'a T>,",
              "text": "Extends a collection with the contents of an iterator."
            },
            {
              "code": "pub fn extend_one(&mut self, &'a T)",
              "text": "Extends a collection with exactly one element."
            },
            {
              "code": "fn extend_reserve(&mut self, additional: usize)",
              "text": "Reserves capacity in a collection for the given number of additional elements."
            }
          ]
        },
        {
          "title": "impl<T> Extend<T> for BTreeSet<T> where T: Ord,",
          "methods": [
            {
              "code": "pub fn extend<Iter>(&mut self, iter: Iter) where Iter: IntoIterator<Item = T>,",
              "text": "Extends a collection with the contents of an iterator."
            },
            {
              "code": "pub fn extend_one(&mut self, elem: T)",
              "text": "Extends a collection with exactly one element."
            },
            {
              "code": "fn extend_reserve(&mut self, additional: usize)",
              "text": "Reserves capacity in a collection for the given number of additional elements."
            }
          ]
        },
        {
          "title": "impl<T, const N: usize> From<[T; N]> for BTreeSet<T> where T: Ord,",
          "methods": [
            {
              "code": "pub fn from(arr: [T; N]) -> BTreeSet<T>"
            }
          ]
        },
        {
          "title": "impl<T> FromIterator<T> for BTreeSet<T> where T: Ord,",
          "methods": [
            {
              "code": "pub fn from_iter<I>(iter: I) -> BTreeSet<T> where I: IntoIterator<Item = T>,",
              "text": "Creates a value from an iterator."
            }
          ]
        },
        {
          "title": "impl<T> Hash for BTreeSet<T> where T: Hash,",
          "methods": [
            {
              "code": "pub fn hash<__H>(&self, state: &mut __H) where __H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<T> IntoIterator for BTreeSet<T>",
          "methods": [
            {
              "code": "pub fn into_iter(self) -> IntoIter<T>ⓘNotable traits for IntoIter<T>impl<T> Iterator for IntoIter<T> type Item = T;",
              "text": "Gets an iterator for moving out the BTreeSet’s contents."
            },
            {
              "code": "type Item = T",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "type IntoIter = IntoIter<T>",
              "text": "Which kind of iterator are we turning this into?"
            }
          ]
        },
        {
          "title": "impl<'a, T> IntoIterator for &'a BTreeSet<T>",
          "methods": [
            {
              "code": "type Item = &'a T",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "type IntoIter = Iter<'a, T>",
              "text": "Which kind of iterator are we turning this into?"
            },
            {
              "code": "pub fn into_iter(self) -> Iter<'a, T>ⓘNotable traits for Iter<'a, T>impl<'a, T> Iterator for Iter<'a, T> type Item = &'a T;",
              "text": "Creates an iterator from a value."
            }
          ]
        },
        {
          "title": "impl<T> Ord for BTreeSet<T> where T: Ord,",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &BTreeSet<T>) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<T> PartialEq<BTreeSet<T>> for BTreeSet<T> where T: PartialEq<T>,",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &BTreeSet<T>) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, other: &BTreeSet<T>) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<T> PartialOrd<BTreeSet<T>> for BTreeSet<T> where T: PartialOrd<T>,",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &BTreeSet<T>) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<'_, '_, T> Sub<&'_ BTreeSet<T>> for &'_ BTreeSet<T> where T: Ord + Clone,",
          "methods": [
            {
              "code": "pub fn sub(self, rhs: &BTreeSet<T>) -> BTreeSet<T>",
              "text": "Returns the difference of self and rhs as a new BTreeSet<T>."
            },
            {
              "code": "type Output = BTreeSet<T>",
              "text": "The resulting type after applying the - operator."
            }
          ]
        }
      ]
    }
  ]
}