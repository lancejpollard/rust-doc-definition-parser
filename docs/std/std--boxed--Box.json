{
  "title": "Struct std::boxed::Box",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn new(x: T) -> Box<T, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Allocates memory on the heap and then places x into it."
        },
        {
          "code": "pub fn new_uninit() -> Box<MaybeUninit<T>, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a new box with uninitialized contents."
        },
        {
          "code": "pub fn new_zeroed() -> Box<MaybeUninit<T>, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes."
        },
        {
          "code": "pub fn pin(x: T) -> Pin<Box<T, Global>>ⓘNotable traits for Pin<P>impl<P> Future for Pin<P> where P: DerefMut, <P as Deref>::Target: Future, type Output = <<P as Deref>::Target as Future>::Output;",
          "text": "Constructs a new Pin<Box<T>>. If T does not implement Unpin, then x will be pinned in memory and unable to be moved."
        },
        {
          "code": "pub fn try_new(x: T) -> Result<Box<T, Global>, AllocError>",
          "text": "Allocates memory on the heap then places x into it, returning an error if the allocation fails"
        },
        {
          "code": "pub fn try_new_uninit() -> Result<Box<MaybeUninit<T>, Global>, AllocError>",
          "text": "Constructs a new box with uninitialized contents on the heap, returning an error if the allocation fails"
        },
        {
          "code": "pub fn try_new_zeroed() -> Result<Box<MaybeUninit<T>, Global>, AllocError>",
          "text": "Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes on the heap"
        },
        {
          "code": "pub fn new_in(x: T, alloc: A) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where A: Allocator,",
          "text": "Allocates memory in the given allocator then places x into it."
        },
        {
          "code": "pub fn try_new_in(x: T, alloc: A) -> Result<Box<T, A>, AllocError> where A: Allocator,",
          "text": "Allocates memory in the given allocator then places x into it, returning an error if the allocation fails"
        },
        {
          "code": "pub fn new_uninit_in(alloc: A) -> Box<MaybeUninit<T>, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where A: Allocator,",
          "text": "Constructs a new box with uninitialized contents in the provided allocator."
        },
        {
          "code": "pub fn try_new_uninit_in(alloc: A) -> Result<Box<MaybeUninit<T>, A>, AllocError> where A: Allocator,",
          "text": "Constructs a new box with uninitialized contents in the provided allocator, returning an error if the allocation fails"
        },
        {
          "code": "pub fn new_zeroed_in(alloc: A) -> Box<MaybeUninit<T>, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where A: Allocator,",
          "text": "Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes in the provided allocator."
        },
        {
          "code": "pub fn try_new_zeroed_in(alloc: A) -> Result<Box<MaybeUninit<T>, A>, AllocError> where A: Allocator,",
          "text": "Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes in the provided allocator, returning an error if the allocation fails,"
        },
        {
          "code": "pub fn pin_in(x: T, alloc: A) -> Pin<Box<T, A>>ⓘNotable traits for Pin<P>impl<P> Future for Pin<P> where P: DerefMut, <P as Deref>::Target: Future, type Output = <<P as Deref>::Target as Future>::Output; where A: 'static + Allocator,",
          "text": "Constructs a new Pin<Box<T, A>>. If T does not implement Unpin, then x will be pinned in memory and unable to be moved."
        },
        {
          "code": "pub fn into_boxed_slice(boxed: Box<T, A>) -> Box<[T], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Converts a Box<T> into a Box<[T]>"
        },
        {
          "code": "pub fn into_inner(boxed: Box<T, A>) -> T",
          "text": "Consumes the Box, returning the wrapped value."
        },
        {
          "code": "pub fn new_uninit_slice(len: usize) -> Box<[MaybeUninit<T>], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a new boxed slice with uninitialized contents."
        },
        {
          "code": "pub fn new_zeroed_slice(len: usize) -> Box<[MaybeUninit<T>], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a new boxed slice with uninitialized contents, with the memory being filled with 0 bytes."
        },
        {
          "code": "pub fn try_new_uninit_slice( len: usize) -> Result<Box<[MaybeUninit<T>], Global>, AllocError>",
          "text": "Constructs a new boxed slice with uninitialized contents. Returns an error if the allocation fails"
        },
        {
          "code": "pub fn try_new_zeroed_slice( len: usize) -> Result<Box<[MaybeUninit<T>], Global>, AllocError>",
          "text": "Constructs a new boxed slice with uninitialized contents, with the memory being filled with 0 bytes. Returns an error if the allocation fails"
        },
        {
          "code": "pub fn new_uninit_slice_in(len: usize, alloc: A) -> Box<[MaybeUninit<T>], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a new boxed slice with uninitialized contents in the provided allocator."
        },
        {
          "code": "pub fn new_zeroed_slice_in(len: usize, alloc: A) -> Box<[MaybeUninit<T>], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a new boxed slice with uninitialized contents in the provided allocator, with the memory being filled with 0 bytes."
        },
        {
          "code": "pub unsafe fn assume_init(self) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Converts to Box<T, A>."
        },
        {
          "code": "pub fn write(boxed: Box<MaybeUninit<T>, A>, value: T) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Writes the value and converts to Box<T, A>."
        },
        {
          "code": "pub unsafe fn assume_init(self) -> Box<[T], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Converts to Box<[T], A>."
        },
        {
          "code": "pub unsafe fn from_raw(raw: *mut T) -> Box<T, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a box from a raw pointer."
        },
        {
          "code": "pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
          "text": "Constructs a box from a raw pointer in the given allocator."
        },
        {
          "code": "pub fn into_raw(b: Box<T, A>) -> *mut T",
          "text": "Consumes the Box, returning a wrapped raw pointer."
        },
        {
          "code": "pub fn into_raw_with_allocator(b: Box<T, A>) -> (*mut T, A)",
          "text": "Consumes the Box, returning a wrapped raw pointer and the allocator."
        },
        {
          "code": "pub fn allocator(b: &Box<T, A>) -> &A",
          "text": "Returns a reference to the underlying allocator."
        },
        {
          "code": "pub fn leak<'a>(b: Box<T, A>) -> &'a mut T where A: 'a,",
          "text": "Consumes and leaks the Box, returning a mutable reference, &'a mut T. Note that the type T must outlive the chosen lifetime 'a. If the type has only static references, or none at all, then this may be chosen to be 'static."
        },
        {
          "code": "pub fn into_pin(boxed: Box<T, A>) -> Pin<Box<T, A>>ⓘNotable traits for Pin<P>impl<P> Future for Pin<P> where P: DerefMut, <P as Deref>::Target: Future, type Output = <<P as Deref>::Target as Future>::Output; where A: 'static,",
          "text": "Converts a Box<T> into a Pin<Box<T>>"
        },
        {
          "code": "pub fn downcast<T>(self) -> Result<Box<T, A>, Box<dyn Any + 'static, A>> where T: Any,",
          "text": "Attempt to downcast the box to a concrete type."
        },
        {
          "code": "pub unsafe fn downcast_unchecked<T>(self) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where T: Any,",
          "text": "Downcasts the box to a concrete type."
        },
        {
          "code": "pub fn downcast<T>(self) -> Result<Box<T, A>, Box<dyn Any + Send + 'static, A>> where T: Any,",
          "text": "Attempt to downcast the box to a concrete type."
        },
        {
          "code": "pub unsafe fn downcast_unchecked<T>(self) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where T: Any,",
          "text": "Downcasts the box to a concrete type."
        },
        {
          "code": "pub fn downcast<T>( self) -> Result<Box<T, A>, Box<dyn Any + Send + Sync + 'static, A>> where T: Any,",
          "text": "Attempt to downcast the box to a concrete type."
        },
        {
          "code": "pub unsafe fn downcast_unchecked<T>(self) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where T: Any,",
          "text": "Downcasts the box to a concrete type."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<T, A> AsMut<T> for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn as_mut(&mut self) -> &mut T",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<T, A> AsRef<T> for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn as_ref(&self) -> &T",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<T, A> Borrow<T> for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn borrow(&self) -> &T",
              "text": "Immutably borrows from an owned value."
            }
          ]
        },
        {
          "title": "impl<T, A> BorrowMut<T> for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn borrow_mut(&mut self) -> &mut T",
              "text": "Mutably borrows from an owned value."
            }
          ]
        },
        {
          "title": "impl<B: BufRead + ?Sized> BufRead for Box<B>",
          "methods": [
            {
              "code": "fn fill_buf(&mut self) -> Result<&[u8]>",
              "text": "Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty."
            },
            {
              "code": "fn consume(&mut self, amt: usize)",
              "text": "Tells this buffer that amt bytes have been consumed from the buffer, so they should no longer be returned in calls to read."
            },
            {
              "code": "fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize>",
              "text": "Read all bytes into buf until the delimiter byte or EOF is reached."
            },
            {
              "code": "fn read_line(&mut self, buf: &mut String) -> Result<usize>",
              "text": "Read all bytes until a newline (the 0xA byte) is reached, and append them to the provided buffer."
            },
            {
              "code": "fn has_data_left(&mut self) -> Result<bool>",
              "text": "Check if the underlying Read has any data left to be read."
            },
            {
              "code": "fn split(self, byte: u8) -> Split<Self>ⓘNotable traits for Split<B>impl<B: BufRead> Iterator for Split<B> type Item = Result<Vec<u8>>; where Self: Sized,",
              "text": "Returns an iterator over the contents of this reader split on the byte byte."
            },
            {
              "code": "fn lines(self) -> Lines<Self>ⓘNotable traits for Lines<B>impl<B: BufRead> Iterator for Lines<B> type Item = Result<String>; where Self: Sized,",
              "text": "Returns an iterator over the lines of this reader."
            }
          ]
        },
        {
          "title": "impl<T, A> Clone for Box<[T], A> where T: Clone, A: Allocator + Clone,",
          "methods": [
            {
              "code": "pub fn clone(&self) -> Box<[T], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns a copy of the value."
            },
            {
              "code": "pub fn clone_from(&mut self, other: &Box<[T], A>)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Clone for Box<str, Global>",
          "methods": [
            {
              "code": "pub fn clone(&self) -> Box<str, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<T, A> Clone for Box<T, A> where T: Clone, A: Allocator + Clone,",
          "methods": [
            {
              "code": "pub fn clone(&self) -> Box<T, A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns a new box with a clone() of this box’s contents."
            },
            {
              "code": "pub fn clone_from(&mut self, source: &Box<T, A>)",
              "text": "Copies source’s contents into self without creating a new allocation."
            }
          ]
        },
        {
          "title": "impl Clone for Box<CStr>",
          "methods": [
            {
              "code": "fn clone(&self) -> Self",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Clone for Box<OsStr>",
          "methods": [
            {
              "code": "fn clone(&self) -> Self",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Clone for Box<Path>",
          "methods": [
            {
              "code": "fn clone(&self) -> Self",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<T, A> Debug for Box<T, A> where T: Debug + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Default for Box<[T], Global>",
          "methods": [
            {
              "code": "pub fn default() -> Box<[T], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl<T> Default for Box<T, Global> where T: Default,",
          "methods": [
            {
              "code": "pub fn default() -> Box<T, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Creates a Box<T>, with the Default value for T."
            }
          ]
        },
        {
          "title": "impl Default for Box<str, Global>",
          "methods": [
            {
              "code": "pub fn default() -> Box<str, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl Default for Box<CStr>",
          "methods": [
            {
              "code": "fn default() -> Box<CStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl Default for Box<OsStr>",
          "methods": [
            {
              "code": "fn default() -> Box<OsStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl<T, A> Deref for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "type Target = T",
              "text": "The resulting type after dereferencing."
            },
            {
              "code": "pub fn deref(&self) -> &T",
              "text": "Dereferences the value."
            }
          ]
        },
        {
          "title": "impl<T, A> DerefMut for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn deref_mut(&mut self) -> &mut T",
              "text": "Mutably dereferences the value."
            }
          ]
        },
        {
          "title": "impl<T, A> Display for Box<T, A> where T: Display + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<I, A> DoubleEndedIterator for Box<I, A> where I: DoubleEndedIterator + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn next_back(&mut self) -> Option<<I as Iterator>::Item>",
              "text": "Removes and returns an element from the end of the iterator."
            },
            {
              "code": "pub fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item>",
              "text": "Returns the nth element from the end of the iterator."
            },
            {
              "code": "fn advance_back_by(&mut self, n: usize) -> Result<(), usize>",
              "text": "Advances the iterator from the back by n elements."
            },
            {
              "code": "fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R where F: FnMut(B, Self::Item) -> R, R: Try<Output = B>,",
              "text": "This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator."
            },
            {
              "code": "fn rfold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B,",
              "text": "An iterator method that reduces the iterator’s elements to a single, final value, starting from the back."
            },
            {
              "code": "fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item) -> bool,",
              "text": "Searches for an element of an iterator from the back that satisfies a predicate."
            }
          ]
        },
        {
          "title": "impl<T, A> Drop for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn drop(&mut self)",
              "text": "Executes the destructor for this type."
            }
          ]
        },
        {
          "title": "impl<T: Error> Error for Box<T>",
          "methods": [
            {
              "code": "fn source(&self) -> Option<&(dyn Error + 'static)>",
              "text": "The lower-level source of this error, if any."
            },
            {
              "code": "fn backtrace(&self) -> Option<&Backtrace>",
              "text": "Returns a stack backtrace, if available, of where this error occurred."
            }
          ]
        },
        {
          "title": "impl<I, A> ExactSizeIterator for Box<I, A> where I: ExactSizeIterator + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn len(&self) -> usize",
              "text": "Returns the exact length of the iterator."
            },
            {
              "code": "pub fn is_empty(&self) -> bool",
              "text": "Returns true if the iterator is empty."
            }
          ]
        },
        {
          "title": "impl Extend<Box<str, Global>> for String",
          "methods": [
            {
              "code": "pub fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item = Box<str, Global>>,",
              "text": "Extends a collection with the contents of an iterator."
            },
            {
              "code": "fn extend_one(&mut self, item: A)",
              "text": "Extends a collection with exactly one element."
            },
            {
              "code": "fn extend_reserve(&mut self, additional: usize)",
              "text": "Reserves capacity in a collection for the given number of additional elements."
            }
          ]
        },
        {
          "title": "impl<Args, F, A> Fn<Args> for Box<F, A> where F: Fn<Args> + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub extern \"rust-call\" fn call( &self, args: Args) -> <Box<F, A> as FnOnce<Args>>::OutputⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the call operation."
            }
          ]
        },
        {
          "title": "impl<Args, F, A> FnMut<Args> for Box<F, A> where F: FnMut<Args> + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub extern \"rust-call\" fn call_mut( &mut self, args: Args) -> <Box<F, A> as FnOnce<Args>>::OutputⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the call operation."
            }
          ]
        },
        {
          "title": "impl<Args, F, A> FnOnce<Args> for Box<F, A> where F: FnOnce<Args> + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "type Output = <F as FnOnce<Args>>::Output",
              "text": "The returned type after the call operator is used."
            },
            {
              "code": "pub extern \"rust-call\" fn call_once( self, args: Args) -> <Box<F, A> as FnOnce<Args>>::OutputⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the call operation."
            }
          ]
        },
        {
          "title": "impl<'_, T> From<&'_ [T]> for Box<[T], Global> where T: Copy,",
          "methods": [
            {
              "code": "pub fn from(slice: &[T]) -> Box<[T], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a &[T] into a Box<[T]>"
            }
          ]
        },
        {
          "title": "impl From<&'_ CStr> for Box<CStr>",
          "methods": [
            {
              "code": "fn from(s: &CStr) -> Box<CStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<&'_ OsStr> for Box<OsStr>",
          "methods": [
            {
              "code": "fn from(s: &OsStr) -> Box<OsStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<&'_ Path> for Box<Path>",
          "methods": [
            {
              "code": "fn from(path: &Path) -> Box<Path>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Creates a boxed Path from a reference."
            }
          ]
        },
        {
          "title": "impl<'_> From<&'_ str> for Box<str, Global>",
          "methods": [
            {
              "code": "pub fn from(s: &str) -> Box<str, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a &str into a Box<str>"
            }
          ]
        },
        {
          "title": "impl<'a> From<&'_ str> for Box<dyn Error + Send + Sync + 'a>",
          "methods": [
            {
              "code": "fn from(err: &str) -> Box<dyn Error + Send + Sync + 'a>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a str into a box of dyn Error + Send + Sync."
            }
          ]
        },
        {
          "title": "impl From<&'_ str> for Box<dyn Error>",
          "methods": [
            {
              "code": "fn from(err: &str) -> Box<dyn Error>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a str into a box of dyn Error."
            }
          ]
        },
        {
          "title": "impl<T, const N: usize> From<[T; N]> for Box<[T], Global>",
          "methods": [
            {
              "code": "pub fn from(array: [T; N]) -> Box<[T], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a [T; N] into a Box<[T]>"
            }
          ]
        },
        {
          "title": "impl<T, A> From<Box<[T], A>> for Vec<T, A> where A: Allocator,",
          "methods": [
            {
              "code": "pub fn from(s: Box<[T], A>) -> Vec<T, A>ⓘNotable traits for Vec<u8, A>impl<A: Allocator> Write for Vec<u8, A>",
              "text": "Convert a boxed slice into a vector by transferring ownership of the existing heap allocation."
            }
          ]
        },
        {
          "title": "impl From<Box<CStr, Global>> for CString",
          "methods": [
            {
              "code": "fn from(s: Box<CStr>) -> CString",
              "text": "Converts a Box<CStr> into a CString without copying or allocating."
            }
          ]
        },
        {
          "title": "impl From<Box<OsStr, Global>> for OsString",
          "methods": [
            {
              "code": "fn from(boxed: Box<OsStr>) -> OsString",
              "text": "Converts a Box<OsStr> into an OsString without copying or allocating."
            }
          ]
        },
        {
          "title": "impl From<Box<Path, Global>> for PathBuf",
          "methods": [
            {
              "code": "fn from(boxed: Box<Path>) -> PathBuf",
              "text": "Converts a Box<Path> into a PathBuf"
            }
          ]
        },
        {
          "title": "impl<T, A> From<Box<T, A>> for Pin<Box<T, A>> where A: Allocator + 'static, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn from(boxed: Box<T, A>) -> Pin<Box<T, A>>ⓘNotable traits for Pin<P>impl<P> Future for Pin<P> where P: DerefMut, <P as Deref>::Target: Future, type Output = <<P as Deref>::Target as Future>::Output;",
              "text": "Converts a Box<T> into a Pin<Box<T>>"
            }
          ]
        },
        {
          "title": "impl<T> From<Box<T, Global>> for Arc<T> where T: ?Sized,",
          "methods": [
            {
              "code": "pub fn from(v: Box<T, Global>) -> Arc<T>",
              "text": "Move a boxed object to a new, reference-counted allocation."
            }
          ]
        },
        {
          "title": "impl<T> From<Box<T, Global>> for Rc<T> where T: ?Sized,",
          "methods": [
            {
              "code": "pub fn from(v: Box<T, Global>) -> Rc<T>",
              "text": "Move a boxed object to a new, reference counted, allocation."
            }
          ]
        },
        {
          "title": "impl<A> From<Box<str, A>> for Box<[u8], A> where A: Allocator,",
          "methods": [
            {
              "code": "pub fn from(s: Box<str, A>) -> Box<[u8], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a Box<str> into a Box<[u8]>"
            }
          ]
        },
        {
          "title": "impl From<Box<str, Global>> for String",
          "methods": [
            {
              "code": "pub fn from(s: Box<str, Global>) -> String",
              "text": "Converts the given boxed str slice to a String. It is notable that the str slice is owned."
            }
          ]
        },
        {
          "title": "impl From<CString> for Box<CStr>",
          "methods": [
            {
              "code": "fn from(s: CString) -> Box<CStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a CString into a Box<CStr> without copying or allocating."
            }
          ]
        },
        {
          "title": "impl<'_, T> From<Cow<'_, [T]>> for Box<[T], Global> where T: Copy,",
          "methods": [
            {
              "code": "pub fn from(cow: Cow<'_, [T]>) -> Box<[T], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a Cow<'_, [T]> into a Box<[T]>"
            }
          ]
        },
        {
          "title": "impl From<Cow<'_, CStr>> for Box<CStr>",
          "methods": [
            {
              "code": "fn from(cow: Cow<'_, CStr>) -> Box<CStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<Cow<'_, OsStr>> for Box<OsStr>",
          "methods": [
            {
              "code": "fn from(cow: Cow<'_, OsStr>) -> Box<OsStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<Cow<'_, Path>> for Box<Path>",
          "methods": [
            {
              "code": "fn from(cow: Cow<'_, Path>) -> Box<Path>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Creates a boxed Path from a clone-on-write pointer."
            }
          ]
        },
        {
          "title": "impl<'_> From<Cow<'_, str>> for Box<str, Global>",
          "methods": [
            {
              "code": "pub fn from(cow: Cow<'_, str>) -> Box<str, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a Cow<'_, str> into a Box<str>"
            }
          ]
        },
        {
          "title": "impl<'a> From<Cow<'a, str>> for Box<dyn Error>",
          "methods": [
            {
              "code": "fn from(err: Cow<'a, str>) -> Box<dyn Error>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a Cow into a box of dyn Error."
            }
          ]
        },
        {
          "title": "impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a>",
          "methods": [
            {
              "code": "fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a Cow into a box of dyn Error + Send + Sync."
            }
          ]
        },
        {
          "title": "impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a>",
          "methods": [
            {
              "code": "fn from(err: E) -> Box<dyn Error + 'a>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a type of Error into a box of dyn Error."
            }
          ]
        },
        {
          "title": "impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a>",
          "methods": [
            {
              "code": "fn from(err: E) -> Box<dyn Error + Send + Sync + 'a>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a type of Error + Send + Sync into a box of dyn Error + Send + Sync."
            }
          ]
        },
        {
          "title": "impl From<OsString> for Box<OsStr>",
          "methods": [
            {
              "code": "fn from(s: OsString) -> Box<OsStr>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts an OsString into a Box<OsStr> without copying or allocating."
            }
          ]
        },
        {
          "title": "impl From<PathBuf> for Box<Path>",
          "methods": [
            {
              "code": "fn from(p: PathBuf) -> Box<Path>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a PathBuf into a Box<Path>"
            }
          ]
        },
        {
          "title": "impl From<String> for Box<str, Global>",
          "methods": [
            {
              "code": "pub fn from(s: String) -> Box<str, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts the given String to a boxed str slice that is owned."
            }
          ]
        },
        {
          "title": "impl From<String> for Box<dyn Error + Send + Sync>",
          "methods": [
            {
              "code": "fn from(err: String) -> Box<dyn Error + Send + Sync>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a String into a box of dyn Error + Send + Sync."
            }
          ]
        },
        {
          "title": "impl From<String> for Box<dyn Error>",
          "methods": [
            {
              "code": "fn from(str_err: String) -> Box<dyn Error>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a String into a box of dyn Error."
            }
          ]
        },
        {
          "title": "impl<T> From<T> for Box<T, Global>",
          "methods": [
            {
              "code": "pub fn from(t: T) -> Box<T, Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Converts a T into a Box<T>"
            }
          ]
        },
        {
          "title": "impl<T, A> From<Vec<T, A>> for Box<[T], A> where A: Allocator,",
          "methods": [
            {
              "code": "pub fn from(v: Vec<T, A>) -> Box<[T], A>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W>",
              "text": "Convert a vector into a boxed slice."
            }
          ]
        },
        {
          "title": "impl FromIterator<Box<str, Global>> for String",
          "methods": [
            {
              "code": "pub fn from_iter<I>(iter: I) -> String where I: IntoIterator<Item = Box<str, Global>>,",
              "text": "Creates a value from an iterator."
            }
          ]
        },
        {
          "title": "impl<I> FromIterator<I> for Box<[I], Global>",
          "methods": [
            {
              "code": "pub fn from_iter<T>(iter: T) -> Box<[I], Global>ⓘNotable traits for Box<F, A>impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static, type Output = <F as Future>::Output;impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator, type Item = <I as Iterator>::Item;impl<R: Read + ?Sized> Read for Box<R>impl<W: Write + ?Sized> Write for Box<W> where T: IntoIterator<Item = I>,",
              "text": "Creates a value from an iterator."
            }
          ]
        },
        {
          "title": "impl<F, A> Future for Box<F, A> where F: Future + Unpin + ?Sized, A: Allocator + 'static,",
          "methods": [
            {
              "code": "type Output = <F as Future>::Output",
              "text": "The type of value produced on completion."
            },
            {
              "code": "pub fn poll( self: Pin<&mut Box<F, A>>, cx: &mut Context<'_>) -> Poll<<Box<F, A> as Future>::Output>",
              "text": "Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available."
            }
          ]
        },
        {
          "title": "impl<G, R, A> Generator<R> for Box<G, A> where G: Generator<R> + Unpin + ?Sized, A: Allocator + 'static,",
          "methods": [
            {
              "code": "type Yield = <G as Generator<R>>::Yield",
              "text": "The type of value this generator yields."
            },
            {
              "code": "type Return = <G as Generator<R>>::Return",
              "text": "The type of value this generator returns."
            },
            {
              "code": "pub fn resume( self: Pin<&mut Box<G, A>>, arg: R) -> GeneratorState<<Box<G, A> as Generator<R>>::Yield, <Box<G, A> as Generator<R>>::Return>",
              "text": "Resumes the execution of this generator."
            }
          ]
        },
        {
          "title": "impl<T, A> Hash for Box<T, A> where T: Hash + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn hash<H>(&self, state: &mut H) where H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<T, A> Hasher for Box<T, A> where T: Hasher + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn finish(&self) -> u64",
              "text": "Returns the hash value for the values written so far."
            },
            {
              "code": "pub fn write(&mut self, bytes: &[u8])",
              "text": "Writes some data into this Hasher."
            },
            {
              "code": "pub fn write_u8(&mut self, i: u8)",
              "text": "Writes a single u8 into this hasher."
            },
            {
              "code": "pub fn write_u16(&mut self, i: u16)",
              "text": "Writes a single u16 into this hasher."
            },
            {
              "code": "pub fn write_u32(&mut self, i: u32)",
              "text": "Writes a single u32 into this hasher."
            },
            {
              "code": "pub fn write_u64(&mut self, i: u64)",
              "text": "Writes a single u64 into this hasher."
            },
            {
              "code": "pub fn write_u128(&mut self, i: u128)",
              "text": "Writes a single u128 into this hasher."
            },
            {
              "code": "pub fn write_usize(&mut self, i: usize)",
              "text": "Writes a single usize into this hasher."
            },
            {
              "code": "pub fn write_i8(&mut self, i: i8)",
              "text": "Writes a single i8 into this hasher."
            },
            {
              "code": "pub fn write_i16(&mut self, i: i16)",
              "text": "Writes a single i16 into this hasher."
            },
            {
              "code": "pub fn write_i32(&mut self, i: i32)",
              "text": "Writes a single i32 into this hasher."
            },
            {
              "code": "pub fn write_i64(&mut self, i: i64)",
              "text": "Writes a single i64 into this hasher."
            },
            {
              "code": "pub fn write_i128(&mut self, i: i128)",
              "text": "Writes a single i128 into this hasher."
            },
            {
              "code": "pub fn write_isize(&mut self, i: isize)",
              "text": "Writes a single isize into this hasher."
            }
          ]
        },
        {
          "title": "impl<I, A> Iterator for Box<I, A> where I: Iterator + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "type Item = <I as Iterator>::Item",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "pub fn next(&mut self) -> Option<<I as Iterator>::Item>",
              "text": "Advances the iterator and returns the next value."
            },
            {
              "code": "pub fn size_hint(&self) -> (usize, Option<usize>)",
              "text": "Returns the bounds on the remaining length of the iterator."
            },
            {
              "code": "pub fn nth(&mut self, n: usize) -> Option<<I as Iterator>::Item>",
              "text": "Returns the nth element of the iterator."
            },
            {
              "code": "pub fn last(self) -> Option<<I as Iterator>::Item>",
              "text": "Consumes the iterator, returning the last element."
            },
            {
              "code": "fn count(self) -> usize",
              "text": "Consumes the iterator, counting the number of iterations and returning it."
            },
            {
              "code": "fn advance_by(&mut self, n: usize) -> Result<(), usize>",
              "text": "Advances the iterator by n elements."
            },
            {
              "code": "fn step_by(self, step: usize) -> StepBy<Self>ⓘNotable traits for StepBy<I>impl<I> Iterator for StepBy<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator starting at the same point, but stepping by the given amount at each iteration."
            },
            {
              "code": "fn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter>ⓘNotable traits for Chain<A, B>impl<A, B> Iterator for Chain<A, B> where A: Iterator, B: Iterator<Item = <A as Iterator>::Item>, type Item = <A as Iterator>::Item; where U: IntoIterator<Item = Self::Item>,",
              "text": "Takes two iterators and creates a new iterator over both in sequence."
            },
            {
              "code": "fn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter>ⓘNotable traits for Zip<A, B>impl<A, B> Iterator for Zip<A, B> where A: Iterator, B: Iterator, type Item = (<A as Iterator>::Item, <B as Iterator>::Item); where U: IntoIterator,",
              "text": "‘Zips up’ two iterators into a single iterator of pairs."
            },
            {
              "code": "fn intersperse(self, separator: Self::Item) -> Intersperse<Self>ⓘNotable traits for Intersperse<I>impl<I> Iterator for Intersperse<I> where I: Iterator, <I as Iterator>::Item: Clone, type Item = <I as Iterator>::Item; where Self::Item: Clone,",
              "text": "Creates a new iterator which places a copy of separator between adjacent items of the original iterator."
            },
            {
              "code": "fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>ⓘNotable traits for IntersperseWith<I, G>impl<I, G> Iterator for IntersperseWith<I, G> where I: Iterator, G: FnMut() -> <I as Iterator>::Item, type Item = <I as Iterator>::Item; where G: FnMut() -> Self::Item,",
              "text": "Creates a new iterator which places an item generated by separator between adjacent items of the original iterator."
            },
            {
              "code": "fn map<B, F>(self, f: F) -> Map<Self, F>ⓘNotable traits for Map<I, F>impl<B, I, F> Iterator for Map<I, F> where I: Iterator, F: FnMut(<I as Iterator>::Item) -> B, type Item = B; where F: FnMut(Self::Item) -> B,",
              "text": "Takes a closure and creates an iterator which calls that closure on each element."
            },
            {
              "code": "fn for_each<F>(self, f: F) where F: FnMut(Self::Item),",
              "text": "Calls a closure on each element of an iterator."
            },
            {
              "code": "fn filter<P>(self, predicate: P) -> Filter<Self, P>ⓘNotable traits for Filter<I, P>impl<I, P> Iterator for Filter<I, P> where I: Iterator, P: FnMut(&<I as Iterator>::Item) -> bool, type Item = <I as Iterator>::Item; where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator which uses a closure to determine if an element should be yielded."
            },
            {
              "code": "fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>ⓘNotable traits for FilterMap<I, F>impl<B, I, F> Iterator for FilterMap<I, F> where I: Iterator, F: FnMut(<I as Iterator>::Item) -> Option<B>, type Item = B; where F: FnMut(Self::Item) -> Option<B>,",
              "text": "Creates an iterator that both filters and maps."
            },
            {
              "code": "fn enumerate(self) -> Enumerate<Self>ⓘNotable traits for Enumerate<I>impl<I> Iterator for Enumerate<I> where I: Iterator, type Item = (usize, <I as Iterator>::Item);",
              "text": "Creates an iterator which gives the current iteration count as well as the next value."
            },
            {
              "code": "fn peekable(self) -> Peekable<Self>ⓘNotable traits for Peekable<I>impl<I> Iterator for Peekable<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information."
            },
            {
              "code": "fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>ⓘNotable traits for SkipWhile<I, P>impl<I, P> Iterator for SkipWhile<I, P> where I: Iterator, P: FnMut(&<I as Iterator>::Item) -> bool, type Item = <I as Iterator>::Item; where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator that skips elements based on a predicate."
            },
            {
              "code": "fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>ⓘNotable traits for TakeWhile<I, P>impl<I, P> Iterator for TakeWhile<I, P> where I: Iterator, P: FnMut(&<I as Iterator>::Item) -> bool, type Item = <I as Iterator>::Item; where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator that yields elements based on a predicate."
            },
            {
              "code": "fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>ⓘNotable traits for MapWhile<I, P>impl<B, I, P> Iterator for MapWhile<I, P> where I: Iterator, P: FnMut(<I as Iterator>::Item) -> Option<B>, type Item = B; where P: FnMut(Self::Item) -> Option<B>,",
              "text": "Creates an iterator that both yields elements based on a predicate and maps."
            },
            {
              "code": "fn skip(self, n: usize) -> Skip<Self>ⓘNotable traits for Skip<I>impl<I> Iterator for Skip<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator that skips the first n elements."
            },
            {
              "code": "fn take(self, n: usize) -> Take<Self>ⓘNotable traits for Take<I>impl<I> Iterator for Take<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner."
            },
            {
              "code": "fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>ⓘNotable traits for Scan<I, St, F>impl<B, I, St, F> Iterator for Scan<I, St, F> where I: Iterator, F: FnMut(&mut St, <I as Iterator>::Item) -> Option<B>, type Item = B; where F: FnMut(&mut St, Self::Item) -> Option<B>,",
              "text": "An iterator adapter similar to fold that holds internal state and produces a new iterator."
            },
            {
              "code": "fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>ⓘNotable traits for FlatMap<I, U, F>impl<I, U, F> Iterator for FlatMap<I, U, F> where I: Iterator, U: IntoIterator, F: FnMut(<I as Iterator>::Item) -> U, type Item = <U as IntoIterator>::Item; where U: IntoIterator, F: FnMut(Self::Item) -> U,",
              "text": "Creates an iterator that works like map, but flattens nested structure."
            },
            {
              "code": "fn flatten(self) -> Flatten<Self>ⓘNotable traits for Flatten<I>impl<I, U> Iterator for Flatten<I> where I: Iterator, U: Iterator, <I as Iterator>::Item: IntoIterator, <<I as Iterator>::Item as IntoIterator>::IntoIter == U, <<I as Iterator>::Item as IntoIterator>::Item == <U as Iterator>::Item, type Item = <U as Iterator>::Item; where Self::Item: IntoIterator,",
              "text": "Creates an iterator that flattens nested structure."
            },
            {
              "code": "fn fuse(self) -> Fuse<Self>ⓘNotable traits for Fuse<I>impl<I> Iterator for Fuse<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator which ends after the first None."
            },
            {
              "code": "fn inspect<F>(self, f: F) -> Inspect<Self, F>ⓘNotable traits for Inspect<I, F>impl<I, F> Iterator for Inspect<I, F> where I: Iterator, F: FnMut(&<I as Iterator>::Item), type Item = <I as Iterator>::Item; where F: FnMut(&Self::Item),",
              "text": "Does something with each element of an iterator, passing the value on."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self",
              "text": "Borrows an iterator, rather than consuming it."
            },
            {
              "code": "fn collect<B>(self) -> B where B: FromIterator<Self::Item>,",
              "text": "Transforms an iterator into a collection."
            },
            {
              "code": "fn partition<B, F>(self, f: F) -> (B, B) where B: Default + Extend<Self::Item>, F: FnMut(&Self::Item) -> bool,",
              "text": "Consumes an iterator, creating two collections from it."
            },
            {
              "code": "fn partition_in_place<'a, T, P>(self, predicate: P) -> usize where T: 'a, Self: DoubleEndedIterator<Item = &'a mut T>, P: FnMut(&T) -> bool,",
              "text": "Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found."
            },
            {
              "code": "fn is_partitioned<P>(self, predicate: P) -> bool where P: FnMut(Self::Item) -> bool,",
              "text": "Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false."
            },
            {
              "code": "fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where F: FnMut(B, Self::Item) -> R, R: Try<Output = B>,",
              "text": "An iterator method that applies a function as long as it returns successfully, producing a single, final value."
            },
            {
              "code": "fn try_for_each<F, R>(&mut self, f: F) -> R where F: FnMut(Self::Item) -> R, R: Try<Output = ()>,",
              "text": "An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error."
            },
            {
              "code": "fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B,",
              "text": "Folds every element into an accumulator by applying an operation, returning the final result."
            },
            {
              "code": "fn reduce<F>(self, f: F) -> Option<Self::Item> where F: FnMut(Self::Item, Self::Item) -> Self::Item,",
              "text": "Reduces the elements to a single one, by repeatedly applying a reducing operation."
            },
            {
              "code": "fn try_reduce<F, R>( &mut self, f: F) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryType where F: FnMut(Self::Item, Self::Item) -> R, R: Try<Output = Self::Item>, <R as Try>::Residual: Residual<Option<Self::Item>>,",
              "text": "Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately."
            },
            {
              "code": "fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool,",
              "text": "Tests if every element of the iterator matches a predicate."
            },
            {
              "code": "fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool,",
              "text": "Tests if any element of the iterator matches a predicate."
            },
            {
              "code": "fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item) -> bool,",
              "text": "Searches for an element of an iterator that satisfies a predicate."
            },
            {
              "code": "fn find_map<B, F>(&mut self, f: F) -> Option<B> where F: FnMut(Self::Item) -> Option<B>,",
              "text": "Applies function to the elements of iterator and returns the first non-none result."
            },
            {
              "code": "fn try_find<F, R>( &mut self, f: F) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryType where F: FnMut(&Self::Item) -> R, R: Try<Output = bool>, <R as Try>::Residual: Residual<Option<Self::Item>>,",
              "text": "Applies function to the elements of iterator and returns the first true result or the first error."
            },
            {
              "code": "fn position<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item) -> bool,",
              "text": "Searches for an element in an iterator, returning its index."
            },
            {
              "code": "fn rposition<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item) -> bool, Self: ExactSizeIterator + DoubleEndedIterator,",
              "text": "Searches for an element in an iterator from the right, returning its index."
            },
            {
              "code": "fn max(self) -> Option<Self::Item> where Self::Item: Ord,",
              "text": "Returns the maximum element of an iterator."
            },
            {
              "code": "fn min(self) -> Option<Self::Item> where Self::Item: Ord,",
              "text": "Returns the minimum element of an iterator."
            },
            {
              "code": "fn max_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item) -> B,",
              "text": "Returns the element that gives the maximum value from the specified function."
            },
            {
              "code": "fn max_by<F>(self, compare: F) -> Option<Self::Item> where F: FnMut(&Self::Item, &Self::Item) -> Ordering,",
              "text": "Returns the element that gives the maximum value with respect to the specified comparison function."
            },
            {
              "code": "fn min_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item) -> B,",
              "text": "Returns the element that gives the minimum value from the specified function."
            },
            {
              "code": "fn min_by<F>(self, compare: F) -> Option<Self::Item> where F: FnMut(&Self::Item, &Self::Item) -> Ordering,",
              "text": "Returns the element that gives the minimum value with respect to the specified comparison function."
            },
            {
              "code": "fn rev(self) -> Rev<Self>ⓘNotable traits for Rev<I>impl<I> Iterator for Rev<I> where I: DoubleEndedIterator, type Item = <I as Iterator>::Item; where Self: DoubleEndedIterator,",
              "text": "Reverses an iterator’s direction."
            },
            {
              "code": "fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB) where FromA: Default + Extend<A>, FromB: Default + Extend<B>, Self: Iterator<Item = (A, B)>,",
              "text": "Converts an iterator of pairs into a pair of containers."
            },
            {
              "code": "fn copied<'a, T>(self) -> Copied<Self>ⓘNotable traits for Copied<I>impl<'a, I, T> Iterator for Copied<I> where T: 'a + Copy, I: Iterator<Item = &'a T>, type Item = T; where T: 'a + Copy, Self: Iterator<Item = &'a T>,",
              "text": "Creates an iterator which copies all of its elements."
            },
            {
              "code": "fn cloned<'a, T>(self) -> Cloned<Self>ⓘNotable traits for Cloned<I>impl<'a, I, T> Iterator for Cloned<I> where T: 'a + Clone, I: Iterator<Item = &'a T>, type Item = T; where T: 'a + Clone, Self: Iterator<Item = &'a T>,",
              "text": "Creates an iterator which clones all of its elements."
            },
            {
              "code": "fn cycle(self) -> Cycle<Self>ⓘNotable traits for Cycle<I>impl<I> Iterator for Cycle<I> where I: Clone + Iterator, type Item = <I as Iterator>::Item; where Self: Clone,",
              "text": "Repeats an iterator endlessly."
            },
            {
              "code": "fn sum<S>(self) -> S where S: Sum<Self::Item>,",
              "text": "Sums the elements of an iterator."
            },
            {
              "code": "fn product<P>(self) -> P where P: Product<Self::Item>,",
              "text": "Iterates over the entire iterator, multiplying all the elements"
            },
            {
              "code": "fn cmp<I>(self, other: I) -> Ordering where I: IntoIterator<Item = Self::Item>, Self::Item: Ord,",
              "text": "Lexicographically compares the elements of this Iterator with those of another."
            },
            {
              "code": "fn cmp_by<I, F>(self, other: I, cmp: F) -> Ordering where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,",
              "text": "Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function."
            },
            {
              "code": "fn partial_cmp<I>(self, other: I) -> Option<Ordering> where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Lexicographically compares the elements of this Iterator with those of another."
            },
            {
              "code": "fn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering> where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,",
              "text": "Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function."
            },
            {
              "code": "fn eq<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are equal to those of another."
            },
            {
              "code": "fn eq_by<I, F>(self, other: I, eq: F) -> bool where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,",
              "text": "Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function."
            },
            {
              "code": "fn ne<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are unequal to those of another."
            },
            {
              "code": "fn lt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically less than those of another."
            },
            {
              "code": "fn le<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically less or equal to those of another."
            },
            {
              "code": "fn gt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically greater than those of another."
            },
            {
              "code": "fn ge<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically greater than or equal to those of another."
            },
            {
              "code": "fn is_sorted(self) -> bool where Self::Item: PartialOrd<Self::Item>,",
              "text": "Checks if the elements of this iterator are sorted."
            },
            {
              "code": "fn is_sorted_by<F>(self, compare: F) -> bool where F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,",
              "text": "Checks if the elements of this iterator are sorted using the given comparator function."
            },
            {
              "code": "fn is_sorted_by_key<F, K>(self, f: F) -> bool where F: FnMut(Self::Item) -> K, K: PartialOrd<K>,",
              "text": "Checks if the elements of this iterator are sorted using the given key extraction function."
            }
          ]
        },
        {
          "title": "impl<T, A> Ord for Box<T, A> where T: Ord + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn cmp(&self, other: &Box<T, A>) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl<T, A> PartialEq<Box<T, A>> for Box<T, A> where T: PartialEq<T> + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn eq(&self, other: &Box<T, A>) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, other: &Box<T, A>) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<T, A> PartialOrd<Box<T, A>> for Box<T, A> where T: PartialOrd<T> + ?Sized, A: Allocator,",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, other: &Box<T, A>) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "pub fn lt(&self, other: &Box<T, A>) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "pub fn le(&self, other: &Box<T, A>) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "pub fn ge(&self, other: &Box<T, A>) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            },
            {
              "code": "pub fn gt(&self, other: &Box<T, A>) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            }
          ]
        },
        {
          "title": "impl<T, A> Pointer for Box<T, A> where A: Allocator, T: ?Sized,",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<R: Read + ?Sized> Read for Box<R>",
          "methods": [
            {
              "code": "fn read(&mut self, buf: &mut [u8]) -> Result<usize>",
              "text": "Pull some bytes from this source into the specified buffer, returning how many bytes were read."
            },
            {
              "code": "fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()>",
              "text": "Pull some bytes from this source into the specified buffer."
            },
            {
              "code": "fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>",
              "text": "Like read, except that it reads into a slice of buffers."
            },
            {
              "code": "fn is_read_vectored(&self) -> bool",
              "text": "Determines if this Reader has an efficient read_vectored implementation."
            },
            {
              "code": "fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>",
              "text": "Read all bytes until EOF in this source, placing them into buf."
            },
            {
              "code": "fn read_to_string(&mut self, buf: &mut String) -> Result<usize>",
              "text": "Read all bytes until EOF in this source, appending them to buf."
            },
            {
              "code": "fn read_exact(&mut self, buf: &mut [u8]) -> Result<()>",
              "text": "Read the exact number of bytes required to fill buf."
            },
            {
              "code": "fn read_buf_exact(&mut self, buf: &mut ReadBuf<'_>) -> Result<()>",
              "text": "Read the exact number of bytes required to fill buf."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adaptor for this instance of Read."
            },
            {
              "code": "fn bytes(self) -> Bytes<Self>ⓘNotable traits for Bytes<R>impl<R: Read> Iterator for Bytes<R> type Item = Result<u8>; where Self: Sized,",
              "text": "Transforms this Read instance to an Iterator over its bytes."
            },
            {
              "code": "fn chain<R: Read>(self, next: R) -> Chain<Self, R>ⓘNotable traits for Chain<T, U>impl<T: Read, U: Read> Read for Chain<T, U> where Self: Sized,",
              "text": "Creates an adapter which will chain this stream with another."
            },
            {
              "code": "fn take(self, limit: u64) -> Take<Self>ⓘNotable traits for Take<T>impl<T: Read> Read for Take<T> where Self: Sized,",
              "text": "Creates an adapter which will read at most limit bytes from it."
            }
          ]
        },
        {
          "title": "impl<S: Seek + ?Sized> Seek for Box<S>",
          "methods": [
            {
              "code": "fn seek(&mut self, pos: SeekFrom) -> Result<u64>",
              "text": "Seek to an offset, in bytes, in a stream."
            },
            {
              "code": "fn stream_position(&mut self) -> Result<u64>",
              "text": "Returns the current seek position from the start of the stream."
            },
            {
              "code": "fn rewind(&mut self) -> Result<()>",
              "text": "Rewind to the beginning of a stream."
            },
            {
              "code": "fn stream_len(&mut self) -> Result<u64>",
              "text": "Returns the length of this stream (in bytes)."
            }
          ]
        },
        {
          "title": "impl<S> Stream for Box<S, Global> where S: Stream + Unpin + ?Sized,",
          "methods": [
            {
              "code": "type Item = <S as Stream>::Item",
              "text": "The type of items yielded by the stream."
            },
            {
              "code": "pub fn poll_next( self: Pin<&mut Box<S, Global>>, cx: &mut Context<'_>) -> Poll<Option<<Box<S, Global> as Stream>::Item>>",
              "text": "Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning None if the stream is exhausted."
            },
            {
              "code": "pub fn size_hint(&self) -> (usize, Option<usize>)",
              "text": "Returns the bounds on the remaining length of the stream."
            }
          ]
        },
        {
          "title": "impl<T, const N: usize> TryFrom<Box<[T], Global>> for Box<[T; N], Global>",
          "methods": [
            {
              "code": "pub fn try_from( boxed_slice: Box<[T], Global>) -> Result<Box<[T; N], Global>, <Box<[T; N], Global> as TryFrom<Box<[T], Global>>>::Error>",
              "text": "Attempts to convert a Box<[T]> into a Box<[T; N]>."
            },
            {
              "code": "type Error = Box<[T], Global>",
              "text": "The type returned in the event of a conversion error."
            }
          ]
        },
        {
          "title": "impl<W: Write + ?Sized> Write for Box<W>",
          "methods": [
            {
              "code": "fn write(&mut self, buf: &[u8]) -> Result<usize>",
              "text": "Write a buffer into this writer, returning how many bytes were written."
            },
            {
              "code": "fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>",
              "text": "Like write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this Writer has an efficient write_vectored implementation."
            },
            {
              "code": "fn flush(&mut self) -> Result<()>",
              "text": "Flush this output stream, ensuring that all intermediately buffered contents reach their destination."
            },
            {
              "code": "fn write_all(&mut self, buf: &[u8]) -> Result<()>",
              "text": "Attempts to write an entire buffer into this writer."
            },
            {
              "code": "fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>",
              "text": "Writes a formatted string into this writer, returning any error encountered."
            },
            {
              "code": "fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>",
              "text": "Attempts to write multiple buffers into this writer."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adapter for this instance of Write."
            }
          ]
        }
      ]
    }
  ]
}