{
  "title": "Struct std::sync::atomic::AtomicPtr",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub const fn new(p: *mut T) -> AtomicPtr<T>",
          "text": "Creates a new AtomicPtr."
        },
        {
          "code": "pub fn get_mut(&mut self) -> &mut *mut T",
          "text": "Returns a mutable reference to the underlying pointer."
        },
        {
          "code": "pub fn from_mut(v: &mut *mut T) -> &AtomicPtr<T>",
          "text": "Get atomic access to a pointer."
        },
        {
          "code": "pub fn into_inner(self) -> *mut T",
          "text": "Consumes the atomic and returns the contained value."
        },
        {
          "code": "pub fn load(&self, order: Ordering) -> *mut T",
          "text": "Loads a value from the pointer."
        },
        {
          "code": "pub fn store(&self, ptr: *mut T, order: Ordering)",
          "text": "Stores a value into the pointer."
        },
        {
          "code": "pub fn swap(&self, ptr: *mut T, order: Ordering) -> *mut T",
          "text": "Stores a value into the pointer, returning the previous value."
        },
        {
          "code": "pub fn compare_exchange( &self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>",
          "text": "Stores a value into the pointer if the current value is the same as the current value."
        },
        {
          "code": "pub fn compare_exchange_weak( &self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>",
          "text": "Stores a value into the pointer if the current value is the same as the current value."
        },
        {
          "code": "pub fn fetch_update<F>( &self, set_order: Ordering, fetch_order: Ordering, f: F) -> Result<*mut T, *mut T> where F: FnMut(*mut T) -> Option<*mut T>,",
          "text": "Fetches the value, and applies a function to it that returns an optional new value. Returns a Result of Ok(previous_value) if the function returned Some(_), else Err(previous_value)."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<T> Debug for AtomicPtr<T>",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Default for AtomicPtr<T>",
          "methods": [
            {
              "code": "pub fn default() -> AtomicPtr<T>",
              "text": "Creates a null AtomicPtr<T>."
            }
          ]
        },
        {
          "title": "impl<T> From<*mut T> for AtomicPtr<T>",
          "methods": [
            {
              "code": "pub fn from(p: *mut T) -> AtomicPtr<T>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<T> Pointer for AtomicPtr<T>",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        }
      ]
    }
  ]
}