{
  "title": "Struct std::fs::ReadDir",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Debug for ReadDir",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Iterator for ReadDir",
          "methods": [
            {
              "code": "type Item = Result<DirEntry>",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "fn next(&mut self) -> Option<Result<DirEntry>>",
              "text": "Advances the iterator and returns the next value."
            },
            {
              "code": "fn size_hint(&self) -> (usize, Option<usize>)",
              "text": "Returns the bounds on the remaining length of the iterator."
            },
            {
              "code": "fn count(self) -> usize",
              "text": "Consumes the iterator, counting the number of iterations and returning it."
            },
            {
              "code": "fn last(self) -> Option<Self::Item>",
              "text": "Consumes the iterator, returning the last element."
            },
            {
              "code": "fn advance_by(&mut self, n: usize) -> Result<(), usize>",
              "text": "Advances the iterator by n elements."
            },
            {
              "code": "fn nth(&mut self, n: usize) -> Option<Self::Item>",
              "text": "Returns the nth element of the iterator."
            },
            {
              "code": "fn step_by(self, step: usize) -> StepBy<Self>ⓘNotable traits for StepBy<I>impl<I> Iterator for StepBy<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator starting at the same point, but stepping by the given amount at each iteration."
            },
            {
              "code": "fn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter>ⓘNotable traits for Chain<A, B>impl<A, B> Iterator for Chain<A, B> where A: Iterator, B: Iterator<Item = <A as Iterator>::Item>, type Item = <A as Iterator>::Item; where U: IntoIterator<Item = Self::Item>,",
              "text": "Takes two iterators and creates a new iterator over both in sequence."
            },
            {
              "code": "fn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter>ⓘNotable traits for Zip<A, B>impl<A, B> Iterator for Zip<A, B> where A: Iterator, B: Iterator, type Item = (<A as Iterator>::Item, <B as Iterator>::Item); where U: IntoIterator,",
              "text": "‘Zips up’ two iterators into a single iterator of pairs."
            },
            {
              "code": "fn intersperse(self, separator: Self::Item) -> Intersperse<Self>ⓘNotable traits for Intersperse<I>impl<I> Iterator for Intersperse<I> where I: Iterator, <I as Iterator>::Item: Clone, type Item = <I as Iterator>::Item; where Self::Item: Clone,",
              "text": "Creates a new iterator which places a copy of separator between adjacent items of the original iterator."
            },
            {
              "code": "fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G>ⓘNotable traits for IntersperseWith<I, G>impl<I, G> Iterator for IntersperseWith<I, G> where I: Iterator, G: FnMut() -> <I as Iterator>::Item, type Item = <I as Iterator>::Item; where G: FnMut() -> Self::Item,",
              "text": "Creates a new iterator which places an item generated by separator between adjacent items of the original iterator."
            },
            {
              "code": "fn map<B, F>(self, f: F) -> Map<Self, F>ⓘNotable traits for Map<I, F>impl<B, I, F> Iterator for Map<I, F> where I: Iterator, F: FnMut(<I as Iterator>::Item) -> B, type Item = B; where F: FnMut(Self::Item) -> B,",
              "text": "Takes a closure and creates an iterator which calls that closure on each element."
            },
            {
              "code": "fn for_each<F>(self, f: F) where F: FnMut(Self::Item),",
              "text": "Calls a closure on each element of an iterator."
            },
            {
              "code": "fn filter<P>(self, predicate: P) -> Filter<Self, P>ⓘNotable traits for Filter<I, P>impl<I, P> Iterator for Filter<I, P> where I: Iterator, P: FnMut(&<I as Iterator>::Item) -> bool, type Item = <I as Iterator>::Item; where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator which uses a closure to determine if an element should be yielded."
            },
            {
              "code": "fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>ⓘNotable traits for FilterMap<I, F>impl<B, I, F> Iterator for FilterMap<I, F> where I: Iterator, F: FnMut(<I as Iterator>::Item) -> Option<B>, type Item = B; where F: FnMut(Self::Item) -> Option<B>,",
              "text": "Creates an iterator that both filters and maps."
            },
            {
              "code": "fn enumerate(self) -> Enumerate<Self>ⓘNotable traits for Enumerate<I>impl<I> Iterator for Enumerate<I> where I: Iterator, type Item = (usize, <I as Iterator>::Item);",
              "text": "Creates an iterator which gives the current iteration count as well as the next value."
            },
            {
              "code": "fn peekable(self) -> Peekable<Self>ⓘNotable traits for Peekable<I>impl<I> Iterator for Peekable<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information."
            },
            {
              "code": "fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P>ⓘNotable traits for SkipWhile<I, P>impl<I, P> Iterator for SkipWhile<I, P> where I: Iterator, P: FnMut(&<I as Iterator>::Item) -> bool, type Item = <I as Iterator>::Item; where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator that skips elements based on a predicate."
            },
            {
              "code": "fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P>ⓘNotable traits for TakeWhile<I, P>impl<I, P> Iterator for TakeWhile<I, P> where I: Iterator, P: FnMut(&<I as Iterator>::Item) -> bool, type Item = <I as Iterator>::Item; where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator that yields elements based on a predicate."
            },
            {
              "code": "fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>ⓘNotable traits for MapWhile<I, P>impl<B, I, P> Iterator for MapWhile<I, P> where I: Iterator, P: FnMut(<I as Iterator>::Item) -> Option<B>, type Item = B; where P: FnMut(Self::Item) -> Option<B>,",
              "text": "Creates an iterator that both yields elements based on a predicate and maps."
            },
            {
              "code": "fn skip(self, n: usize) -> Skip<Self>ⓘNotable traits for Skip<I>impl<I> Iterator for Skip<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator that skips the first n elements."
            },
            {
              "code": "fn take(self, n: usize) -> Take<Self>ⓘNotable traits for Take<I>impl<I> Iterator for Take<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner."
            },
            {
              "code": "fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>ⓘNotable traits for Scan<I, St, F>impl<B, I, St, F> Iterator for Scan<I, St, F> where I: Iterator, F: FnMut(&mut St, <I as Iterator>::Item) -> Option<B>, type Item = B; where F: FnMut(&mut St, Self::Item) -> Option<B>,",
              "text": "An iterator adapter similar to fold that holds internal state and produces a new iterator."
            },
            {
              "code": "fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>ⓘNotable traits for FlatMap<I, U, F>impl<I, U, F> Iterator for FlatMap<I, U, F> where I: Iterator, U: IntoIterator, F: FnMut(<I as Iterator>::Item) -> U, type Item = <U as IntoIterator>::Item; where U: IntoIterator, F: FnMut(Self::Item) -> U,",
              "text": "Creates an iterator that works like map, but flattens nested structure."
            },
            {
              "code": "fn flatten(self) -> Flatten<Self>ⓘNotable traits for Flatten<I>impl<I, U> Iterator for Flatten<I> where I: Iterator, U: Iterator, <I as Iterator>::Item: IntoIterator, <<I as Iterator>::Item as IntoIterator>::IntoIter == U, <<I as Iterator>::Item as IntoIterator>::Item == <U as Iterator>::Item, type Item = <U as Iterator>::Item; where Self::Item: IntoIterator,",
              "text": "Creates an iterator that flattens nested structure."
            },
            {
              "code": "fn fuse(self) -> Fuse<Self>ⓘNotable traits for Fuse<I>impl<I> Iterator for Fuse<I> where I: Iterator, type Item = <I as Iterator>::Item;",
              "text": "Creates an iterator which ends after the first None."
            },
            {
              "code": "fn inspect<F>(self, f: F) -> Inspect<Self, F>ⓘNotable traits for Inspect<I, F>impl<I, F> Iterator for Inspect<I, F> where I: Iterator, F: FnMut(&<I as Iterator>::Item), type Item = <I as Iterator>::Item; where F: FnMut(&Self::Item),",
              "text": "Does something with each element of an iterator, passing the value on."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self",
              "text": "Borrows an iterator, rather than consuming it."
            },
            {
              "code": "fn collect<B>(self) -> B where B: FromIterator<Self::Item>,",
              "text": "Transforms an iterator into a collection."
            },
            {
              "code": "fn partition<B, F>(self, f: F) -> (B, B) where B: Default + Extend<Self::Item>, F: FnMut(&Self::Item) -> bool,",
              "text": "Consumes an iterator, creating two collections from it."
            },
            {
              "code": "fn partition_in_place<'a, T, P>(self, predicate: P) -> usize where T: 'a, Self: DoubleEndedIterator<Item = &'a mut T>, P: FnMut(&T) -> bool,",
              "text": "Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found."
            },
            {
              "code": "fn is_partitioned<P>(self, predicate: P) -> bool where P: FnMut(Self::Item) -> bool,",
              "text": "Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false."
            },
            {
              "code": "fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where F: FnMut(B, Self::Item) -> R, R: Try<Output = B>,",
              "text": "An iterator method that applies a function as long as it returns successfully, producing a single, final value."
            },
            {
              "code": "fn try_for_each<F, R>(&mut self, f: F) -> R where F: FnMut(Self::Item) -> R, R: Try<Output = ()>,",
              "text": "An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error."
            },
            {
              "code": "fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B,",
              "text": "Folds every element into an accumulator by applying an operation, returning the final result."
            },
            {
              "code": "fn reduce<F>(self, f: F) -> Option<Self::Item> where F: FnMut(Self::Item, Self::Item) -> Self::Item,",
              "text": "Reduces the elements to a single one, by repeatedly applying a reducing operation."
            },
            {
              "code": "fn try_reduce<F, R>( &mut self, f: F) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryType where F: FnMut(Self::Item, Self::Item) -> R, R: Try<Output = Self::Item>, <R as Try>::Residual: Residual<Option<Self::Item>>,",
              "text": "Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately."
            },
            {
              "code": "fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool,",
              "text": "Tests if every element of the iterator matches a predicate."
            },
            {
              "code": "fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool,",
              "text": "Tests if any element of the iterator matches a predicate."
            },
            {
              "code": "fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item) -> bool,",
              "text": "Searches for an element of an iterator that satisfies a predicate."
            },
            {
              "code": "fn find_map<B, F>(&mut self, f: F) -> Option<B> where F: FnMut(Self::Item) -> Option<B>,",
              "text": "Applies function to the elements of iterator and returns the first non-none result."
            },
            {
              "code": "fn try_find<F, R>( &mut self, f: F) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryType where F: FnMut(&Self::Item) -> R, R: Try<Output = bool>, <R as Try>::Residual: Residual<Option<Self::Item>>,",
              "text": "Applies function to the elements of iterator and returns the first true result or the first error."
            },
            {
              "code": "fn position<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item) -> bool,",
              "text": "Searches for an element in an iterator, returning its index."
            },
            {
              "code": "fn rposition<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item) -> bool, Self: ExactSizeIterator + DoubleEndedIterator,",
              "text": "Searches for an element in an iterator from the right, returning its index."
            },
            {
              "code": "fn max(self) -> Option<Self::Item> where Self::Item: Ord,",
              "text": "Returns the maximum element of an iterator."
            },
            {
              "code": "fn min(self) -> Option<Self::Item> where Self::Item: Ord,",
              "text": "Returns the minimum element of an iterator."
            },
            {
              "code": "fn max_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item) -> B,",
              "text": "Returns the element that gives the maximum value from the specified function."
            },
            {
              "code": "fn max_by<F>(self, compare: F) -> Option<Self::Item> where F: FnMut(&Self::Item, &Self::Item) -> Ordering,",
              "text": "Returns the element that gives the maximum value with respect to the specified comparison function."
            },
            {
              "code": "fn min_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item) -> B,",
              "text": "Returns the element that gives the minimum value from the specified function."
            },
            {
              "code": "fn min_by<F>(self, compare: F) -> Option<Self::Item> where F: FnMut(&Self::Item, &Self::Item) -> Ordering,",
              "text": "Returns the element that gives the minimum value with respect to the specified comparison function."
            },
            {
              "code": "fn rev(self) -> Rev<Self>ⓘNotable traits for Rev<I>impl<I> Iterator for Rev<I> where I: DoubleEndedIterator, type Item = <I as Iterator>::Item; where Self: DoubleEndedIterator,",
              "text": "Reverses an iterator’s direction."
            },
            {
              "code": "fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB) where FromA: Default + Extend<A>, FromB: Default + Extend<B>, Self: Iterator<Item = (A, B)>,",
              "text": "Converts an iterator of pairs into a pair of containers."
            },
            {
              "code": "fn copied<'a, T>(self) -> Copied<Self>ⓘNotable traits for Copied<I>impl<'a, I, T> Iterator for Copied<I> where T: 'a + Copy, I: Iterator<Item = &'a T>, type Item = T; where T: 'a + Copy, Self: Iterator<Item = &'a T>,",
              "text": "Creates an iterator which copies all of its elements."
            },
            {
              "code": "fn cloned<'a, T>(self) -> Cloned<Self>ⓘNotable traits for Cloned<I>impl<'a, I, T> Iterator for Cloned<I> where T: 'a + Clone, I: Iterator<Item = &'a T>, type Item = T; where T: 'a + Clone, Self: Iterator<Item = &'a T>,",
              "text": "Creates an iterator which clones all of its elements."
            },
            {
              "code": "fn cycle(self) -> Cycle<Self>ⓘNotable traits for Cycle<I>impl<I> Iterator for Cycle<I> where I: Clone + Iterator, type Item = <I as Iterator>::Item; where Self: Clone,",
              "text": "Repeats an iterator endlessly."
            },
            {
              "code": "fn sum<S>(self) -> S where S: Sum<Self::Item>,",
              "text": "Sums the elements of an iterator."
            },
            {
              "code": "fn product<P>(self) -> P where P: Product<Self::Item>,",
              "text": "Iterates over the entire iterator, multiplying all the elements"
            },
            {
              "code": "fn cmp<I>(self, other: I) -> Ordering where I: IntoIterator<Item = Self::Item>, Self::Item: Ord,",
              "text": "Lexicographically compares the elements of this Iterator with those of another."
            },
            {
              "code": "fn cmp_by<I, F>(self, other: I, cmp: F) -> Ordering where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,",
              "text": "Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function."
            },
            {
              "code": "fn partial_cmp<I>(self, other: I) -> Option<Ordering> where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Lexicographically compares the elements of this Iterator with those of another."
            },
            {
              "code": "fn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering> where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,",
              "text": "Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function."
            },
            {
              "code": "fn eq<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are equal to those of another."
            },
            {
              "code": "fn eq_by<I, F>(self, other: I, eq: F) -> bool where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,",
              "text": "Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function."
            },
            {
              "code": "fn ne<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are unequal to those of another."
            },
            {
              "code": "fn lt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically less than those of another."
            },
            {
              "code": "fn le<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically less or equal to those of another."
            },
            {
              "code": "fn gt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically greater than those of another."
            },
            {
              "code": "fn ge<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically greater than or equal to those of another."
            },
            {
              "code": "fn is_sorted(self) -> bool where Self::Item: PartialOrd<Self::Item>,",
              "text": "Checks if the elements of this iterator are sorted."
            },
            {
              "code": "fn is_sorted_by<F>(self, compare: F) -> bool where F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,",
              "text": "Checks if the elements of this iterator are sorted using the given comparator function."
            },
            {
              "code": "fn is_sorted_by_key<F, K>(self, f: F) -> bool where F: FnMut(Self::Item) -> K, K: PartialOrd<K>,",
              "text": "Checks if the elements of this iterator are sorted using the given key extraction function."
            }
          ]
        }
      ]
    }
  ]
}