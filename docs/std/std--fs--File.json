{
  "title": "Struct std::fs::File",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn open<P: AsRef<Path>>(path: P) -> Result<File>",
          "text": "Attempts to open a file in read-only mode."
        },
        {
          "code": "pub fn create<P: AsRef<Path>>(path: P) -> Result<File>",
          "text": "Opens a file in write-only mode."
        },
        {
          "code": "pub fn options() -> OpenOptions",
          "text": "Returns a new OpenOptions object."
        },
        {
          "code": "pub fn sync_all(&self) -> Result<()>",
          "text": "Attempts to sync all OS-internal metadata to disk."
        },
        {
          "code": "pub fn sync_data(&self) -> Result<()>",
          "text": "This function is similar to sync_all, except that it might not synchronize file metadata to the filesystem."
        },
        {
          "code": "pub fn set_len(&self, size: u64) -> Result<()>",
          "text": "Truncates or extends the underlying file, updating the size of this file to become size."
        },
        {
          "code": "pub fn metadata(&self) -> Result<Metadata>",
          "text": "Queries metadata about the underlying file."
        },
        {
          "code": "pub fn try_clone(&self) -> Result<File>",
          "text": "Creates a new File instance that shares the same underlying file handle as the existing File instance. Reads, writes, and seeks will affect both File instances simultaneously."
        },
        {
          "code": "pub fn set_permissions(&self, perm: Permissions) -> Result<()>",
          "text": "Changes the permissions on the underlying file."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl AsFd for File",
          "methods": []
        },
        {
          "title": "impl AsHandle for File",
          "methods": [
            {
              "code": "fn as_handle(&self) -> BorrowedHandle<'_>",
              "text": "Borrows the handle."
            }
          ]
        },
        {
          "title": "impl AsRawFd for File",
          "methods": []
        },
        {
          "title": "impl AsRawHandle for File",
          "methods": [
            {
              "code": "fn as_raw_handle(&self) -> RawHandle",
              "text": "Extracts the raw handle, without taking any ownership."
            }
          ]
        },
        {
          "title": "impl Debug for File",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl FileExt for File",
          "methods": [
            {
              "code": "fn seek_read(&self, buf: &mut [u8], offset: u64) -> Result<usize>",
              "text": "Seeks to a given position and reads a number of bytes."
            },
            {
              "code": "fn seek_write(&self, buf: &[u8], offset: u64) -> Result<usize>",
              "text": "Seeks to a given position and writes a number of bytes."
            }
          ]
        },
        {
          "title": "impl FileExt for File",
          "methods": [
            {
              "code": "fn read_at(&self, buf: &mut [u8], offset: u64) -> Result<usize>",
              "text": "Reads a number of bytes starting from a given offset."
            },
            {
              "code": "fn write_at(&self, buf: &[u8], offset: u64) -> Result<usize>",
              "text": "Writes a number of bytes starting from a given offset."
            },
            {
              "code": "fn read_exact_at(&self, buf: &mut [u8], offset: u64) -> Result<()>",
              "text": "Reads the exact number of byte required to fill buf from the given offset."
            },
            {
              "code": "fn write_all_at(&self, buf: &[u8], offset: u64) -> Result<()>",
              "text": "Attempts to write an entire buffer starting from a given offset."
            }
          ]
        },
        {
          "title": "impl FileExt for File",
          "methods": [
            {
              "code": "fn read_vectored_at( &self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> Result<usize>",
              "text": "Reads a number of bytes starting from a given offset."
            },
            {
              "code": "fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> Result<usize>",
              "text": "Writes a number of bytes starting from a given offset."
            },
            {
              "code": "fn tell(&self) -> Result<u64>",
              "text": "Returns the current position within the file."
            },
            {
              "code": "fn fdstat_set_flags(&self, flags: u16) -> Result<()>",
              "text": "Adjust the flags associated with this file."
            },
            {
              "code": "fn fdstat_set_rights(&self, rights: u64, inheriting: u64) -> Result<()>",
              "text": "Adjust the rights associated with this file."
            },
            {
              "code": "fn advise(&self, offset: u64, len: u64, advice: u8) -> Result<()>",
              "text": "Provide file advisory information on a file descriptor."
            },
            {
              "code": "fn allocate(&self, offset: u64, len: u64) -> Result<()>",
              "text": "Force the allocation of space in a file."
            },
            {
              "code": "fn create_directory<P: AsRef<Path>>(&self, dir: P) -> Result<()>",
              "text": "Create a directory."
            },
            {
              "code": "fn read_link<P: AsRef<Path>>(&self, path: P) -> Result<PathBuf>",
              "text": "Read the contents of a symbolic link."
            },
            {
              "code": "fn metadata_at<P: AsRef<Path>>( &self, lookup_flags: u32, path: P) -> Result<Metadata>",
              "text": "Return the attributes of a file or directory."
            },
            {
              "code": "fn remove_file<P: AsRef<Path>>(&self, path: P) -> Result<()>",
              "text": "Unlink a file."
            },
            {
              "code": "fn remove_directory<P: AsRef<Path>>(&self, path: P) -> Result<()>",
              "text": "Remove a directory."
            },
            {
              "code": "fn read_at(&self, buf: &mut [u8], offset: u64) -> Result<usize>",
              "text": "Reads a number of bytes starting from a given offset."
            },
            {
              "code": "fn read_exact_at(&self, buf: &mut [u8], offset: u64) -> Result<()>",
              "text": "Reads the exact number of byte required to fill buf from the given offset."
            },
            {
              "code": "fn write_at(&self, buf: &[u8], offset: u64) -> Result<usize>",
              "text": "Writes a number of bytes starting from a given offset."
            },
            {
              "code": "fn write_all_at(&self, buf: &[u8], offset: u64) -> Result<()>",
              "text": "Attempts to write an entire buffer starting from a given offset."
            }
          ]
        },
        {
          "title": "impl From<File> for OwnedHandle",
          "methods": [
            {
              "code": "fn from(file: File) -> OwnedHandle",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<File> for OwnedFd",
          "methods": [
            {
              "code": "fn from(file: File) -> OwnedFd",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<File> for Stdio",
          "methods": [
            {
              "code": "fn from(file: File) -> Stdio",
              "text": "Converts a File into a Stdio"
            }
          ]
        },
        {
          "title": "impl From<OwnedFd> for File",
          "methods": [
            {
              "code": "fn from(owned_fd: OwnedFd) -> Self",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl From<OwnedHandle> for File",
          "methods": [
            {
              "code": "fn from(owned: OwnedHandle) -> Self",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl FromRawFd for File",
          "methods": []
        },
        {
          "title": "impl FromRawHandle for File",
          "methods": [
            {
              "code": "unsafe fn from_raw_handle(handle: RawHandle) -> FileⓘNotable traits for Fileimpl Read for Fileimpl Read for &Fileimpl Write for Fileimpl Write for &File",
              "text": "Constructs a new I/O object from the specified raw handle."
            }
          ]
        },
        {
          "title": "impl IntoRawFd for File",
          "methods": []
        },
        {
          "title": "impl IntoRawHandle for File",
          "methods": [
            {
              "code": "fn into_raw_handle(self) -> RawHandle",
              "text": "Consumes this object, returning the raw underlying handle."
            }
          ]
        },
        {
          "title": "impl Read for File",
          "methods": [
            {
              "code": "fn read(&mut self, buf: &mut [u8]) -> Result<usize>",
              "text": "Pull some bytes from this source into the specified buffer, returning how many bytes were read."
            },
            {
              "code": "fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>",
              "text": "Like read, except that it reads into a slice of buffers."
            },
            {
              "code": "fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()>",
              "text": "Pull some bytes from this source into the specified buffer."
            },
            {
              "code": "fn is_read_vectored(&self) -> bool",
              "text": "Determines if this Reader has an efficient read_vectored implementation."
            },
            {
              "code": "fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>",
              "text": "Read all bytes until EOF in this source, placing them into buf."
            },
            {
              "code": "fn read_to_string(&mut self, buf: &mut String) -> Result<usize>",
              "text": "Read all bytes until EOF in this source, appending them to buf."
            },
            {
              "code": "fn read_exact(&mut self, buf: &mut [u8]) -> Result<()>",
              "text": "Read the exact number of bytes required to fill buf."
            },
            {
              "code": "fn read_buf_exact(&mut self, buf: &mut ReadBuf<'_>) -> Result<()>",
              "text": "Read the exact number of bytes required to fill buf."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adaptor for this instance of Read."
            },
            {
              "code": "fn bytes(self) -> Bytes<Self>ⓘNotable traits for Bytes<R>impl<R: Read> Iterator for Bytes<R> type Item = Result<u8>; where Self: Sized,",
              "text": "Transforms this Read instance to an Iterator over its bytes."
            },
            {
              "code": "fn chain<R: Read>(self, next: R) -> Chain<Self, R>ⓘNotable traits for Chain<T, U>impl<T: Read, U: Read> Read for Chain<T, U> where Self: Sized,",
              "text": "Creates an adapter which will chain this stream with another."
            },
            {
              "code": "fn take(self, limit: u64) -> Take<Self>ⓘNotable traits for Take<T>impl<T: Read> Read for Take<T> where Self: Sized,",
              "text": "Creates an adapter which will read at most limit bytes from it."
            }
          ]
        },
        {
          "title": "impl Read for &File",
          "methods": [
            {
              "code": "fn read(&mut self, buf: &mut [u8]) -> Result<usize>",
              "text": "Pull some bytes from this source into the specified buffer, returning how many bytes were read."
            },
            {
              "code": "fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()>",
              "text": "Pull some bytes from this source into the specified buffer."
            },
            {
              "code": "fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>",
              "text": "Like read, except that it reads into a slice of buffers."
            },
            {
              "code": "fn is_read_vectored(&self) -> bool",
              "text": "Determines if this Reader has an efficient read_vectored implementation."
            },
            {
              "code": "fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize>",
              "text": "Read all bytes until EOF in this source, placing them into buf."
            },
            {
              "code": "fn read_to_string(&mut self, buf: &mut String) -> Result<usize>",
              "text": "Read all bytes until EOF in this source, appending them to buf."
            },
            {
              "code": "fn read_exact(&mut self, buf: &mut [u8]) -> Result<()>",
              "text": "Read the exact number of bytes required to fill buf."
            },
            {
              "code": "fn read_buf_exact(&mut self, buf: &mut ReadBuf<'_>) -> Result<()>",
              "text": "Read the exact number of bytes required to fill buf."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adaptor for this instance of Read."
            },
            {
              "code": "fn bytes(self) -> Bytes<Self>ⓘNotable traits for Bytes<R>impl<R: Read> Iterator for Bytes<R> type Item = Result<u8>; where Self: Sized,",
              "text": "Transforms this Read instance to an Iterator over its bytes."
            },
            {
              "code": "fn chain<R: Read>(self, next: R) -> Chain<Self, R>ⓘNotable traits for Chain<T, U>impl<T: Read, U: Read> Read for Chain<T, U> where Self: Sized,",
              "text": "Creates an adapter which will chain this stream with another."
            },
            {
              "code": "fn take(self, limit: u64) -> Take<Self>ⓘNotable traits for Take<T>impl<T: Read> Read for Take<T> where Self: Sized,",
              "text": "Creates an adapter which will read at most limit bytes from it."
            }
          ]
        },
        {
          "title": "impl Seek for File",
          "methods": [
            {
              "code": "fn seek(&mut self, pos: SeekFrom) -> Result<u64>",
              "text": "Seek to an offset, in bytes, in a stream."
            },
            {
              "code": "fn rewind(&mut self) -> Result<()>",
              "text": "Rewind to the beginning of a stream."
            },
            {
              "code": "fn stream_len(&mut self) -> Result<u64>",
              "text": "Returns the length of this stream (in bytes)."
            },
            {
              "code": "fn stream_position(&mut self) -> Result<u64>",
              "text": "Returns the current seek position from the start of the stream."
            }
          ]
        },
        {
          "title": "impl Seek for &File",
          "methods": [
            {
              "code": "fn seek(&mut self, pos: SeekFrom) -> Result<u64>",
              "text": "Seek to an offset, in bytes, in a stream."
            },
            {
              "code": "fn rewind(&mut self) -> Result<()>",
              "text": "Rewind to the beginning of a stream."
            },
            {
              "code": "fn stream_len(&mut self) -> Result<u64>",
              "text": "Returns the length of this stream (in bytes)."
            },
            {
              "code": "fn stream_position(&mut self) -> Result<u64>",
              "text": "Returns the current seek position from the start of the stream."
            }
          ]
        },
        {
          "title": "impl Write for File",
          "methods": [
            {
              "code": "fn write(&mut self, buf: &[u8]) -> Result<usize>",
              "text": "Write a buffer into this writer, returning how many bytes were written."
            },
            {
              "code": "fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>",
              "text": "Like write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this Writer has an efficient write_vectored implementation."
            },
            {
              "code": "fn flush(&mut self) -> Result<()>",
              "text": "Flush this output stream, ensuring that all intermediately buffered contents reach their destination."
            },
            {
              "code": "fn write_all(&mut self, buf: &[u8]) -> Result<()>",
              "text": "Attempts to write an entire buffer into this writer."
            },
            {
              "code": "fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>",
              "text": "Attempts to write multiple buffers into this writer."
            },
            {
              "code": "fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>",
              "text": "Writes a formatted string into this writer, returning any error encountered."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adapter for this instance of Write."
            }
          ]
        },
        {
          "title": "impl Write for &File",
          "methods": [
            {
              "code": "fn write(&mut self, buf: &[u8]) -> Result<usize>",
              "text": "Write a buffer into this writer, returning how many bytes were written."
            },
            {
              "code": "fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>",
              "text": "Like write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this Writer has an efficient write_vectored implementation."
            },
            {
              "code": "fn flush(&mut self) -> Result<()>",
              "text": "Flush this output stream, ensuring that all intermediately buffered contents reach their destination."
            },
            {
              "code": "fn write_all(&mut self, buf: &[u8]) -> Result<()>",
              "text": "Attempts to write an entire buffer into this writer."
            },
            {
              "code": "fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>",
              "text": "Attempts to write multiple buffers into this writer."
            },
            {
              "code": "fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>",
              "text": "Writes a formatted string into this writer, returning any error encountered."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adapter for this instance of Write."
            }
          ]
        }
      ]
    }
  ]
}