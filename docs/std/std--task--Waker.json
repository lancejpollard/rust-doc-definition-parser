{
  "title": "Struct std::task::Waker",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn wake(self)",
          "text": "Wake up the task associated with this Waker."
        },
        {
          "code": "pub fn wake_by_ref(&self)",
          "text": "Wake up the task associated with this Waker without consuming the Waker."
        },
        {
          "code": "pub fn will_wake(&self, other: &Waker) -> bool",
          "text": "Returns true if this Waker and another Waker have awoken the same task."
        },
        {
          "code": "pub unsafe fn from_raw(waker: RawWaker) -> Waker",
          "text": "Creates a new Waker from RawWaker."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for Waker",
          "methods": [
            {
              "code": "pub fn clone(&self) -> Waker",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for Waker",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Drop for Waker",
          "methods": [
            {
              "code": "pub fn drop(&mut self)",
              "text": "Executes the destructor for this type."
            }
          ]
        },
        {
          "title": "impl<W> From<Arc<W>> for Waker where W: 'static + Wake + Send + Sync,",
          "methods": [
            {
              "code": "pub fn from(waker: Arc<W>) -> Waker",
              "text": "Use a Wake-able type as a Waker."
            }
          ]
        }
      ]
    }
  ]
}