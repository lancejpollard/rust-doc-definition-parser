{
  "title": "Struct std::sync::atomic::AtomicI8",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub const fn new(v: i8) -> AtomicI8",
          "text": "Creates a new atomic integer."
        },
        {
          "code": "pub fn get_mut(&mut self) -> &mut i8",
          "text": "Returns a mutable reference to the underlying integer."
        },
        {
          "code": "pub fn from_mut(v: &mut i8) -> &AtomicI8",
          "text": "Get atomic access to a &mut i8."
        },
        {
          "code": "pub fn into_inner(self) -> i8",
          "text": "Consumes the atomic and returns the contained value."
        },
        {
          "code": "pub fn load(&self, order: Ordering) -> i8",
          "text": "Loads a value from the atomic integer."
        },
        {
          "code": "pub fn store(&self, val: i8, order: Ordering)",
          "text": "Stores a value into the atomic integer."
        },
        {
          "code": "pub fn swap(&self, val: i8, order: Ordering) -> i8",
          "text": "Stores a value into the atomic integer, returning the previous value."
        },
        {
          "code": "pub fn compare_exchange( &self, current: i8, new: i8, success: Ordering, failure: Ordering) -> Result<i8, i8>",
          "text": "Stores a value into the atomic integer if the current value is the same as the current value."
        },
        {
          "code": "pub fn compare_exchange_weak( &self, current: i8, new: i8, success: Ordering, failure: Ordering) -> Result<i8, i8>",
          "text": "Stores a value into the atomic integer if the current value is the same as the current value."
        },
        {
          "code": "pub fn fetch_add(&self, val: i8, order: Ordering) -> i8",
          "text": "Adds to the current value, returning the previous value."
        },
        {
          "code": "pub fn fetch_sub(&self, val: i8, order: Ordering) -> i8",
          "text": "Subtracts from the current value, returning the previous value."
        },
        {
          "code": "pub fn fetch_and(&self, val: i8, order: Ordering) -> i8",
          "text": "Bitwise “and” with the current value."
        },
        {
          "code": "pub fn fetch_nand(&self, val: i8, order: Ordering) -> i8",
          "text": "Bitwise “nand” with the current value."
        },
        {
          "code": "pub fn fetch_or(&self, val: i8, order: Ordering) -> i8",
          "text": "Bitwise “or” with the current value."
        },
        {
          "code": "pub fn fetch_xor(&self, val: i8, order: Ordering) -> i8",
          "text": "Bitwise “xor” with the current value."
        },
        {
          "code": "pub fn fetch_update<F>( &self, set_order: Ordering, fetch_order: Ordering, f: F) -> Result<i8, i8> where F: FnMut(i8) -> Option<i8>,",
          "text": "Fetches the value, and applies a function to it that returns an optional new value. Returns a Result of Ok(previous_value) if the function returned Some(_), else Err(previous_value)."
        },
        {
          "code": "pub fn fetch_max(&self, val: i8, order: Ordering) -> i8",
          "text": "Maximum with the current value."
        },
        {
          "code": "pub fn fetch_min(&self, val: i8, order: Ordering) -> i8",
          "text": "Minimum with the current value."
        },
        {
          "code": "pub fn as_mut_ptr(&self) -> *mut i8",
          "text": "Returns a mutable pointer to the underlying integer."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Debug for AtomicI8",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for AtomicI8",
          "methods": [
            {
              "code": "pub fn default() -> AtomicI8",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl From<i8> for AtomicI8",
          "methods": [
            {
              "code": "pub fn from(v: i8) -> AtomicI8",
              "text": "Converts an i8 into an AtomicI8."
            }
          ]
        }
      ]
    }
  ]
}