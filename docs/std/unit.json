{
  "title": "Primitive Type unit",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Debug for ()",
          "methods": [
            {
              "code": "pub fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for ()",
          "methods": [
            {
              "code": "pub fn default()",
              "text": "Returns the default value of ()"
            }
          ]
        },
        {
          "title": "impl Extend<()> for ()",
          "methods": [
            {
              "code": "pub fn extend<T>(&mut self, iter: T) where T: IntoIterator<Item = ()>,",
              "text": "Extends a collection with the contents of an iterator."
            },
            {
              "code": "pub fn extend_one(&mut self, _item: ())",
              "text": "Extends a collection with exactly one element."
            },
            {
              "code": "fn extend_reserve(&mut self, additional: usize)",
              "text": "Reserves capacity in a collection for the given number of additional elements."
            }
          ]
        },
        {
          "title": "impl FromIterator<()> for ()",
          "methods": [
            {
              "code": "pub fn from_iter<I>(iter: I) where I: IntoIterator<Item = ()>,",
              "text": "Creates a value from an iterator."
            }
          ]
        },
        {
          "title": "impl Hash for ()",
          "methods": [
            {
              "code": "pub fn hash<H>(&self, _state: &mut H) where H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl Ord for ()",
          "methods": [
            {
              "code": "pub fn cmp(&self, _other: &()) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl PartialEq<()> for ()",
          "methods": [
            {
              "code": "pub fn eq(&self, _other: &()) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "pub fn ne(&self, _other: &()) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialOrd<()> for ()",
          "methods": [
            {
              "code": "pub fn partial_cmp(&self, &()) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl Termination for ()",
          "methods": [
            {
              "code": "fn report(self) -> i32",
              "text": "Is called to get the representation of the value as status code. This status code is returned to the operating system."
            }
          ]
        }
      ]
    }
  ]
}