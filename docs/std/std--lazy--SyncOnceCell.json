{
  "title": "Struct std::lazy::SyncOnceCell",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub const fn new() -> SyncOnceCell<T>",
          "text": "Creates a new empty cell."
        },
        {
          "code": "pub fn get(&self) -> Option<&T>",
          "text": "Gets the reference to the underlying value."
        },
        {
          "code": "pub fn get_mut(&mut self) -> Option<&mut T>",
          "text": "Gets the mutable reference to the underlying value."
        },
        {
          "code": "pub fn set(&self, value: T) -> Result<(), T>",
          "text": "Sets the contents of this cell to value."
        },
        {
          "code": "pub fn get_or_init<F>(&self, f: F) -> &T where F: FnOnce() -> T,",
          "text": "Gets the contents of the cell, initializing it with f if the cell was empty."
        },
        {
          "code": "pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E> where F: FnOnce() -> Result<T, E>,",
          "text": "Gets the contents of the cell, initializing it with f if the cell was empty. If the cell was empty and f failed, an error is returned."
        },
        {
          "code": "pub fn into_inner(self) -> Option<T>",
          "text": "Consumes the SyncOnceCell, returning the wrapped value. Returns None if the cell was empty."
        },
        {
          "code": "pub fn take(&mut self) -> Option<T>",
          "text": "Takes the value out of this SyncOnceCell, moving it back to an uninitialized state."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<T: Clone> Clone for SyncOnceCell<T>",
          "methods": [
            {
              "code": "fn clone(&self) -> SyncOnceCell<T>",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<T: Debug> Debug for SyncOnceCell<T>",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Default for SyncOnceCell<T>",
          "methods": [
            {
              "code": "fn default() -> SyncOnceCell<T>",
              "text": "Creates a new empty cell."
            }
          ]
        },
        {
          "title": "impl<T> Drop for SyncOnceCell<T>",
          "methods": [
            {
              "code": "fn drop(&mut self)",
              "text": "Executes the destructor for this type."
            }
          ]
        },
        {
          "title": "impl<T> From<T> for SyncOnceCell<T>",
          "methods": [
            {
              "code": "fn from(value: T) -> Self",
              "text": "Create a new cell with its contents set to value."
            }
          ]
        },
        {
          "title": "impl<T: PartialEq> PartialEq<SyncOnceCell<T>> for SyncOnceCell<T>",
          "methods": [
            {
              "code": "fn eq(&self, other: &SyncOnceCell<T>) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        }
      ]
    }
  ]
}