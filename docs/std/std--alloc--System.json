{
  "title": "Struct std::alloc::System",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Allocator for System",
          "methods": [
            {
              "code": "fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>",
              "text": "Attempts to allocate a block of memory."
            },
            {
              "code": "fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>",
              "text": "Behaves like allocate, but also ensures that the returned memory is zero-initialized."
            },
            {
              "code": "unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout)",
              "text": "Deallocates the memory referenced by ptr."
            },
            {
              "code": "unsafe fn grow( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout) -> Result<NonNull<[u8]>, AllocError>",
              "text": "Attempts to extend the memory block."
            },
            {
              "code": "unsafe fn grow_zeroed( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout) -> Result<NonNull<[u8]>, AllocError>",
              "text": "Behaves like grow, but also ensures that the new contents are set to zero before being returned."
            },
            {
              "code": "unsafe fn shrink( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout) -> Result<NonNull<[u8]>, AllocError>",
              "text": "Attempts to shrink the memory block."
            },
            {
              "code": "fn by_ref(&self) -> &Self",
              "text": "Creates a “by reference” adapter for this instance of Allocator."
            }
          ]
        },
        {
          "title": "impl Clone for System",
          "methods": [
            {
              "code": "fn clone(&self) -> System",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for System",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for System",
          "methods": [
            {
              "code": "fn default() -> System",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl GlobalAlloc for System",
          "methods": [
            {
              "code": "unsafe fn alloc(&self, layout: Layout) -> *mut u8",
              "text": "Allocate memory as described by the given layout."
            },
            {
              "code": "unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8",
              "text": "Behaves like alloc, but also ensures that the contents are set to zero before being returned."
            },
            {
              "code": "unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout)",
              "text": "Deallocate the block of memory at the given ptr pointer with the given layout."
            },
            {
              "code": "unsafe fn realloc( &self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8",
              "text": "Shrink or grow a block of memory to the given new_size. The block is described by the given ptr pointer and layout."
            }
          ]
        }
      ]
    }
  ]
}