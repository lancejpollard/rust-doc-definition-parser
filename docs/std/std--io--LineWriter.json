{
  "title": "Struct std::io::LineWriter",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn new(inner: W) -> LineWriter<W>ⓘNotable traits for LineWriter<W>impl<W: Write> Write for LineWriter<W>",
          "text": "Creates a new LineWriter."
        },
        {
          "code": "pub fn with_capacity(capacity: usize, inner: W) -> LineWriter<W>ⓘNotable traits for LineWriter<W>impl<W: Write> Write for LineWriter<W>",
          "text": "Creates a new LineWriter with a specified capacity for the internal buffer."
        },
        {
          "code": "pub fn get_ref(&self) -> &W",
          "text": "Gets a reference to the underlying writer."
        },
        {
          "code": "pub fn get_mut(&mut self) -> &mut W",
          "text": "Gets a mutable reference to the underlying writer."
        },
        {
          "code": "pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>>",
          "text": "Unwraps this LineWriter, returning the underlying writer."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<W: Write> Debug for LineWriter<W> where W: Debug,",
          "methods": [
            {
              "code": "fn fmt(&self, fmt: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<W: Write> Write for LineWriter<W>",
          "methods": [
            {
              "code": "fn write(&mut self, buf: &[u8]) -> Result<usize>",
              "text": "Write a buffer into this writer, returning how many bytes were written."
            },
            {
              "code": "fn flush(&mut self) -> Result<()>",
              "text": "Flush this output stream, ensuring that all intermediately buffered contents reach their destination."
            },
            {
              "code": "fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>",
              "text": "Like write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this Writer has an efficient write_vectored implementation."
            },
            {
              "code": "fn write_all(&mut self, buf: &[u8]) -> Result<()>",
              "text": "Attempts to write an entire buffer into this writer."
            },
            {
              "code": "fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()>",
              "text": "Attempts to write multiple buffers into this writer."
            },
            {
              "code": "fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()>",
              "text": "Writes a formatted string into this writer, returning any error encountered."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self where Self: Sized,",
              "text": "Creates a “by reference” adapter for this instance of Write."
            }
          ]
        }
      ]
    }
  ]
}