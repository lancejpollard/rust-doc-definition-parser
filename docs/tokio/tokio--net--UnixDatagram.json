{
  "title": "Struct tokio::net::UnixDatagram",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub async fn ready(&self, interest: Interest) -> Result<Ready>",
          "text": "Waits for any of the requested ready states."
        },
        {
          "code": "pub async fn writable(&self) -> Result<()>",
          "text": "Waits for the socket to become writable."
        },
        {
          "code": "pub fn poll_send_ready(&self, cx: &mut Context<'_>) -> Poll<Result<()>>",
          "text": "Polls for write/send readiness."
        },
        {
          "code": "pub async fn readable(&self) -> Result<()>",
          "text": "Waits for the socket to become readable."
        },
        {
          "code": "pub fn poll_recv_ready(&self, cx: &mut Context<'_>) -> Poll<Result<()>>",
          "text": "Polls for read/receive readiness."
        },
        {
          "code": "pub fn bind<P>(path: P) -> Result<UnixDatagram> where P: AsRef<Path>,",
          "text": "Creates a new UnixDatagram bound to the specified path."
        },
        {
          "code": "pub fn pair() -> Result<(UnixDatagram, UnixDatagram)>",
          "text": "Creates an unnamed pair of connected sockets."
        },
        {
          "code": "pub fn from_std(datagram: UnixDatagram) -> Result<UnixDatagram>",
          "text": "Creates new UnixDatagram from a std::os::unix::net::UnixDatagram."
        },
        {
          "code": "pub fn into_std(self) -> Result<UnixDatagram>",
          "text": "Turns a tokio::net::UnixDatagram into a std::os::unix::net::UnixDatagram."
        },
        {
          "code": "pub fn unbound() -> Result<UnixDatagram>",
          "text": "Creates a new UnixDatagram which is not bound to any address."
        },
        {
          "code": "pub fn connect<P: AsRef<Path>>(&self, path: P) -> Result<()>",
          "text": "Connects the socket to the specified address."
        },
        {
          "code": "pub async fn send(&self, buf: &[u8]) -> Result<usize>",
          "text": "Sends data on the socket to the socket’s peer."
        },
        {
          "code": "pub fn try_send(&self, buf: &[u8]) -> Result<usize>",
          "text": "Tries to send a datagram to the peer without waiting."
        },
        {
          "code": "pub fn try_send_to<P>(&self, buf: &[u8], target: P) -> Result<usize> where P: AsRef<Path>,",
          "text": "Tries to send a datagram to the peer without waiting."
        },
        {
          "code": "pub async fn recv(&self, buf: &mut [u8]) -> Result<usize>",
          "text": "Receives data from the socket."
        },
        {
          "code": "pub fn try_recv(&self, buf: &mut [u8]) -> Result<usize>",
          "text": "Tries to receive a datagram from the peer without waiting."
        },
        {
          "code": "pub async fn send_to<P>(&self, buf: &[u8], target: P) -> Result<usize> where P: AsRef<Path>,",
          "text": "Sends data on the socket to the specified address."
        },
        {
          "code": "pub async fn recv_from(&self, buf: &mut [u8]) -> Result<(usize, SocketAddr)>",
          "text": "Receives data from the socket."
        },
        {
          "code": "pub fn poll_recv_from( &self, cx: &mut Context<'_>, buf: &mut ReadBuf<'_>) -> Poll<Result<SocketAddr>>",
          "text": "Attempts to receive a single datagram on the specified address."
        },
        {
          "code": "pub fn poll_send_to<P>( &self, cx: &mut Context<'_>, buf: &[u8], target: P) -> Poll<Result<usize>> where P: AsRef<Path>,",
          "text": "Attempts to send data to the specified address."
        },
        {
          "code": "pub fn poll_send(&self, cx: &mut Context<'_>, buf: &[u8]) -> Poll<Result<usize>>",
          "text": "Attempts to send data on the socket to the remote address to which it was previously connected."
        },
        {
          "code": "pub fn poll_recv( &self, cx: &mut Context<'_>, buf: &mut ReadBuf<'_>) -> Poll<Result<()>>",
          "text": "Attempts to receive a single datagram message on the socket from the remote address to which it is connected."
        },
        {
          "code": "pub fn try_recv_from(&self, buf: &mut [u8]) -> Result<(usize, SocketAddr)>",
          "text": "Tries to receive data from the socket without waiting."
        },
        {
          "code": "pub fn try_io<R>( &self, interest: Interest, f: impl FnOnce() -> Result<R>) -> Result<R>",
          "text": "Tries to read or write from the socket using a user-provided IO operation."
        },
        {
          "code": "pub fn local_addr(&self) -> Result<SocketAddr>",
          "text": "Returns the local address that this socket is bound to."
        },
        {
          "code": "pub fn peer_addr(&self) -> Result<SocketAddr>",
          "text": "Returns the address of this socket’s peer."
        },
        {
          "code": "pub fn take_error(&self) -> Result<Option<Error>>",
          "text": "Returns the value of the SO_ERROR option."
        },
        {
          "code": "pub fn shutdown(&self, how: Shutdown) -> Result<()>",
          "text": "Shuts down the read, write, or both halves of this connection."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl AsRawFd for UnixDatagram",
          "methods": [
            {
              "code": "fn as_raw_fd(&self) -> RawFd",
              "text": "Extracts the raw file descriptor."
            }
          ]
        },
        {
          "title": "impl Debug for UnixDatagram",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl TryFrom<UnixDatagram> for UnixDatagram",
          "methods": [
            {
              "code": "fn try_from(stream: UnixDatagram) -> Result<Self, Self::Error>",
              "text": "Consumes stream, returning the Tokio I/O object."
            },
            {
              "code": "type Error = Error",
              "text": "The type returned in the event of a conversion error."
            }
          ]
        }
      ]
    }
  ]
}