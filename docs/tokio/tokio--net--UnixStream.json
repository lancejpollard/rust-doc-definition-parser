{
  "title": "Struct tokio::net::UnixStream",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub async fn connect<P>(path: P) -> Result<UnixStream> where P: AsRef<Path>,",
          "text": "Connects to the socket named by path."
        },
        {
          "code": "pub async fn ready(&self, interest: Interest) -> Result<Ready>",
          "text": "Waits for any of the requested ready states."
        },
        {
          "code": "pub async fn readable(&self) -> Result<()>",
          "text": "Waits for the socket to become readable."
        },
        {
          "code": "pub fn poll_read_ready(&self, cx: &mut Context<'_>) -> Poll<Result<()>>",
          "text": "Polls for read readiness."
        },
        {
          "code": "pub fn try_read(&self, buf: &mut [u8]) -> Result<usize>",
          "text": "Try to read data from the stream into the provided buffer, returning how many bytes were read."
        },
        {
          "code": "pub fn try_read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>",
          "text": "Tries to read data from the stream into the provided buffers, returning how many bytes were read."
        },
        {
          "code": "pub async fn writable(&self) -> Result<()>",
          "text": "Waits for the socket to become writable."
        },
        {
          "code": "pub fn poll_write_ready(&self, cx: &mut Context<'_>) -> Poll<Result<()>>",
          "text": "Polls for write readiness."
        },
        {
          "code": "pub fn try_write(&self, buf: &[u8]) -> Result<usize>",
          "text": "Tries to write a buffer to the stream, returning how many bytes were written."
        },
        {
          "code": "pub fn try_write_vectored(&self, buf: &[IoSlice<'_>]) -> Result<usize>",
          "text": "Tries to write several buffers to the stream, returning how many bytes were written."
        },
        {
          "code": "pub fn try_io<R>( &self, interest: Interest, f: impl FnOnce() -> Result<R>) -> Result<R>",
          "text": "Tries to read or write from the socket using a user-provided IO operation."
        },
        {
          "code": "pub fn from_std(stream: UnixStream) -> Result<UnixStream>",
          "text": "Creates new UnixStream from a std::os::unix::net::UnixStream."
        },
        {
          "code": "pub fn into_std(self) -> Result<UnixStream>",
          "text": "Turns a tokio::net::UnixStream into a std::os::unix::net::UnixStream."
        },
        {
          "code": "pub fn pair() -> Result<(UnixStream, UnixStream)>",
          "text": "Creates an unnamed pair of connected sockets."
        },
        {
          "code": "pub fn local_addr(&self) -> Result<SocketAddr>",
          "text": "Returns the socket address of the local half of this connection."
        },
        {
          "code": "pub fn peer_addr(&self) -> Result<SocketAddr>",
          "text": "Returns the socket address of the remote half of this connection."
        },
        {
          "code": "pub fn peer_cred(&self) -> Result<UCred>",
          "text": "Returns effective credentials of the process which called connect or pair."
        },
        {
          "code": "pub fn take_error(&self) -> Result<Option<Error>>",
          "text": "Returns the value of the SO_ERROR option."
        },
        {
          "code": "pub fn split<'a>(&'a mut self) -> (ReadHalf<'a>, WriteHalf<'a>)",
          "text": "Splits a UnixStream into a read half and a write half, which can be used to read and write the stream concurrently."
        },
        {
          "code": "pub fn into_split(self) -> (OwnedReadHalf, OwnedWriteHalf)",
          "text": "Splits a UnixStream into a read half and a write half, which can be used to read and write the stream concurrently."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl AsRawFd for UnixStream",
          "methods": [
            {
              "code": "fn as_raw_fd(&self) -> RawFd",
              "text": "Extracts the raw file descriptor."
            }
          ]
        },
        {
          "title": "impl AsRef<UnixStream> for ReadHalf<'_>",
          "methods": [
            {
              "code": "fn as_ref(&self) -> &UnixStream",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl AsRef<UnixStream> for WriteHalf<'_>",
          "methods": [
            {
              "code": "fn as_ref(&self) -> &UnixStream",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl AsRef<UnixStream> for OwnedReadHalf",
          "methods": [
            {
              "code": "fn as_ref(&self) -> &UnixStream",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl AsRef<UnixStream> for OwnedWriteHalf",
          "methods": [
            {
              "code": "fn as_ref(&self) -> &UnixStream",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl AsyncRead for UnixStream",
          "methods": [
            {
              "code": "fn poll_read( self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &mut ReadBuf<'_>) -> Poll<Result<()>>",
              "text": "Attempts to read from the AsyncRead into buf."
            }
          ]
        },
        {
          "title": "impl AsyncWrite for UnixStream",
          "methods": [
            {
              "code": "fn poll_write( self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &[u8]) -> Poll<Result<usize>>",
              "text": "Attempt to write bytes from buf into the object."
            },
            {
              "code": "fn poll_write_vectored( self: Pin<&mut Self>, cx: &mut Context<'_>, bufs: &[IoSlice<'_>]) -> Poll<Result<usize>>",
              "text": "Like poll_write, except that it writes from a slice of buffers."
            },
            {
              "code": "fn is_write_vectored(&self) -> bool",
              "text": "Determines if this writer has an efficient poll_write_vectored implementation."
            },
            {
              "code": "fn poll_flush(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Result<()>>",
              "text": "Attempts to flush the object, ensuring that any buffered data reach their destination."
            },
            {
              "code": "fn poll_shutdown(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Result<()>>",
              "text": "Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down."
            }
          ]
        },
        {
          "title": "impl Debug for UnixStream",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl TryFrom<UnixStream> for UnixStream",
          "methods": [
            {
              "code": "fn try_from(stream: UnixStream) -> Result<Self>",
              "text": "Consumes stream, returning the tokio I/O object."
            },
            {
              "code": "type Error = Error",
              "text": "The type returned in the event of a conversion error."
            }
          ]
        }
      ]
    }
  ]
}