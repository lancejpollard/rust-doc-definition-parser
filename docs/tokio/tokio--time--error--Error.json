{
  "title": "Struct tokio::time::error::Error",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn shutdown() -> Error",
          "text": "Creates an error representing a shutdown timer."
        },
        {
          "code": "pub fn is_shutdown(&self) -> bool",
          "text": "Returns true if the error was caused by the timer being shutdown."
        },
        {
          "code": "pub fn at_capacity() -> Error",
          "text": "Creates an error representing a timer at capacity."
        },
        {
          "code": "pub fn is_at_capacity(&self) -> bool",
          "text": "Returns true if the error was caused by the timer being at capacity."
        },
        {
          "code": "pub fn invalid() -> Error",
          "text": "Creates an error representing a misconfigured timer."
        },
        {
          "code": "pub fn is_invalid(&self) -> bool",
          "text": "Returns true if the error was caused by the timer being misconfigured."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for Error",
          "methods": [
            {
              "code": "fn clone(&self) -> Error",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for Error",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Display for Error",
          "methods": [
            {
              "code": "fn fmt(&self, fmt: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Error for Error",
          "methods": [
            {
              "code": "fn source(&self) -> Option<&(dyn Error + 'static)>",
              "text": "The lower-level source of this error, if any."
            },
            {
              "code": "fn backtrace(&self) -> Option<&Backtrace>",
              "text": "Returns a stack backtrace, if available, of where this error occurred."
            }
          ]
        }
      ]
    }
  ]
}