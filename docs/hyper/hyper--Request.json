{
  "title": "Struct hyper::Request",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<B> Body for Request<B> where B: Body,",
          "methods": [
            {
              "code": "type Data = <B as Body>::Data",
              "text": "Values yielded by the Body."
            },
            {
              "code": "type Error = <B as Body>::Error",
              "text": "The error type this Body might generate."
            },
            {
              "code": "fn poll_data( self: Pin<&mut Request<B>>, cx: &mut Context<'_>) -> Poll<Option<Result<<Request<B> as Body>::Data, <Request<B> as Body>::Error>>>",
              "text": "Attempt to pull out the next data buffer of this stream."
            },
            {
              "code": "fn poll_trailers( self: Pin<&mut Request<B>>, cx: &mut Context<'_>) -> Poll<Result<Option<HeaderMap<HeaderValue>>, <Request<B> as Body>::Error>>",
              "text": "Poll for an optional single HeaderMap of trailers."
            },
            {
              "code": "fn is_end_stream(&self) -> bool",
              "text": "Returns true when the end of stream has been reached."
            },
            {
              "code": "fn size_hint(&self) -> SizeHint",
              "text": "Returns the bounds on the remaining length of the stream."
            },
            {
              "code": "fn data(&mut self) -> Data<'_, Self> where Self: Unpin,",
              "text": "Returns future that resolves to next data chunk, if any."
            },
            {
              "code": "fn trailers(&mut self) -> Trailers<'_, Self> where Self: Unpin,",
              "text": "Returns future that resolves to trailers, if any."
            },
            {
              "code": "fn map_data<F, B>(self, f: F) -> MapData<Self, F> where F: FnMut(Self::Data) -> B, B: Buf,",
              "text": "Maps this body’s data value to a different value."
            },
            {
              "code": "fn map_err<F, E>(self, f: F) -> MapErr<Self, F> where F: FnMut(Self::Error) -> E,",
              "text": "Maps this body’s error value to a different value."
            },
            {
              "code": "fn boxed(self) -> BoxBody<Self::Data, Self::Error> where Self: 'static + Send + Sync,",
              "text": "Turn this body into a boxed trait object."
            },
            {
              "code": "fn boxed_unsync(self) -> UnsyncBoxBody<Self::Data, Self::Error> where Self: 'static + Send,",
              "text": "Turn this body into a boxed trait object that is !Sync."
            }
          ]
        },
        {
          "title": "impl<T> Debug for Request<T> where T: Debug,",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Default for Request<T> where T: Default,",
          "methods": [
            {
              "code": "fn default() -> Request<T>",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl<C, B> Service<Request<B>> for Client<C, B> where C: Connect + Clone + Send + Sync + 'static, B: HttpBody + Send + 'static, B::Data: Send, B::Error: Into<Box<dyn StdError + Send + Sync>>,",
          "methods": [
            {
              "code": "type Response = Response<Body>",
              "text": "Responses given by the service."
            },
            {
              "code": "type Error = Error",
              "text": "Errors produced by the service."
            },
            {
              "code": "type Future = ResponseFuture",
              "text": "The future response value."
            },
            {
              "code": "fn poll_ready(&mut self, _: &mut Context<'_>) -> Poll<Result<(), Self::Error>>",
              "text": "Returns Poll::Ready(Ok(())) when the service is able to process requests."
            },
            {
              "code": "fn call(&mut self, req: Request<B>) -> Self::Future",
              "text": "Process the request and return the response asynchronously."
            }
          ]
        },
        {
          "title": "impl<C, B> Service<Request<B>> for &Client<C, B> where C: Connect + Clone + Send + Sync + 'static, B: HttpBody + Send + 'static, B::Data: Send, B::Error: Into<Box<dyn StdError + Send + Sync>>,",
          "methods": [
            {
              "code": "type Response = Response<Body>",
              "text": "Responses given by the service."
            },
            {
              "code": "type Error = Error",
              "text": "Errors produced by the service."
            },
            {
              "code": "type Future = ResponseFuture",
              "text": "The future response value."
            },
            {
              "code": "fn poll_ready(&mut self, _: &mut Context<'_>) -> Poll<Result<(), Self::Error>>",
              "text": "Returns Poll::Ready(Ok(())) when the service is able to process requests."
            },
            {
              "code": "fn call(&mut self, req: Request<B>) -> Self::Future",
              "text": "Process the request and return the response asynchronously."
            }
          ]
        },
        {
          "title": "impl<B> Service<Request<B>> for SendRequest<B> where B: HttpBody + 'static,",
          "methods": [
            {
              "code": "type Response = Response<Body>",
              "text": "Responses given by the service."
            },
            {
              "code": "type Error = Error",
              "text": "Errors produced by the service."
            },
            {
              "code": "type Future = ResponseFuture",
              "text": "The future response value."
            },
            {
              "code": "fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>",
              "text": "Returns Poll::Ready(Ok(())) when the service is able to process requests."
            },
            {
              "code": "fn call(&mut self, req: Request<B>) -> Self::Future",
              "text": "Process the request and return the response asynchronously."
            }
          ]
        }
      ]
    }
  ]
}