{
  "title": "Struct hyper::Uri",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for Uri",
          "methods": [
            {
              "code": "fn clone(&self) -> Uri",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for Uri",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for Uri",
          "methods": [
            {
              "code": "fn default() -> Uri",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl Display for Uri",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl FromStr for Uri",
          "methods": [
            {
              "code": "type Err = InvalidUri",
              "text": "The associated error which can be returned from parsing."
            },
            {
              "code": "fn from_str(s: &str) -> Result<Uri, InvalidUri>",
              "text": "Parses a string s to return a value of this type."
            }
          ]
        },
        {
          "title": "impl Hash for Uri",
          "methods": [
            {
              "code": "fn hash<H>(&self, state: &mut H) where H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl<'a> PartialEq<&'a str> for Uri",
          "methods": [
            {
              "code": "fn eq(&self, other: &&'a str) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialEq<Uri> for Uri",
          "methods": [
            {
              "code": "fn eq(&self, other: &Uri) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialEq<Uri> for str",
          "methods": [
            {
              "code": "fn eq(&self, uri: &Uri) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<'a> PartialEq<Uri> for &'a str",
          "methods": [
            {
              "code": "fn eq(&self, uri: &Uri) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialEq<str> for Uri",
          "methods": [
            {
              "code": "fn eq(&self, other: &str) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl<R> Service<Uri> for HttpConnector<R> where R: Resolve + Clone + Send + Sync + 'static, R::Future: Send,",
          "methods": [
            {
              "code": "type Response = TcpStream",
              "text": "Responses given by the service."
            },
            {
              "code": "type Error = ConnectError",
              "text": "Errors produced by the service."
            },
            {
              "code": "type Future = HttpConnecting<R>",
              "text": "The future response value."
            },
            {
              "code": "fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>",
              "text": "Returns Poll::Ready(Ok(())) when the service is able to process requests."
            },
            {
              "code": "fn call(&mut self, dst: Uri) -> Self::Future",
              "text": "Process the request and return the response asynchronously."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<&'a [u8]> for Uri",
          "methods": [
            {
              "code": "type Error = InvalidUri",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(t: &'a [u8]) -> Result<Uri, <Uri as TryFrom<&'a [u8]>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<&'a String> for Uri",
          "methods": [
            {
              "code": "type Error = InvalidUri",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(t: &'a String) -> Result<Uri, <Uri as TryFrom<&'a String>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<&'a Uri> for Uri",
          "methods": [
            {
              "code": "type Error = Error",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(src: &'a Uri) -> Result<Uri, <Uri as TryFrom<&'a Uri>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<&'a str> for Uri",
          "methods": [
            {
              "code": "type Error = InvalidUri",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(t: &'a str) -> Result<Uri, <Uri as TryFrom<&'a str>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl TryFrom<Parts> for Uri",
          "methods": [
            {
              "code": "type Error = InvalidUriParts",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(src: Parts) -> Result<Uri, <Uri as TryFrom<Parts>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl TryFrom<String> for Uri",
          "methods": [
            {
              "code": "type Error = InvalidUri",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(t: String) -> Result<Uri, <Uri as TryFrom<String>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<Vec<u8, Global>> for Uri",
          "methods": [
            {
              "code": "type Error = InvalidUri",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from( vec: Vec<u8, Global>) -> Result<Uri, <Uri as TryFrom<Vec<u8, Global>>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        }
      ]
    }
  ]
}