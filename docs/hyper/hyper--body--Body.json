{
  "title": "Struct hyper::body::Body",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Body for Body",
          "methods": [
            {
              "code": "type Data = Bytes",
              "text": "Values yielded by the Body."
            },
            {
              "code": "type Error = Error",
              "text": "The error type this Body might generate."
            },
            {
              "code": "fn poll_data( self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Result<Self::Data, Self::Error>>>",
              "text": "Attempt to pull out the next data buffer of this stream."
            },
            {
              "code": "fn poll_trailers( self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<Option<HeaderMap>, Self::Error>>",
              "text": "Poll for an optional single HeaderMap of trailers."
            },
            {
              "code": "fn is_end_stream(&self) -> bool",
              "text": "Returns true when the end of stream has been reached."
            },
            {
              "code": "fn size_hint(&self) -> SizeHint",
              "text": "Returns the bounds on the remaining length of the stream."
            },
            {
              "code": "fn data(&mut self) -> Data<'_, Self> where Self: Unpin,",
              "text": "Returns future that resolves to next data chunk, if any."
            },
            {
              "code": "fn trailers(&mut self) -> Trailers<'_, Self> where Self: Unpin,",
              "text": "Returns future that resolves to trailers, if any."
            },
            {
              "code": "fn map_data<F, B>(self, f: F) -> MapData<Self, F> where F: FnMut(Self::Data) -> B, B: Buf,",
              "text": "Maps this body’s data value to a different value."
            },
            {
              "code": "fn map_err<F, E>(self, f: F) -> MapErr<Self, F> where F: FnMut(Self::Error) -> E,",
              "text": "Maps this body’s error value to a different value."
            },
            {
              "code": "fn boxed(self) -> BoxBody<Self::Data, Self::Error> where Self: 'static + Send + Sync,",
              "text": "Turn this body into a boxed trait object."
            },
            {
              "code": "fn boxed_unsync(self) -> UnsyncBoxBody<Self::Data, Self::Error> where Self: 'static + Send,",
              "text": "Turn this body into a boxed trait object that is !Sync."
            }
          ]
        },
        {
          "title": "impl Debug for Body",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for Body",
          "methods": [
            {
              "code": "fn default() -> Body",
              "text": "Returns Body::empty()."
            }
          ]
        },
        {
          "title": "impl From<&'static [u8]> for Body",
          "methods": [
            {
              "code": "fn from(slice: &'static [u8]) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<&'static str> for Body",
          "methods": [
            {
              "code": "fn from(slice: &'static str) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<Box<dyn Stream<Item = Result<Bytes, Box<dyn Error + Sync + Send + 'static, Global>>> + Send + 'static, Global>> for Body",
          "methods": [
            {
              "code": "fn from( stream: Box<dyn Stream<Item = Result<Bytes, Box<dyn StdError + Send + Sync>>> + Send>) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<Bytes> for Body",
          "methods": [
            {
              "code": "fn from(chunk: Bytes) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<Cow<'static, [u8]>> for Body",
          "methods": [
            {
              "code": "fn from(cow: Cow<'static, [u8]>) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<Cow<'static, str>> for Body",
          "methods": [
            {
              "code": "fn from(cow: Cow<'static, str>) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<String> for Body",
          "methods": [
            {
              "code": "fn from(s: String) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl From<Vec<u8, Global>> for Body",
          "methods": [
            {
              "code": "fn from(vec: Vec<u8>) -> Body",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl Stream for Body",
          "methods": [
            {
              "code": "type Item = Result<Bytes>",
              "text": "Values yielded by the stream."
            },
            {
              "code": "fn poll_next( self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>",
              "text": "Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning None if the stream is exhausted."
            },
            {
              "code": "fn size_hint(&self) -> (usize, Option<usize>)",
              "text": "Returns the bounds on the remaining length of the stream."
            }
          ]
        }
      ]
    }
  ]
}