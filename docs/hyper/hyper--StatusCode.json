{
  "title": "Struct hyper::StatusCode",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for StatusCode",
          "methods": [
            {
              "code": "fn clone(&self) -> StatusCode",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for StatusCode",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Default for StatusCode",
          "methods": [
            {
              "code": "fn default() -> StatusCode",
              "text": "Returns the “default value” for a type."
            }
          ]
        },
        {
          "title": "impl Display for StatusCode",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<'a> From<&'a StatusCode> for StatusCode",
          "methods": [
            {
              "code": "fn from(t: &'a StatusCode) -> StatusCode",
              "text": "Converts to this type from the input type."
            }
          ]
        },
        {
          "title": "impl FromStr for StatusCode",
          "methods": [
            {
              "code": "type Err = InvalidStatusCode",
              "text": "The associated error which can be returned from parsing."
            },
            {
              "code": "fn from_str(s: &str) -> Result<StatusCode, InvalidStatusCode>",
              "text": "Parses a string s to return a value of this type."
            }
          ]
        },
        {
          "title": "impl Hash for StatusCode",
          "methods": [
            {
              "code": "fn hash<__H>(&self, state: &mut __H) where __H: Hasher,",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl Ord for StatusCode",
          "methods": [
            {
              "code": "fn cmp(&self, other: &StatusCode) -> Ordering",
              "text": "This method returns an Ordering between self and other."
            },
            {
              "code": "fn max(self, other: Self) -> Self",
              "text": "Compares and returns the maximum of two values."
            },
            {
              "code": "fn min(self, other: Self) -> Self",
              "text": "Compares and returns the minimum of two values."
            },
            {
              "code": "fn clamp(self, min: Self, max: Self) -> Self",
              "text": "Restrict a value to a certain interval."
            }
          ]
        },
        {
          "title": "impl PartialEq<StatusCode> for StatusCode",
          "methods": [
            {
              "code": "fn eq(&self, other: &StatusCode) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &StatusCode) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialEq<u16> for StatusCode",
          "methods": [
            {
              "code": "fn eq(&self, other: &u16) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        },
        {
          "title": "impl PartialOrd<StatusCode> for StatusCode",
          "methods": [
            {
              "code": "fn partial_cmp(&self, other: &StatusCode) -> Option<Ordering>",
              "text": "This method returns an ordering between self and other values if one exists."
            },
            {
              "code": "fn lt(&self, other: &Rhs) -> bool",
              "text": "This method tests less than (for self and other) and is used by the < operator."
            },
            {
              "code": "fn le(&self, other: &Rhs) -> bool",
              "text": "This method tests less than or equal to (for self and other) and is used by the <= operator."
            },
            {
              "code": "fn gt(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than (for self and other) and is used by the > operator."
            },
            {
              "code": "fn ge(&self, other: &Rhs) -> bool",
              "text": "This method tests greater than or equal to (for self and other) and is used by the >= operator."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<&'a [u8]> for StatusCode",
          "methods": [
            {
              "code": "type Error = InvalidStatusCode",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from( t: &'a [u8]) -> Result<StatusCode, <StatusCode as TryFrom<&'a [u8]>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl<'a> TryFrom<&'a str> for StatusCode",
          "methods": [
            {
              "code": "type Error = InvalidStatusCode",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from( t: &'a str) -> Result<StatusCode, <StatusCode as TryFrom<&'a str>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        },
        {
          "title": "impl TryFrom<u16> for StatusCode",
          "methods": [
            {
              "code": "type Error = InvalidStatusCode",
              "text": "The type returned in the event of a conversion error."
            },
            {
              "code": "fn try_from(t: u16) -> Result<StatusCode, <StatusCode as TryFrom<u16>>::Error>",
              "text": "Performs the conversion."
            }
          ]
        }
      ]
    }
  ]
}