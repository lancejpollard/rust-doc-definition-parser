{
  "title": "Struct hyper::server::Server",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<I: Debug, S: Debug> Debug for Server<I, S>",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<I, IO, IE, S, B, E> Future for Server<I, S, E> where I: Accept<Conn = IO, Error = IE>, IE: Into<Box<dyn StdError + Send + Sync>>, IO: AsyncRead + AsyncWrite + Unpin + Send + 'static, S: MakeServiceRef<IO, Body, ResBody = B>, S::Error: Into<Box<dyn StdError + Send + Sync>>, B: HttpBody + 'static, B::Error: Into<Box<dyn StdError + Send + Sync>>, E: ConnStreamExec<<S::Service as HttpService<Body>>::Future, B>, E: NewSvcExec<IO, S::Future, S::Service, E, NoopWatcher>,",
          "methods": [
            {
              "code": "type Output = Result<()>",
              "text": "The type of value produced on completion."
            },
            {
              "code": "fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>",
              "text": "Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available."
            }
          ]
        }
      ]
    }
  ]
}