{
  "title": "Struct hyper::header::IntoIter",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<T> Debug for IntoIter<T> where T: Debug,",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<T> Drop for IntoIter<T>",
          "methods": [
            {
              "code": "fn drop(&mut self)",
              "text": "Executes the destructor for this type."
            }
          ]
        },
        {
          "title": "impl<T> Iterator for IntoIter<T>",
          "methods": [
            {
              "code": "type Item = (Option<HeaderName>, T)",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "fn next(&mut self) -> Option<<IntoIter<T> as Iterator>::Item>",
              "text": "Advances the iterator and returns the next value."
            },
            {
              "code": "fn size_hint(&self) -> (usize, Option<usize>)",
              "text": "Returns the bounds on the remaining length of the iterator."
            },
            {
              "code": "fn count(self) -> usize",
              "text": "Consumes the iterator, counting the number of iterations and returning it."
            },
            {
              "code": "fn last(self) -> Option<Self::Item>",
              "text": "Consumes the iterator, returning the last element."
            },
            {
              "code": "fn advance_by(&mut self, n: usize) -> Result<(), usize>",
              "text": "Advances the iterator by n elements."
            },
            {
              "code": "fn nth(&mut self, n: usize) -> Option<Self::Item>",
              "text": "Returns the nth element of the iterator."
            },
            {
              "code": "fn step_by(self, step: usize) -> StepBy<Self>",
              "text": "Creates an iterator starting at the same point, but stepping by the given amount at each iteration."
            },
            {
              "code": "fn chain<U>(self, other: U) -> Chain<Self, <U as IntoIterator>::IntoIter> where U: IntoIterator<Item = Self::Item>,",
              "text": "Takes two iterators and creates a new iterator over both in sequence."
            },
            {
              "code": "fn zip<U>(self, other: U) -> Zip<Self, <U as IntoIterator>::IntoIter> where U: IntoIterator,",
              "text": "‘Zips up’ two iterators into a single iterator of pairs."
            },
            {
              "code": "fn intersperse(self, separator: Self::Item) -> Intersperse<Self> where Self::Item: Clone,",
              "text": "Creates a new iterator which places a copy of separator between adjacent items of the original iterator."
            },
            {
              "code": "fn intersperse_with<G>(self, separator: G) -> IntersperseWith<Self, G> where G: FnMut() -> Self::Item,",
              "text": "Creates a new iterator which places an item generated by separator between adjacent items of the original iterator."
            },
            {
              "code": "fn map<B, F>(self, f: F) -> Map<Self, F> where F: FnMut(Self::Item) -> B,",
              "text": "Takes a closure and creates an iterator which calls that closure on each element."
            },
            {
              "code": "fn for_each<F>(self, f: F) where F: FnMut(Self::Item),",
              "text": "Calls a closure on each element of an iterator."
            },
            {
              "code": "fn filter<P>(self, predicate: P) -> Filter<Self, P> where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator which uses a closure to determine if an element should be yielded."
            },
            {
              "code": "fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> where F: FnMut(Self::Item) -> Option<B>,",
              "text": "Creates an iterator that both filters and maps."
            },
            {
              "code": "fn enumerate(self) -> Enumerate<Self>",
              "text": "Creates an iterator which gives the current iteration count as well as the next value."
            },
            {
              "code": "fn peekable(self) -> Peekable<Self>",
              "text": "Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information."
            },
            {
              "code": "fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator that skips elements based on a predicate."
            },
            {
              "code": "fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> where P: FnMut(&Self::Item) -> bool,",
              "text": "Creates an iterator that yields elements based on a predicate."
            },
            {
              "code": "fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P> where P: FnMut(Self::Item) -> Option<B>,",
              "text": "Creates an iterator that both yields elements based on a predicate and maps."
            },
            {
              "code": "fn skip(self, n: usize) -> Skip<Self>",
              "text": "Creates an iterator that skips the first n elements."
            },
            {
              "code": "fn take(self, n: usize) -> Take<Self>",
              "text": "Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner."
            },
            {
              "code": "fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F> where F: FnMut(&mut St, Self::Item) -> Option<B>,",
              "text": "An iterator adapter similar to fold that holds internal state and produces a new iterator."
            },
            {
              "code": "fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F> where U: IntoIterator, F: FnMut(Self::Item) -> U,",
              "text": "Creates an iterator that works like map, but flattens nested structure."
            },
            {
              "code": "fn flatten(self) -> Flatten<Self> where Self::Item: IntoIterator,",
              "text": "Creates an iterator that flattens nested structure."
            },
            {
              "code": "fn fuse(self) -> Fuse<Self>",
              "text": "Creates an iterator which ends after the first None."
            },
            {
              "code": "fn inspect<F>(self, f: F) -> Inspect<Self, F> where F: FnMut(&Self::Item),",
              "text": "Does something with each element of an iterator, passing the value on."
            },
            {
              "code": "fn by_ref(&mut self) -> &mut Self",
              "text": "Borrows an iterator, rather than consuming it."
            },
            {
              "code": "fn collect<B>(self) -> B where B: FromIterator<Self::Item>,",
              "text": "Transforms an iterator into a collection."
            },
            {
              "code": "fn try_collect<B>( &mut self) -> <<Self::Item as Try>::Residual as Residual<B>>::TryType where B: FromIterator<<Self::Item as Try>::Output>, Self::Item: Try, <Self::Item as Try>::Residual: Residual<B>,",
              "text": "Fallibly transforms an iterator into a collection, short circuiting if a failure is encountered."
            },
            {
              "code": "fn collect_into<E>(self, collection: &mut E) -> &mut E where E: Extend<Self::Item>,",
              "text": "Collects all the items from an iterator into a collection."
            },
            {
              "code": "fn partition<B, F>(self, f: F) -> (B, B) where B: Default + Extend<Self::Item>, F: FnMut(&Self::Item) -> bool,",
              "text": "Consumes an iterator, creating two collections from it."
            },
            {
              "code": "fn partition_in_place<'a, T, P>(self, predicate: P) -> usize where T: 'a, Self: DoubleEndedIterator<Item = &'a mut T>, P: FnMut(&T) -> bool,",
              "text": "Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found."
            },
            {
              "code": "fn is_partitioned<P>(self, predicate: P) -> bool where P: FnMut(Self::Item) -> bool,",
              "text": "Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false."
            },
            {
              "code": "fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where F: FnMut(B, Self::Item) -> R, R: Try<Output = B>,",
              "text": "An iterator method that applies a function as long as it returns successfully, producing a single, final value."
            },
            {
              "code": "fn try_for_each<F, R>(&mut self, f: F) -> R where F: FnMut(Self::Item) -> R, R: Try<Output = ()>,",
              "text": "An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error."
            },
            {
              "code": "fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B,",
              "text": "Folds every element into an accumulator by applying an operation, returning the final result."
            },
            {
              "code": "fn reduce<F>(self, f: F) -> Option<Self::Item> where F: FnMut(Self::Item, Self::Item) -> Self::Item,",
              "text": "Reduces the elements to a single one, by repeatedly applying a reducing operation."
            },
            {
              "code": "fn try_reduce<F, R>( &mut self, f: F) -> <<R as Try>::Residual as Residual<Option<<R as Try>::Output>>>::TryType where F: FnMut(Self::Item, Self::Item) -> R, R: Try<Output = Self::Item>, <R as Try>::Residual: Residual<Option<Self::Item>>,",
              "text": "Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately."
            },
            {
              "code": "fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool,",
              "text": "Tests if every element of the iterator matches a predicate."
            },
            {
              "code": "fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool,",
              "text": "Tests if any element of the iterator matches a predicate."
            },
            {
              "code": "fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where P: FnMut(&Self::Item) -> bool,",
              "text": "Searches for an element of an iterator that satisfies a predicate."
            },
            {
              "code": "fn find_map<B, F>(&mut self, f: F) -> Option<B> where F: FnMut(Self::Item) -> Option<B>,",
              "text": "Applies function to the elements of iterator and returns the first non-none result."
            },
            {
              "code": "fn try_find<F, R>( &mut self, f: F) -> <<R as Try>::Residual as Residual<Option<Self::Item>>>::TryType where F: FnMut(&Self::Item) -> R, R: Try<Output = bool>, <R as Try>::Residual: Residual<Option<Self::Item>>,",
              "text": "Applies function to the elements of iterator and returns the first true result or the first error."
            },
            {
              "code": "fn position<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item) -> bool,",
              "text": "Searches for an element in an iterator, returning its index."
            },
            {
              "code": "fn rposition<P>(&mut self, predicate: P) -> Option<usize> where P: FnMut(Self::Item) -> bool, Self: ExactSizeIterator + DoubleEndedIterator,",
              "text": "Searches for an element in an iterator from the right, returning its index."
            },
            {
              "code": "fn max(self) -> Option<Self::Item> where Self::Item: Ord,",
              "text": "Returns the maximum element of an iterator."
            },
            {
              "code": "fn min(self) -> Option<Self::Item> where Self::Item: Ord,",
              "text": "Returns the minimum element of an iterator."
            },
            {
              "code": "fn max_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item) -> B,",
              "text": "Returns the element that gives the maximum value from the specified function."
            },
            {
              "code": "fn max_by<F>(self, compare: F) -> Option<Self::Item> where F: FnMut(&Self::Item, &Self::Item) -> Ordering,",
              "text": "Returns the element that gives the maximum value with respect to the specified comparison function."
            },
            {
              "code": "fn min_by_key<B, F>(self, f: F) -> Option<Self::Item> where B: Ord, F: FnMut(&Self::Item) -> B,",
              "text": "Returns the element that gives the minimum value from the specified function."
            },
            {
              "code": "fn min_by<F>(self, compare: F) -> Option<Self::Item> where F: FnMut(&Self::Item, &Self::Item) -> Ordering,",
              "text": "Returns the element that gives the minimum value with respect to the specified comparison function."
            },
            {
              "code": "fn rev(self) -> Rev<Self> where Self: DoubleEndedIterator,",
              "text": "Reverses an iterator’s direction."
            },
            {
              "code": "fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB) where FromA: Default + Extend<A>, FromB: Default + Extend<B>, Self: Iterator<Item = (A, B)>,",
              "text": "Converts an iterator of pairs into a pair of containers."
            },
            {
              "code": "fn copied<'a, T>(self) -> Copied<Self> where T: 'a + Copy, Self: Iterator<Item = &'a T>,",
              "text": "Creates an iterator which copies all of its elements."
            },
            {
              "code": "fn cloned<'a, T>(self) -> Cloned<Self> where T: 'a + Clone, Self: Iterator<Item = &'a T>,",
              "text": "Creates an iterator which clones all of its elements."
            },
            {
              "code": "fn cycle(self) -> Cycle<Self> where Self: Clone,",
              "text": "Repeats an iterator endlessly."
            },
            {
              "code": "fn sum<S>(self) -> S where S: Sum<Self::Item>,",
              "text": "Sums the elements of an iterator."
            },
            {
              "code": "fn product<P>(self) -> P where P: Product<Self::Item>,",
              "text": "Iterates over the entire iterator, multiplying all the elements"
            },
            {
              "code": "fn cmp<I>(self, other: I) -> Ordering where I: IntoIterator<Item = Self::Item>, Self::Item: Ord,",
              "text": "Lexicographically compares the elements of this Iterator with those of another."
            },
            {
              "code": "fn cmp_by<I, F>(self, other: I, cmp: F) -> Ordering where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Ordering,",
              "text": "Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function."
            },
            {
              "code": "fn partial_cmp<I>(self, other: I) -> Option<Ordering> where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Lexicographically compares the elements of this Iterator with those of another."
            },
            {
              "code": "fn partial_cmp_by<I, F>(self, other: I, partial_cmp: F) -> Option<Ordering> where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> Option<Ordering>,",
              "text": "Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function."
            },
            {
              "code": "fn eq<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are equal to those of another."
            },
            {
              "code": "fn eq_by<I, F>(self, other: I, eq: F) -> bool where I: IntoIterator, F: FnMut(Self::Item, <I as IntoIterator>::Item) -> bool,",
              "text": "Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function."
            },
            {
              "code": "fn ne<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialEq<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are unequal to those of another."
            },
            {
              "code": "fn lt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically less than those of another."
            },
            {
              "code": "fn le<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically less or equal to those of another."
            },
            {
              "code": "fn gt<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically greater than those of another."
            },
            {
              "code": "fn ge<I>(self, other: I) -> bool where I: IntoIterator, Self::Item: PartialOrd<<I as IntoIterator>::Item>,",
              "text": "Determines if the elements of this Iterator are lexicographically greater than or equal to those of another."
            },
            {
              "code": "fn is_sorted(self) -> bool where Self::Item: PartialOrd<Self::Item>,",
              "text": "Checks if the elements of this iterator are sorted."
            },
            {
              "code": "fn is_sorted_by<F>(self, compare: F) -> bool where F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,",
              "text": "Checks if the elements of this iterator are sorted using the given comparator function."
            },
            {
              "code": "fn is_sorted_by_key<F, K>(self, f: F) -> bool where F: FnMut(Self::Item) -> K, K: PartialOrd<K>,",
              "text": "Checks if the elements of this iterator are sorted using the given key extraction function."
            }
          ]
        }
      ]
    }
  ]
}