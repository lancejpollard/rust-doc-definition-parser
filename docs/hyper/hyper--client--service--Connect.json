{
  "title": "Struct hyper::client::service::Connect",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<C: Debug, B: Debug, T: Debug> Debug for Connect<C, B, T>",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl<C, B, T> Service<T> for Connect<C, B, T> where C: MakeConnection<T>, C::Connection: Unpin + Send + 'static, C::Future: Send + 'static, C::Error: Into<Box<dyn StdError + Send + Sync>> + Send, B: HttpBody + Unpin + Send + 'static, B::Data: Send + Unpin, B::Error: Into<Box<dyn StdError + Send + Sync>>,",
          "methods": [
            {
              "code": "type Response = SendRequest<B>",
              "text": "Responses given by the service."
            },
            {
              "code": "type Error = Error",
              "text": "Errors produced by the service."
            },
            {
              "code": "type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>> + Send + 'static>>",
              "text": "The future response value."
            },
            {
              "code": "fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>",
              "text": "Returns Poll::Ready(Ok(())) when the service is able to process requests."
            },
            {
              "code": "fn call(&mut self, req: T) -> Self::Future",
              "text": "Process the request and return the response asynchronously."
            }
          ]
        }
      ]
    }
  ]
}