{
  "title": "Struct rustls::ConfigBuilder",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn with_safe_defaults(self) -> ConfigBuilder<S, WantsVerifier>",
          "text": "Start side-specific config with defaults for underlying cryptography."
        },
        {
          "code": "pub fn with_cipher_suites( self, cipher_suites: &[SupportedCipherSuite]) -> ConfigBuilder<S, WantsKxGroups>",
          "text": "Choose a specific set of cipher suites."
        },
        {
          "code": "pub fn with_safe_default_cipher_suites(self) -> ConfigBuilder<S, WantsKxGroups>",
          "text": "Choose the default set of cipher suites (DEFAULT_CIPHER_SUITES)."
        },
        {
          "code": "pub fn with_kx_groups( self, kx_groups: &[&'static SupportedKxGroup]) -> ConfigBuilder<S, WantsVersions>",
          "text": "Choose a specific set of key exchange groups."
        },
        {
          "code": "pub fn with_safe_default_kx_groups(self) -> ConfigBuilder<S, WantsVersions>",
          "text": "Choose the default set of key exchange groups (ALL_KX_GROUPS)."
        },
        {
          "code": "pub fn with_safe_default_protocol_versions( self) -> Result<ConfigBuilder<S, WantsVerifier>, Error>",
          "text": "Accept the default protocol versions: both TLS1.2 and TLS1.3 are enabled."
        },
        {
          "code": "pub fn with_protocol_versions( self, versions: &[&'static SupportedProtocolVersion]) -> Result<ConfigBuilder<S, WantsVerifier>, Error>",
          "text": "Use a specific set of protocol versions."
        },
        {
          "code": "pub fn with_root_certificates( self, root_store: RootCertStore) -> ConfigBuilder<ClientConfig, WantsTransparencyPolicyOrClientCert>",
          "text": "Choose how to verify client certificates."
        },
        {
          "code": "pub fn with_custom_certificate_verifier( self, verifier: Arc<dyn ServerCertVerifier>) -> ConfigBuilder<ClientConfig, WantsClientCert>",
          "text": "Set a custom certificate verifier."
        },
        {
          "code": "pub fn with_certificate_transparency_logs( self, logs: &'static [&'static Log<'_>], validation_deadline: SystemTime) -> ConfigBuilder<ClientConfig, WantsClientCert>",
          "text": "Set Certificate Transparency logs to use for server certificate validation."
        },
        {
          "code": "pub fn with_single_cert( self, cert_chain: Vec<Certificate>, key_der: PrivateKey) -> Result<ClientConfig, Error>",
          "text": "Sets a single certificate chain and matching private key for use in client authentication."
        },
        {
          "code": "pub fn with_no_client_auth(self) -> ClientConfig",
          "text": "Do not support client auth."
        },
        {
          "code": "pub fn with_client_cert_resolver( self, client_auth_cert_resolver: Arc<dyn ResolvesClientCert>) -> ClientConfig",
          "text": "Sets a custom ResolvesClientCert."
        },
        {
          "code": "pub fn with_single_cert( self, cert_chain: Vec<Certificate>, key_der: PrivateKey) -> Result<ClientConfig, Error>",
          "text": "Sets a single certificate chain and matching private key for use in client authentication."
        },
        {
          "code": "pub fn with_no_client_auth(self) -> ClientConfig",
          "text": "Do not support client auth."
        },
        {
          "code": "pub fn with_client_cert_resolver( self, client_auth_cert_resolver: Arc<dyn ResolvesClientCert>) -> ClientConfig",
          "text": "Sets a custom ResolvesClientCert."
        },
        {
          "code": "pub fn with_client_cert_verifier( self, client_cert_verifier: Arc<dyn ClientCertVerifier>) -> ConfigBuilder<ServerConfig, WantsServerCert>",
          "text": "Choose how to verify client certificates."
        },
        {
          "code": "pub fn with_no_client_auth(self) -> ConfigBuilder<ServerConfig, WantsServerCert>",
          "text": "Disable client authentication."
        },
        {
          "code": "pub fn with_single_cert( self, cert_chain: Vec<Certificate>, key_der: PrivateKey) -> Result<ServerConfig, Error>",
          "text": "Sets a single certificate chain and matching private key. This certificate and key is used for all subsequent connections, irrespective of things like SNI hostname."
        },
        {
          "code": "pub fn with_single_cert_with_ocsp_and_sct( self, cert_chain: Vec<Certificate>, key_der: PrivateKey, ocsp: Vec<u8>, scts: Vec<u8>) -> Result<ServerConfig, Error>",
          "text": "Sets a single certificate chain, matching private key, OCSP response and SCTs. This certificate and key is used for all subsequent connections, irrespective of things like SNI hostname."
        },
        {
          "code": "pub fn with_cert_resolver( self, cert_resolver: Arc<dyn ResolvesServerCert>) -> ServerConfig",
          "text": "Sets a custom ResolvesServerCert."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl<Side: Clone + ConfigSide, State: Clone> Clone for ConfigBuilder<Side, State>",
          "methods": [
            {
              "code": "fn clone(&self) -> ConfigBuilder<Side, State>",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl<Side: ConfigSide, State> Debug for ConfigBuilder<Side, State>",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        }
      ]
    }
  ]
}