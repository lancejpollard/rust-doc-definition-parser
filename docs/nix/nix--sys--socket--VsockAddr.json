{
  "title": "Struct nix::sys::socket::VsockAddr",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn cid(&self) -> u32",
          "text": "Context Identifier (CID)"
        },
        {
          "code": "pub fn port(&self) -> u32",
          "text": "Port number"
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for VsockAddr",
          "methods": [
            {
              "code": "fn clone(&self) -> VsockAddr",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for VsockAddr",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Display for VsockAddr",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Hash for VsockAddr",
          "methods": [
            {
              "code": "fn hash<H: Hasher>(&self, s: &mut H)",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl PartialEq<VsockAddr> for VsockAddr",
          "methods": [
            {
              "code": "fn eq(&self, other: &Self) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        }
      ]
    }
  ]
}