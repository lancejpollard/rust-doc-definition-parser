{
  "title": "Struct nix::net::if_::Interfaces",
  "sections": [
    {
      "name": "implementations",
      "methods": [
        {
          "code": "pub fn iter(&self) -> InterfacesIter<'_>ⓘNotable traits for InterfacesIter<'a>impl<'a> Iterator for InterfacesIter<'a> type Item = &'a Interface;",
          "text": "Iterate over the interfaces in this list."
        },
        {
          "code": "pub fn to_slice(&self) -> &[Interface]",
          "text": "Convert this to a slice of interfaces. Note that the underlying interfaces list is null-terminated, so calling this calculates the length. If random access isn’t needed, Interfaces::iter() should be used instead."
        }
      ]
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Debug for Interfaces",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl Drop for Interfaces",
          "methods": [
            {
              "code": "fn drop(&mut self)",
              "text": "Executes the destructor for this type."
            }
          ]
        },
        {
          "title": "impl<'a> IntoIterator for &'a Interfaces",
          "methods": [
            {
              "code": "type IntoIter = InterfacesIter<'a>",
              "text": "Which kind of iterator are we turning this into?"
            },
            {
              "code": "type Item = &'a Interface",
              "text": "The type of the elements being iterated over."
            },
            {
              "code": "fn into_iter(self) -> Self::IntoIter",
              "text": "Creates an iterator from a value."
            }
          ]
        }
      ]
    }
  ]
}