{
  "title": "Struct nix::sys::socket::sockopt::PeerCredentials",
  "sections": [
    {
      "name": "implementations",
      "methods": []
    },
    {
      "name": "derefMethods",
      "methods": []
    },
    {
      "name": "traitImpl",
      "traits": [
        {
          "title": "impl Clone for PeerCredentials",
          "methods": [
            {
              "code": "fn clone(&self) -> PeerCredentials",
              "text": "Returns a copy of the value."
            },
            {
              "code": "fn clone_from(&mut self, source: &Self)",
              "text": "Performs copy-assignment from source."
            }
          ]
        },
        {
          "title": "impl Debug for PeerCredentials",
          "methods": [
            {
              "code": "fn fmt(&self, f: &mut Formatter<'_>) -> Result",
              "text": "Formats the value using the given formatter."
            }
          ]
        },
        {
          "title": "impl GetSockOpt for PeerCredentials",
          "methods": [
            {
              "code": "fn get(&self, fd: RawFd) -> Result<UnixCredentials>",
              "text": "Look up the value of this socket option on the given socket."
            }
          ]
        },
        {
          "title": "impl Hash for PeerCredentials",
          "methods": [
            {
              "code": "fn hash<__H: Hasher>(&self, state: &mut __H)",
              "text": "Feeds this value into the given Hasher."
            },
            {
              "code": "fn hash_slice<H>(data: &[Self], state: &mut H) where H: Hasher,",
              "text": "Feeds a slice of this type into the given Hasher."
            }
          ]
        },
        {
          "title": "impl PartialEq<PeerCredentials> for PeerCredentials",
          "methods": [
            {
              "code": "fn eq(&self, other: &PeerCredentials) -> bool",
              "text": "This method tests for self and other values to be equal, and is used by ==."
            },
            {
              "code": "fn ne(&self, other: &Rhs) -> bool",
              "text": "This method tests for !=."
            }
          ]
        }
      ]
    }
  ]
}